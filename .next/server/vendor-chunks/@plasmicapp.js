/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@plasmicapp";
exports.ids = ["vendor-chunks/@plasmicapp"];
exports.modules = {

/***/ "(ssr)/./node_modules/@plasmicapp/data-sources-context/dist/index.esm.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@plasmicapp/data-sources-context/dist/index.esm.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlasmicDataSourceContextProvider: () => (/* binding */ PlasmicDataSourceContextProvider),\n/* harmony export */   useCurrentUser: () => (/* binding */ useCurrentUser),\n/* harmony export */   usePlasmicDataSourceContext: () => (/* binding */ usePlasmicDataSourceContext)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ PlasmicDataSourceContextProvider,useCurrentUser,usePlasmicDataSourceContext auto */ // src/index.tsx\n\nvar PlasmicDataSourceContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(void 0);\nfunction usePlasmicDataSourceContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0___default().useContext(PlasmicDataSourceContext);\n}\nfunction useCurrentUser() {\n    var _a;\n    const ctx = usePlasmicDataSourceContext();\n    return (_a = ctx == null ? void 0 : ctx.user) != null ? _a : {\n        isLoggedIn: false\n    };\n}\nvar PlasmicDataSourceContextProvider = PlasmicDataSourceContext.Provider;\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBsYXNtaWNhcHAvZGF0YS1zb3VyY2VzLWNvbnRleHQvZGlzdC9pbmRleC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWtCO0FBZ0JsQixJQUFNLHlDQUEyQiwwREFBTSxDQUVyQyxNQUFTO0FBRUosU0FBUyw4QkFBOEI7SUFDNUMsT0FBTyx1REFBTSxDQUFXLHdCQUF3QjtBQUNsRDtBQUVPLFNBQVMsaUJBQWlCO0lBeEJqQztJQXlCRSxNQUFNLE1BQU0sNEJBQTRCO0lBQ3hDLFFBQ0UsZ0NBQUssU0FBTCxZQUFhO1FBQ1gsWUFBWTtJQUNkO0FBRUo7QUFFTyxJQUFNLG1DQUNYLHlCQUF5QiIsInNvdXJjZXMiOlsiL1VzZXJzL3dvbmRlcmxhbmRtaXRjaC9DYXNjYWRlUHJvamVjdHMvc3JjL2luZGV4LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXNtaWNEYXRhU291cmNlQ29udGV4dFZhbHVlIHtcbiAgdXNlckF1dGhUb2tlbj86IHN0cmluZyB8IG51bGw7XG4gIGlzVXNlckxvYWRpbmc/OiBib29sZWFuO1xuICBhdXRoUmVkaXJlY3RVcmk/OiBzdHJpbmc7XG4gIHVzZXI/OiB7XG4gICAgZW1haWw6IHN0cmluZztcbiAgICBwcm9wZXJ0aWVzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiB8IG51bGw7XG4gICAgcm9sZUlkOiBzdHJpbmc7XG4gICAgcm9sZU5hbWU6IHN0cmluZztcbiAgICByb2xlSWRzOiBzdHJpbmdbXTtcbiAgICByb2xlTmFtZXM6IHN0cmluZ1tdO1xuICB9IHwgbnVsbDtcbn1cblxuY29uc3QgUGxhc21pY0RhdGFTb3VyY2VDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxcbiAgUGxhc21pY0RhdGFTb3VyY2VDb250ZXh0VmFsdWUgfCB1bmRlZmluZWRcbj4odW5kZWZpbmVkKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBsYXNtaWNEYXRhU291cmNlQ29udGV4dCgpIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoUGxhc21pY0RhdGFTb3VyY2VDb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUN1cnJlbnRVc2VyKCkge1xuICBjb25zdCBjdHggPSB1c2VQbGFzbWljRGF0YVNvdXJjZUNvbnRleHQoKTtcbiAgcmV0dXJuIChcbiAgICBjdHg/LnVzZXIgPz8ge1xuICAgICAgaXNMb2dnZWRJbjogZmFsc2UsXG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgY29uc3QgUGxhc21pY0RhdGFTb3VyY2VDb250ZXh0UHJvdmlkZXIgPVxuICBQbGFzbWljRGF0YVNvdXJjZUNvbnRleHQuUHJvdmlkZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/data-sources-context/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/host/dist/host.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@plasmicapp/host/dist/host.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataContext: () => (/* binding */ DataContext),\n/* harmony export */   DataCtxReader: () => (/* binding */ DataCtxReader),\n/* harmony export */   DataProvider: () => (/* binding */ DataProvider),\n/* harmony export */   GlobalActionsContext: () => (/* binding */ GlobalActionsContext),\n/* harmony export */   GlobalActionsProvider: () => (/* binding */ GlobalActionsProvider),\n/* harmony export */   PageParamsProvider: () => (/* binding */ PageParamsProvider),\n/* harmony export */   PlasmicCanvasContext: () => (/* binding */ PlasmicCanvasContext),\n/* harmony export */   PlasmicCanvasHost: () => (/* binding */ PlasmicCanvasHost),\n/* harmony export */   PlasmicLinkProvider: () => (/* binding */ PlasmicLinkProvider),\n/* harmony export */   PlasmicTranslatorContext: () => (/* binding */ PlasmicTranslatorContext),\n/* harmony export */   applySelector: () => (/* binding */ applySelector),\n/* harmony export */   mkMetaName: () => (/* binding */ mkMetaName),\n/* harmony export */   mkMetaValue: () => (/* binding */ mkMetaValue),\n/* harmony export */   registerComponent: () => (/* binding */ registerComponent),\n/* harmony export */   registerFunction: () => (/* binding */ registerFunction),\n/* harmony export */   registerGlobalContext: () => (/* binding */ registerGlobalContext),\n/* harmony export */   registerToken: () => (/* binding */ registerToken),\n/* harmony export */   registerTrait: () => (/* binding */ registerTrait),\n/* harmony export */   repeatedElement: () => (/* binding */ repeatedElement),\n/* harmony export */   stateHelpersKeys: () => (/* binding */ stateHelpersKeys),\n/* harmony export */   unstable_registerFetcher: () => (/* binding */ registerFetcher),\n/* harmony export */   useDataEnv: () => (/* binding */ useDataEnv),\n/* harmony export */   useGlobalActions: () => (/* binding */ useGlobalActions),\n/* harmony export */   usePlasmicCanvasComponentInfo: () => (/* binding */ usePlasmicCanvasComponentInfo),\n/* harmony export */   usePlasmicCanvasContext: () => (/* binding */ usePlasmicCanvasContext),\n/* harmony export */   usePlasmicLink: () => (/* binding */ usePlasmicLink),\n/* harmony export */   usePlasmicLinkMaybe: () => (/* binding */ usePlasmicLinkMaybe),\n/* harmony export */   usePlasmicTranslator: () => (/* binding */ usePlasmicTranslator),\n/* harmony export */   useSelector: () => (/* binding */ useSelector),\n/* harmony export */   useSelectors: () => (/* binding */ useSelectors)\n/* harmony export */ });\n/* harmony import */ var _plasmicapp_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @plasmicapp/query */ \"(ssr)/./node_modules/@plasmicapp/query/dist/index.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ DataContext,DataCtxReader,DataProvider,GlobalActionsContext,GlobalActionsProvider,PageParamsProvider,PlasmicCanvasContext,PlasmicCanvasHost,PlasmicLinkProvider,PlasmicTranslatorContext,applySelector,mkMetaName,mkMetaValue,registerComponent,registerFunction,registerGlobalContext,registerToken,registerTrait,repeatedElement,stateHelpersKeys,unstable_registerFetcher,useDataEnv,useGlobalActions,usePlasmicCanvasComponentInfo,usePlasmicCanvasContext,usePlasmicLink,usePlasmicLinkMaybe,usePlasmicTranslator,useSelector,useSelectors auto */ \n\n\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\ntypeof SuppressedError === \"function\" ? SuppressedError : function(error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\nfunction isString(x) {\n    return typeof x === \"string\";\n}\nfunction ensure(x, msg) {\n    if (msg === void 0) {\n        msg = \"\";\n    }\n    if (x === null || x === undefined) {\n        debugger;\n        msg = (isString(msg) ? msg : msg()) || \"\";\n        throw new Error(\"Value must not be undefined or null\".concat(msg ? \"- \".concat(msg) : \"\"));\n    } else {\n        return x;\n    }\n}\nfunction useForceUpdate() {\n    var _a = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0), setTick = _a[1];\n    var update = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"useForceUpdate.useCallback[update]\": function() {\n            setTick({\n                \"useForceUpdate.useCallback[update]\": function(tick) {\n                    return tick + 1;\n                }\n            }[\"useForceUpdate.useCallback[update]\"]);\n        }\n    }[\"useForceUpdate.useCallback[update]\"], []);\n    return update;\n}\nif (globalThis.__PlasmicHostVersion == null) {\n    globalThis.__PlasmicHostVersion = \"3\";\n}\nvar rootChangeListeners = [];\nvar PlasmicRootNodeWrapper = /** @class */ function() {\n    function PlasmicRootNodeWrapper(value) {\n        var _this = this;\n        this.value = value;\n        this.set = function(val) {\n            _this.value = val;\n            rootChangeListeners.forEach(function(f) {\n                return f();\n            });\n        };\n        this.get = function() {\n            return _this.value;\n        };\n    }\n    return PlasmicRootNodeWrapper;\n}();\nvar plasmicRootNode = new PlasmicRootNodeWrapper(null);\nfunction getHashParams() {\n    return new URLSearchParams(location.hash.replace(/^#/, \"?\"));\n}\nfunction getPlasmicOrigin() {\n    var params = getHashParams();\n    return ensure(params.get(\"origin\"), \"Missing information from Plasmic window.\");\n}\nfunction getStudioHash() {\n    var hashParams = getHashParams();\n    if (hashParams.has(\"studioHash\")) {\n        return hashParams.get(\"studioHash\");\n    }\n    var urlParams = new URL(location.href).searchParams;\n    return urlParams.get(\"studio-hash\");\n}\nfunction renderStudioIntoIframe() {\n    var script = document.createElement(\"script\");\n    var plasmicOrigin = getPlasmicOrigin();\n    var hash = getStudioHash();\n    script.src = \"\".concat(plasmicOrigin, \"/static/js/studio\").concat(hash ? \".\".concat(hash, \".js\") : \".js\");\n    document.body.appendChild(script);\n}\nvar renderCount = 0;\nfunction setPlasmicRootNode(node) {\n    // Keep track of renderCount, which we use as key to ErrorBoundary, so\n    // we can reset the error on each render\n    renderCount++;\n    plasmicRootNode.set(node);\n}\n/**\n * React context to detect whether the component is rendered on Plasmic editor.\n * If not, return false.\n * If so, return an object with more information about the component\n */ var PlasmicCanvasContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(false);\nvar usePlasmicCanvasContext = function() {\n    return react__WEBPACK_IMPORTED_MODULE_1__.useContext(PlasmicCanvasContext);\n};\nfunction _PlasmicCanvasHost() {\n    var _a, _b;\n    // If window.parent is null, then this is a window whose containing iframe\n    // has been detached from the DOM (for the top window, window.parent === window).\n    // In that case, we shouldn't do anything.  If window.parent is null, by the way,\n    // location.hash will also be null.\n    var isFrameAttached = !!window.parent;\n    var isCanvas = !!((_a = location.hash) === null || _a === void 0 ? void 0 : _a.match(/\\bcanvas=true\\b/));\n    var isLive = !!((_b = location.hash) === null || _b === void 0 ? void 0 : _b.match(/\\blive=true\\b/)) || !isFrameAttached;\n    var shouldRenderStudio = isFrameAttached && !document.querySelector(\"#plasmic-studio-tag\") && !isCanvas && !isLive;\n    var forceUpdate = useForceUpdate();\n    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect({\n        \"_PlasmicCanvasHost.useLayoutEffect\": function() {\n            rootChangeListeners.push(forceUpdate);\n            return ({\n                \"_PlasmicCanvasHost.useLayoutEffect\": function() {\n                    var index = rootChangeListeners.indexOf(forceUpdate);\n                    if (index >= 0) {\n                        rootChangeListeners.splice(index, 1);\n                    }\n                }\n            })[\"_PlasmicCanvasHost.useLayoutEffect\"];\n        }\n    }[\"_PlasmicCanvasHost.useLayoutEffect\"], [\n        forceUpdate\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"_PlasmicCanvasHost.useEffect\": function() {\n            if (shouldRenderStudio && isFrameAttached && window.parent !== window) {\n                renderStudioIntoIframe();\n            }\n        }\n    }[\"_PlasmicCanvasHost.useEffect\"], [\n        shouldRenderStudio,\n        isFrameAttached\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"_PlasmicCanvasHost.useEffect\": function() {\n            if (!shouldRenderStudio && !document.querySelector(\"#getlibs\") && isLive) {\n                var scriptElt = document.createElement(\"script\");\n                scriptElt.id = \"getlibs\";\n                scriptElt.src = getPlasmicOrigin() + \"/static/js/getlibs.js\";\n                scriptElt.async = false;\n                scriptElt.onload = ({\n                    \"_PlasmicCanvasHost.useEffect\": function() {\n                        var _a, _b;\n                        (_b = (_a = window).__GetlibsReadyResolver) === null || _b === void 0 ? void 0 : _b.call(_a);\n                    }\n                })[\"_PlasmicCanvasHost.useEffect\"];\n                document.head.append(scriptElt);\n            }\n        }\n    }[\"_PlasmicCanvasHost.useEffect\"], [\n        shouldRenderStudio\n    ]);\n    var _c = react__WEBPACK_IMPORTED_MODULE_1__.useState({\n        \"_PlasmicCanvasHost.useState[_c]\": function() {\n            return deriveCanvasContextValue();\n        }\n    }[\"_PlasmicCanvasHost.useState[_c]\"]), canvasContextValue = _c[0], setCanvasContextValue = _c[1];\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"_PlasmicCanvasHost.useEffect\": function() {\n            if (isCanvas) {\n                var listener_1 = {\n                    \"_PlasmicCanvasHost.useEffect.listener_1\": function() {\n                        setCanvasContextValue(deriveCanvasContextValue());\n                    }\n                }[\"_PlasmicCanvasHost.useEffect.listener_1\"];\n                window.addEventListener(\"hashchange\", listener_1);\n                return ({\n                    \"_PlasmicCanvasHost.useEffect\": function() {\n                        return window.removeEventListener(\"hashchange\", listener_1);\n                    }\n                })[\"_PlasmicCanvasHost.useEffect\"];\n            }\n            return undefined;\n        }\n    }[\"_PlasmicCanvasHost.useEffect\"], [\n        isCanvas\n    ]);\n    if (!isFrameAttached) {\n        return null;\n    }\n    if (isCanvas || isLive) {\n        var appDiv = document.querySelector(\"#plasmic-app.__wab_user-body\");\n        if (!appDiv) {\n            appDiv = document.createElement(\"div\");\n            appDiv.id = \"plasmic-app\";\n            appDiv.classList.add(\"__wab_user-body\");\n            document.body.prepend(appDiv);\n        }\n        return /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_2__.createPortal(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ErrorBoundary, {\n            key: \"\".concat(renderCount)\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(PlasmicCanvasContext.Provider, {\n            value: canvasContextValue\n        }, plasmicRootNode.get())), appDiv, \"plasmic-app\");\n    }\n    if (shouldRenderStudio && window.parent === window) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"iframe\", {\n            src: \"https://docs.plasmic.app/app-content/app-host-ready#appHostUrl=\".concat(encodeURIComponent(location.href)),\n            style: {\n                width: \"100vw\",\n                height: \"100vh\",\n                border: \"none\",\n                position: \"fixed\",\n                top: 0,\n                left: 0,\n                zIndex: 99999999\n            }\n        });\n    }\n    return null;\n}\nvar PlasmicCanvasHost = function(props) {\n    var enableWebpackHmr = props.enableWebpackHmr;\n    var _a = react__WEBPACK_IMPORTED_MODULE_1__.useState(null), node = _a[0], setNode = _a[1];\n    react__WEBPACK_IMPORTED_MODULE_1__.useEffect({\n        \"PlasmicCanvasHost.useEffect\": function() {\n            setNode(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(_PlasmicCanvasHost, null));\n        }\n    }[\"PlasmicCanvasHost.useEffect\"], []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, !enableWebpackHmr && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(DisableWebpackHmr, null), node);\n};\nvar renderErrorListeners = [];\nfunction registerRenderErrorListener(listener) {\n    renderErrorListeners.push(listener);\n    return function() {\n        var index = renderErrorListeners.indexOf(listener);\n        if (index >= 0) {\n            renderErrorListeners.splice(index, 1);\n        }\n    };\n}\nvar ErrorBoundary = /** @class */ function(_super) {\n    __extends(ErrorBoundary, _super);\n    function ErrorBoundary(props) {\n        var _this = _super.call(this, props) || this;\n        _this.state = {};\n        return _this;\n    }\n    ErrorBoundary.getDerivedStateFromError = function(error) {\n        return {\n            error: error\n        };\n    };\n    ErrorBoundary.prototype.componentDidCatch = function(error) {\n        renderErrorListeners.forEach(function(listener) {\n            return listener(error);\n        });\n    };\n    ErrorBoundary.prototype.render = function() {\n        if (this.state.error) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", null, \"Error: \", \"\".concat(this.state.error.message));\n        } else {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, this.props.children);\n        }\n    };\n    return ErrorBoundary;\n}(react__WEBPACK_IMPORTED_MODULE_1__.Component);\nfunction DisableWebpackHmr() {\n    if (false) {}\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"script\", {\n        type: \"text/javascript\",\n        dangerouslySetInnerHTML: {\n            __html: \"\\n      if (typeof window !== \\\"undefined\\\") {\\n        const RealEventSource = window.EventSource;\\n        window.EventSource = function(url, config) {\\n          if (/[^a-zA-Z]hmr($|[^a-zA-Z])/.test(url)) {\\n            console.warn(\\\"Plasmic: disabled EventSource request for\\\", url);\\n            return {\\n              onerror() {}, onmessage() {}, onopen() {}, close() {}\\n            };\\n          } else {\\n            return new RealEventSource(url, config);\\n          }\\n        }\\n      }\\n      \"\n        }\n    });\n}\nfunction deriveCanvasContextValue() {\n    var _a;\n    var hash = window.location.hash;\n    if (hash && hash.length > 0) {\n        // create URLsearchParams skipping the initial # character\n        var params = new URLSearchParams(hash.substring(1));\n        if (params.get(\"canvas\") === \"true\") {\n            var globalVariants = params.get(\"globalVariants\");\n            return {\n                componentName: (_a = params.get(\"componentName\")) !== null && _a !== void 0 ? _a : null,\n                globalVariants: globalVariants ? JSON.parse(globalVariants) : {},\n                interactive: params.get(\"interactive\") === \"true\"\n            };\n        }\n    }\n    return false;\n}\nvar INTERNAL_CC_CANVAS_SELECTION_PROP = \"__plasmic_selection_prop__\";\nfunction usePlasmicCanvasComponentInfo(props) {\n    return react__WEBPACK_IMPORTED_MODULE_1__.useMemo({\n        \"usePlasmicCanvasComponentInfo.useMemo\": function() {\n            // Inside Plasmic Studio, code components will receive an additional prop\n            // that contains selection information for that specific code component.\n            // This hook will return that selection information which is useful for\n            // changing the behavior of the code component when it is selected, making\n            // it easier to interact with code components and slots that aren't always\n            // visible in the canvas. (e.g. automatically opening a modal when it's selected)\n            var selectionInfo = props === null || props === void 0 ? void 0 : props[INTERNAL_CC_CANVAS_SELECTION_PROP];\n            if (selectionInfo) {\n                return {\n                    isSelected: selectionInfo.isSelected,\n                    selectedSlotName: selectionInfo.selectedSlotName\n                };\n            }\n            return null;\n        }\n    }[\"usePlasmicCanvasComponentInfo.useMemo\"], [\n        props\n    ]);\n}\nvar tuple = function() {\n    var args = [];\n    for(var _i = 0; _i < arguments.length; _i++){\n        args[_i] = arguments[_i];\n    }\n    return args;\n};\nvar DataContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction mkMetaName(name) {\n    return \"__plasmic_meta_\".concat(name);\n}\nfunction mkMetaValue(meta) {\n    return meta;\n}\nfunction applySelector(rawData, selector) {\n    if (!selector) {\n        return undefined;\n    }\n    var curData = rawData;\n    for(var _i = 0, _a = selector.split(\".\"); _i < _a.length; _i++){\n        var key = _a[_i];\n        curData = curData === null || curData === void 0 ? void 0 : curData[key];\n    }\n    return curData;\n}\nfunction useSelector(selector) {\n    var rawData = useDataEnv();\n    return applySelector(rawData, selector);\n}\nfunction useSelectors(selectors) {\n    if (selectors === void 0) {\n        selectors = {};\n    }\n    var rawData = useDataEnv();\n    return Object.fromEntries(Object.entries(selectors).filter(function(_a) {\n        var key = _a[0], selector = _a[1];\n        return !!key && !!selector;\n    }).map(function(_a) {\n        var key = _a[0], selector = _a[1];\n        return tuple(key, applySelector(rawData, selector));\n    }));\n}\nfunction useDataEnv() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(DataContext);\n}\nfunction DataProvider(_a) {\n    var _b;\n    var _c;\n    var name = _a.name, data = _a.data, hidden = _a.hidden, advanced = _a.advanced, label = _a.label, children = _a.children;\n    var existingEnv = (_c = useDataEnv()) !== null && _c !== void 0 ? _c : {};\n    if (!name) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement((react__WEBPACK_IMPORTED_MODULE_1___default().Fragment), null, children);\n    } else {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(DataContext.Provider, {\n            value: __assign(__assign({}, existingEnv), (_b = {}, _b[name] = data, _b[mkMetaName(name)] = mkMetaValue({\n                hidden: hidden,\n                advanced: advanced,\n                label: label\n            }), _b))\n        }, children);\n    }\n}\n/**\n * This transforms `{ \"...slug\": \"a/b/c\" }` into `{ \"slug\": [\"a\", \"b\", \"c\"] }.\n */ function fixCatchallParams(params) {\n    var newParams = {};\n    for(var _i = 0, _a = Object.entries(params); _i < _a.length; _i++){\n        var _b = _a[_i], key = _b[0], value = _b[1];\n        if (!value) {\n            continue;\n        }\n        if (key.startsWith(\"...\")) {\n            newParams[key.slice(3)] = typeof value === \"string\" ? value.replace(/^\\/|\\/$/g, \"\").split(\"/\") : value;\n        } else {\n            newParams[key] = value;\n        }\n    }\n    return newParams;\n}\nfunction mkPathFromRouteAndParams(route, params) {\n    if (!params) {\n        return route;\n    }\n    var path = route;\n    for(var _i = 0, _a = Object.entries(params); _i < _a.length; _i++){\n        var _b = _a[_i], key = _b[0], value = _b[1];\n        if (typeof value === \"string\") {\n            path = path.replace(\"[\".concat(key, \"]\"), value);\n        } else if (Array.isArray(value)) {\n            if (path.includes(\"[[...\".concat(key, \"]]\"))) {\n                path = path.replace(\"[[...\".concat(key, \"]]\"), value.join(\"/\"));\n            } else if (path.includes(\"[...\".concat(key, \"]\"))) {\n                path = path.replace(\"[...\".concat(key, \"]\"), value.join(\"/\"));\n            }\n        }\n    }\n    return path;\n}\nfunction PageParamsProvider(_a) {\n    var children = _a.children, route = _a.route, deprecatedRoute = _a.path, _b = _a.params, params = _b === void 0 ? {} : _b, _c = _a.query, query = _c === void 0 ? {} : _c;\n    route = route !== null && route !== void 0 ? route : deprecatedRoute;\n    params = fixCatchallParams(params);\n    var $ctx = useDataEnv() || {};\n    var path = route ? mkPathFromRouteAndParams(route, params) : undefined;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(DataProvider, {\n        name: \"pageRoute\",\n        data: route,\n        label: \"Page route\",\n        advanced: true\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(DataProvider, {\n        name: \"pagePath\",\n        data: path,\n        label: \"Page path\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(DataProvider, {\n        name: \"params\",\n        data: __assign(__assign({}, $ctx.params), params),\n        label: \"Page URL path params\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(DataProvider, {\n        name: \"query\",\n        data: __assign(__assign({}, $ctx.query), query),\n        label: \"Page URL query params\"\n    }, children))));\n}\nfunction DataCtxReader(_a) {\n    var children = _a.children;\n    var $ctx = useDataEnv();\n    return children($ctx);\n}\nvar root$7 = globalThis;\nroot$7.__PlasmicFetcherRegistry = [];\nfunction registerFetcher(fetcher, meta) {\n    root$7.__PlasmicFetcherRegistry.push({\n        fetcher: fetcher,\n        meta: meta\n    });\n}\nvar GlobalActionsContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createContext(undefined);\nfunction GlobalActionsProvider(props) {\n    var contextName = props.contextName, children = props.children, actions = props.actions;\n    var existingActions = useGlobalActions();\n    var namespacedActions = react__WEBPACK_IMPORTED_MODULE_1___default().useMemo({\n        \"GlobalActionsProvider.useMemo[namespacedActions]\": function() {\n            return Object.fromEntries(Object.entries(actions).map({\n                \"GlobalActionsProvider.useMemo[namespacedActions]\": function(_a) {\n                    var key = _a[0], val = _a[1];\n                    return [\n                        \"\".concat(contextName, \".\").concat(key),\n                        val\n                    ];\n                }\n            }[\"GlobalActionsProvider.useMemo[namespacedActions]\"]));\n        }\n    }[\"GlobalActionsProvider.useMemo[namespacedActions]\"], [\n        contextName,\n        actions\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(GlobalActionsContext.Provider, {\n        value: __assign(__assign({}, existingActions), namespacedActions)\n    }, children);\n}\nfunction useGlobalActions() {\n    var _a;\n    return (_a = react__WEBPACK_IMPORTED_MODULE_1___default().useContext(GlobalActionsContext)) !== null && _a !== void 0 ? _a : {};\n}\nvar PlasmicLinkContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createContext(undefined);\nfunction usePlasmicLinkMaybe() {\n    return react__WEBPACK_IMPORTED_MODULE_1___default().useContext(PlasmicLinkContext);\n}\nvar AnchorLink = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().forwardRef(function AnchorLink(props, ref) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(\"a\", __assign({}, props, {\n        ref: ref\n    }));\n});\nfunction usePlasmicLink() {\n    var Link = react__WEBPACK_IMPORTED_MODULE_1___default().useContext(PlasmicLinkContext);\n    if (Link) {\n        return Link;\n    } else {\n        return AnchorLink;\n    }\n}\nfunction PlasmicLinkProvider(props) {\n    var Link = props.Link, children = props.children;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(PlasmicLinkContext.Provider, {\n        value: Link\n    }, children);\n}\nvar root$6 = globalThis;\n// A compile-time error will occur if a new field is added to the StateHelper\n// interface but not included in the keys array of state helper.\nvar stateHelpersKeys = [\n    \"initFunc\",\n    \"onChangeArgsToValue\",\n    \"onMutate\"\n];\nif (root$6.__PlasmicComponentRegistry == null) {\n    root$6.__PlasmicComponentRegistry = [];\n}\nfunction registerComponent(component, meta) {\n    // Check for duplicates\n    if (root$6.__PlasmicComponentRegistry.some(function(r) {\n        return r.component === component && r.meta.name === meta.name;\n    })) {\n        return;\n    }\n    root$6.__PlasmicComponentRegistry.push({\n        component: component,\n        meta: meta\n    });\n}\nvar root$5 = globalThis;\nif (root$5.__PlasmicFunctionsRegistry == null) {\n    root$5.__PlasmicFunctionsRegistry = [];\n}\nfunction registerFunction(fn, meta) {\n    // Check for duplicates\n    if (root$5.__PlasmicFunctionsRegistry.some(function(r) {\n        return r.function === fn && r.meta.name === meta.name && r.meta.namespace == meta.namespace;\n    })) {\n        return;\n    }\n    root$5.__PlasmicFunctionsRegistry.push({\n        function: fn,\n        meta: meta\n    });\n}\nvar root$4 = globalThis;\nif (root$4.__PlasmicContextRegistry == null) {\n    root$4.__PlasmicContextRegistry = [];\n}\nfunction registerGlobalContext(component, meta) {\n    // Check for duplicates\n    if (root$4.__PlasmicContextRegistry.some(function(r) {\n        return r.component === component && r.meta.name === meta.name;\n    })) {\n        return;\n    }\n    root$4.__PlasmicContextRegistry.push({\n        component: component,\n        meta: meta\n    });\n}\nvar root$3 = globalThis;\nif (root$3.__PlasmicTokenRegistry == null) {\n    root$3.__PlasmicTokenRegistry = [];\n}\nfunction registerToken(token) {\n    root$3.__PlasmicTokenRegistry.push(token);\n}\nvar root$2 = globalThis;\nif (root$2.__PlasmicTraitRegistry == null) {\n    root$2.__PlasmicTraitRegistry = [];\n}\nfunction registerTrait(trait, meta) {\n    root$2.__PlasmicTraitRegistry.push({\n        trait: trait,\n        meta: meta\n    });\n}\nvar _a$1, _b;\nfunction repeatedElement(index, elt) {\n    return repeatedElementFn(index, elt);\n}\nvar repeatedElementFn = function(index, elt) {\n    if (Array.isArray(elt)) {\n        return elt.map(function(v) {\n            return repeatedElementFn(index, v);\n        });\n    }\n    if (elt && /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.isValidElement)(elt) && typeof elt !== \"string\") {\n        return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.cloneElement)(elt);\n    }\n    return elt;\n};\nvar root$1 = globalThis;\nvar setRepeatedElementFn = (_b = (_a$1 = root$1 === null || root$1 === void 0 ? void 0 : root$1.__Sub) === null || _a$1 === void 0 ? void 0 : _a$1.setRepeatedElementFn) !== null && _b !== void 0 ? _b : function(fn) {\n    repeatedElementFn = fn;\n};\nvar PlasmicTranslatorContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1___default().createContext(undefined);\nfunction usePlasmicTranslator() {\n    var _t = react__WEBPACK_IMPORTED_MODULE_1___default().useContext(PlasmicTranslatorContext);\n    var translator = _t ? typeof _t === \"function\" ? _t : _t.translator : undefined;\n    return translator;\n}\nvar hostModule = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    DataContext: DataContext,\n    DataCtxReader: DataCtxReader,\n    DataProvider: DataProvider,\n    GlobalActionsContext: GlobalActionsContext,\n    GlobalActionsProvider: GlobalActionsProvider,\n    PageParamsProvider: PageParamsProvider,\n    PlasmicCanvasContext: PlasmicCanvasContext,\n    PlasmicCanvasHost: PlasmicCanvasHost,\n    PlasmicLinkProvider: PlasmicLinkProvider,\n    PlasmicTranslatorContext: PlasmicTranslatorContext,\n    applySelector: applySelector,\n    mkMetaName: mkMetaName,\n    mkMetaValue: mkMetaValue,\n    registerComponent: registerComponent,\n    registerFunction: registerFunction,\n    registerGlobalContext: registerGlobalContext,\n    registerToken: registerToken,\n    registerTrait: registerTrait,\n    repeatedElement: repeatedElement,\n    stateHelpersKeys: stateHelpersKeys,\n    unstable_registerFetcher: registerFetcher,\n    useDataEnv: useDataEnv,\n    useGlobalActions: useGlobalActions,\n    usePlasmicCanvasComponentInfo: usePlasmicCanvasComponentInfo,\n    usePlasmicCanvasContext: usePlasmicCanvasContext,\n    usePlasmicLink: usePlasmicLink,\n    usePlasmicLinkMaybe: usePlasmicLinkMaybe,\n    usePlasmicTranslator: usePlasmicTranslator,\n    useSelector: useSelector,\n    useSelectors: useSelectors\n});\nvar hostVersion = \"1.0.208\";\nvar _a;\nvar root = globalThis;\nif (root.__Sub == null) {\n    // Creating a side effect here by logging, so that vite won't\n    // ignore this block for whatever reason. Hiding this for now\n    // as users are complaining; will have to check if this has\n    // been fixed with vite.\n    // console.log(\"Plasmic: Setting up app host dependencies\");\n    root.__Sub = __assign({\n        React: react__WEBPACK_IMPORTED_MODULE_1__,\n        ReactDOM: react_dom__WEBPACK_IMPORTED_MODULE_2__,\n        PlasmicQuery: _plasmicapp_query__WEBPACK_IMPORTED_MODULE_0__,\n        hostModule: hostModule,\n        hostVersion: hostVersion,\n        hostUtils: {\n            setPlasmicRootNode: setPlasmicRootNode,\n            registerRenderErrorListener: registerRenderErrorListener,\n            setRepeatedElementFn: setRepeatedElementFn\n        },\n        // For backwards compatibility:\n        setPlasmicRootNode: setPlasmicRootNode,\n        registerRenderErrorListener: registerRenderErrorListener,\n        setRepeatedElementFn: setRepeatedElementFn\n    }, hostModule);\n} else {\n    console.warn(\"Encountered likely duplicate host version: \".concat(root.__Sub.hostVersion, \" vs \").concat(hostVersion));\n    root.__Sub.duplicateHostVersions = (_a = root.__Sub.duplicateHostVersions) !== null && _a !== void 0 ? _a : [];\n    root.__Sub.duplicateHostVersions.push(hostVersion);\n}\n //# sourceMappingURL=host.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/host/dist/host.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/isomorphic-unfetch/dist/server.js":
/*!********************************************************************!*\
  !*** ./node_modules/@plasmicapp/isomorphic-unfetch/dist/server.js ***!
  \********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\n\n// node_modules/node-fetch-cjs/dist/index.js\nvar require_dist = __commonJS({\n  \"node_modules/node-fetch-cjs/dist/index.js\"(exports2) {\n    var __create = Object.create;\n    var __defProp = Object.defineProperty;\n    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n    var __getOwnPropNames2 = Object.getOwnPropertyNames;\n    var __getProtoOf = Object.getPrototypeOf;\n    var __hasOwnProp = Object.prototype.hasOwnProperty;\n    var __markAsModule = (target) => __defProp(target, \"__esModule\", { value: true });\n    var __esm = (fn, res) => function __init() {\n      return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;\n    };\n    var __commonJS2 = (cb, mod) => function __require() {\n      return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n    };\n    var __export = (target, all) => {\n      __markAsModule(target);\n      for (var name in all)\n        __defProp(target, name, { get: all[name], enumerable: true });\n    };\n    var __reExport = (target, module22, desc) => {\n      if (module22 && typeof module22 === \"object\" || typeof module22 === \"function\") {\n        for (let key of __getOwnPropNames2(module22))\n          if (!__hasOwnProp.call(target, key) && key !== \"default\")\n            __defProp(target, key, { get: () => module22[key], enumerable: !(desc = __getOwnPropDesc(module22, key)) || desc.enumerable });\n      }\n      return target;\n    };\n    var __toModule = (module22) => {\n      return __reExport(__markAsModule(__defProp(module22 != null ? __create(__getProtoOf(module22)) : {}, \"default\", module22 && module22.__esModule && \"default\" in module22 ? { get: () => module22.default, enumerable: true } : { value: module22, enumerable: true })), module22);\n    };\n    var require_ponyfill_es2018 = __commonJS2({\n      \"node_modules/web-streams-polyfill/dist/ponyfill.es2018.js\"(exports3, module22) {\n        (function(global2, factory) {\n          typeof exports3 === \"object\" && typeof module22 !== \"undefined\" ? factory(exports3) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (0);\n        })(exports3, function(exports22) {\n          \"use strict\";\n          const SymbolPolyfill = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? Symbol : (description) => `Symbol(${description})`;\n          function noop2() {\n            return void 0;\n          }\n          function getGlobals() {\n            if (typeof self !== \"undefined\") {\n              return self;\n            } else if (typeof window !== \"undefined\") {\n              return window;\n            } else if (typeof global !== \"undefined\") {\n              return global;\n            }\n            return void 0;\n          }\n          const globals = getGlobals();\n          function typeIsObject(x2) {\n            return typeof x2 === \"object\" && x2 !== null || typeof x2 === \"function\";\n          }\n          const rethrowAssertionErrorRejection = noop2;\n          const originalPromise = Promise;\n          const originalPromiseThen = Promise.prototype.then;\n          const originalPromiseResolve = Promise.resolve.bind(originalPromise);\n          const originalPromiseReject = Promise.reject.bind(originalPromise);\n          function newPromise(executor) {\n            return new originalPromise(executor);\n          }\n          function promiseResolvedWith(value) {\n            return originalPromiseResolve(value);\n          }\n          function promiseRejectedWith(reason) {\n            return originalPromiseReject(reason);\n          }\n          function PerformPromiseThen(promise, onFulfilled, onRejected) {\n            return originalPromiseThen.call(promise, onFulfilled, onRejected);\n          }\n          function uponPromise(promise, onFulfilled, onRejected) {\n            PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), void 0, rethrowAssertionErrorRejection);\n          }\n          function uponFulfillment(promise, onFulfilled) {\n            uponPromise(promise, onFulfilled);\n          }\n          function uponRejection(promise, onRejected) {\n            uponPromise(promise, void 0, onRejected);\n          }\n          function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n            return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n          }\n          function setPromiseIsHandledToTrue(promise) {\n            PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);\n          }\n          const queueMicrotask = (() => {\n            const globalQueueMicrotask = globals && globals.queueMicrotask;\n            if (typeof globalQueueMicrotask === \"function\") {\n              return globalQueueMicrotask;\n            }\n            const resolvedPromise = promiseResolvedWith(void 0);\n            return (fn) => PerformPromiseThen(resolvedPromise, fn);\n          })();\n          function reflectCall(F2, V, args) {\n            if (typeof F2 !== \"function\") {\n              throw new TypeError(\"Argument is not a function\");\n            }\n            return Function.prototype.apply.call(F2, V, args);\n          }\n          function promiseCall(F2, V, args) {\n            try {\n              return promiseResolvedWith(reflectCall(F2, V, args));\n            } catch (value) {\n              return promiseRejectedWith(value);\n            }\n          }\n          const QUEUE_MAX_ARRAY_SIZE = 16384;\n          class SimpleQueue {\n            constructor() {\n              this._cursor = 0;\n              this._size = 0;\n              this._front = {\n                _elements: [],\n                _next: void 0\n              };\n              this._back = this._front;\n              this._cursor = 0;\n              this._size = 0;\n            }\n            get length() {\n              return this._size;\n            }\n            push(element) {\n              const oldBack = this._back;\n              let newBack = oldBack;\n              if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n                newBack = {\n                  _elements: [],\n                  _next: void 0\n                };\n              }\n              oldBack._elements.push(element);\n              if (newBack !== oldBack) {\n                this._back = newBack;\n                oldBack._next = newBack;\n              }\n              ++this._size;\n            }\n            shift() {\n              const oldFront = this._front;\n              let newFront = oldFront;\n              const oldCursor = this._cursor;\n              let newCursor = oldCursor + 1;\n              const elements = oldFront._elements;\n              const element = elements[oldCursor];\n              if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n                newFront = oldFront._next;\n                newCursor = 0;\n              }\n              --this._size;\n              this._cursor = newCursor;\n              if (oldFront !== newFront) {\n                this._front = newFront;\n              }\n              elements[oldCursor] = void 0;\n              return element;\n            }\n            forEach(callback) {\n              let i2 = this._cursor;\n              let node = this._front;\n              let elements = node._elements;\n              while (i2 !== elements.length || node._next !== void 0) {\n                if (i2 === elements.length) {\n                  node = node._next;\n                  elements = node._elements;\n                  i2 = 0;\n                  if (elements.length === 0) {\n                    break;\n                  }\n                }\n                callback(elements[i2]);\n                ++i2;\n              }\n            }\n            peek() {\n              const front = this._front;\n              const cursor = this._cursor;\n              return front._elements[cursor];\n            }\n          }\n          function ReadableStreamReaderGenericInitialize(reader, stream) {\n            reader._ownerReadableStream = stream;\n            stream._reader = reader;\n            if (stream._state === \"readable\") {\n              defaultReaderClosedPromiseInitialize(reader);\n            } else if (stream._state === \"closed\") {\n              defaultReaderClosedPromiseInitializeAsResolved(reader);\n            } else {\n              defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n            }\n          }\n          function ReadableStreamReaderGenericCancel(reader, reason) {\n            const stream = reader._ownerReadableStream;\n            return ReadableStreamCancel(stream, reason);\n          }\n          function ReadableStreamReaderGenericRelease(reader) {\n            if (reader._ownerReadableStream._state === \"readable\") {\n              defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n            } else {\n              defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));\n            }\n            reader._ownerReadableStream._reader = void 0;\n            reader._ownerReadableStream = void 0;\n          }\n          function readerLockException(name) {\n            return new TypeError(\"Cannot \" + name + \" a stream using a released reader\");\n          }\n          function defaultReaderClosedPromiseInitialize(reader) {\n            reader._closedPromise = newPromise((resolve, reject) => {\n              reader._closedPromise_resolve = resolve;\n              reader._closedPromise_reject = reject;\n            });\n          }\n          function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n            defaultReaderClosedPromiseInitialize(reader);\n            defaultReaderClosedPromiseReject(reader, reason);\n          }\n          function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n            defaultReaderClosedPromiseInitialize(reader);\n            defaultReaderClosedPromiseResolve(reader);\n          }\n          function defaultReaderClosedPromiseReject(reader, reason) {\n            if (reader._closedPromise_reject === void 0) {\n              return;\n            }\n            setPromiseIsHandledToTrue(reader._closedPromise);\n            reader._closedPromise_reject(reason);\n            reader._closedPromise_resolve = void 0;\n            reader._closedPromise_reject = void 0;\n          }\n          function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n            defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n          }\n          function defaultReaderClosedPromiseResolve(reader) {\n            if (reader._closedPromise_resolve === void 0) {\n              return;\n            }\n            reader._closedPromise_resolve(void 0);\n            reader._closedPromise_resolve = void 0;\n            reader._closedPromise_reject = void 0;\n          }\n          const AbortSteps = SymbolPolyfill(\"[[AbortSteps]]\");\n          const ErrorSteps = SymbolPolyfill(\"[[ErrorSteps]]\");\n          const CancelSteps = SymbolPolyfill(\"[[CancelSteps]]\");\n          const PullSteps = SymbolPolyfill(\"[[PullSteps]]\");\n          const NumberIsFinite = Number.isFinite || function(x2) {\n            return typeof x2 === \"number\" && isFinite(x2);\n          };\n          const MathTrunc = Math.trunc || function(v) {\n            return v < 0 ? Math.ceil(v) : Math.floor(v);\n          };\n          function isDictionary(x2) {\n            return typeof x2 === \"object\" || typeof x2 === \"function\";\n          }\n          function assertDictionary(obj, context) {\n            if (obj !== void 0 && !isDictionary(obj)) {\n              throw new TypeError(`${context} is not an object.`);\n            }\n          }\n          function assertFunction(x2, context) {\n            if (typeof x2 !== \"function\") {\n              throw new TypeError(`${context} is not a function.`);\n            }\n          }\n          function isObject(x2) {\n            return typeof x2 === \"object\" && x2 !== null || typeof x2 === \"function\";\n          }\n          function assertObject(x2, context) {\n            if (!isObject(x2)) {\n              throw new TypeError(`${context} is not an object.`);\n            }\n          }\n          function assertRequiredArgument(x2, position, context) {\n            if (x2 === void 0) {\n              throw new TypeError(`Parameter ${position} is required in '${context}'.`);\n            }\n          }\n          function assertRequiredField(x2, field, context) {\n            if (x2 === void 0) {\n              throw new TypeError(`${field} is required in '${context}'.`);\n            }\n          }\n          function convertUnrestrictedDouble(value) {\n            return Number(value);\n          }\n          function censorNegativeZero(x2) {\n            return x2 === 0 ? 0 : x2;\n          }\n          function integerPart(x2) {\n            return censorNegativeZero(MathTrunc(x2));\n          }\n          function convertUnsignedLongLongWithEnforceRange(value, context) {\n            const lowerBound = 0;\n            const upperBound = Number.MAX_SAFE_INTEGER;\n            let x2 = Number(value);\n            x2 = censorNegativeZero(x2);\n            if (!NumberIsFinite(x2)) {\n              throw new TypeError(`${context} is not a finite number`);\n            }\n            x2 = integerPart(x2);\n            if (x2 < lowerBound || x2 > upperBound) {\n              throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);\n            }\n            if (!NumberIsFinite(x2) || x2 === 0) {\n              return 0;\n            }\n            return x2;\n          }\n          function assertReadableStream(x2, context) {\n            if (!IsReadableStream(x2)) {\n              throw new TypeError(`${context} is not a ReadableStream.`);\n            }\n          }\n          function AcquireReadableStreamDefaultReader(stream) {\n            return new ReadableStreamDefaultReader(stream);\n          }\n          function ReadableStreamAddReadRequest(stream, readRequest) {\n            stream._reader._readRequests.push(readRequest);\n          }\n          function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n            const reader = stream._reader;\n            const readRequest = reader._readRequests.shift();\n            if (done) {\n              readRequest._closeSteps();\n            } else {\n              readRequest._chunkSteps(chunk);\n            }\n          }\n          function ReadableStreamGetNumReadRequests(stream) {\n            return stream._reader._readRequests.length;\n          }\n          function ReadableStreamHasDefaultReader(stream) {\n            const reader = stream._reader;\n            if (reader === void 0) {\n              return false;\n            }\n            if (!IsReadableStreamDefaultReader(reader)) {\n              return false;\n            }\n            return true;\n          }\n          class ReadableStreamDefaultReader {\n            constructor(stream) {\n              assertRequiredArgument(stream, 1, \"ReadableStreamDefaultReader\");\n              assertReadableStream(stream, \"First parameter\");\n              if (IsReadableStreamLocked(stream)) {\n                throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n              }\n              ReadableStreamReaderGenericInitialize(this, stream);\n              this._readRequests = new SimpleQueue();\n            }\n            get closed() {\n              if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException(\"closed\"));\n              }\n              return this._closedPromise;\n            }\n            cancel(reason = void 0) {\n              if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException(\"cancel\"));\n              }\n              if (this._ownerReadableStream === void 0) {\n                return promiseRejectedWith(readerLockException(\"cancel\"));\n              }\n              return ReadableStreamReaderGenericCancel(this, reason);\n            }\n            read() {\n              if (!IsReadableStreamDefaultReader(this)) {\n                return promiseRejectedWith(defaultReaderBrandCheckException(\"read\"));\n              }\n              if (this._ownerReadableStream === void 0) {\n                return promiseRejectedWith(readerLockException(\"read from\"));\n              }\n              let resolvePromise;\n              let rejectPromise;\n              const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n              });\n              const readRequest = {\n                _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),\n                _closeSteps: () => resolvePromise({ value: void 0, done: true }),\n                _errorSteps: (e2) => rejectPromise(e2)\n              };\n              ReadableStreamDefaultReaderRead(this, readRequest);\n              return promise;\n            }\n            releaseLock() {\n              if (!IsReadableStreamDefaultReader(this)) {\n                throw defaultReaderBrandCheckException(\"releaseLock\");\n              }\n              if (this._ownerReadableStream === void 0) {\n                return;\n              }\n              if (this._readRequests.length > 0) {\n                throw new TypeError(\"Tried to release a reader lock when that reader has pending read() calls un-settled\");\n              }\n              ReadableStreamReaderGenericRelease(this);\n            }\n          }\n          Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n            cancel: { enumerable: true },\n            read: { enumerable: true },\n            releaseLock: { enumerable: true },\n            closed: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n              value: \"ReadableStreamDefaultReader\",\n              configurable: true\n            });\n          }\n          function IsReadableStreamDefaultReader(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_readRequests\")) {\n              return false;\n            }\n            return x2 instanceof ReadableStreamDefaultReader;\n          }\n          function ReadableStreamDefaultReaderRead(reader, readRequest) {\n            const stream = reader._ownerReadableStream;\n            stream._disturbed = true;\n            if (stream._state === \"closed\") {\n              readRequest._closeSteps();\n            } else if (stream._state === \"errored\") {\n              readRequest._errorSteps(stream._storedError);\n            } else {\n              stream._readableStreamController[PullSteps](readRequest);\n            }\n          }\n          function defaultReaderBrandCheckException(name) {\n            return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);\n          }\n          const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {\n          }).prototype);\n          class ReadableStreamAsyncIteratorImpl {\n            constructor(reader, preventCancel) {\n              this._ongoingPromise = void 0;\n              this._isFinished = false;\n              this._reader = reader;\n              this._preventCancel = preventCancel;\n            }\n            next() {\n              const nextSteps = () => this._nextSteps();\n              this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n              return this._ongoingPromise;\n            }\n            return(value) {\n              const returnSteps = () => this._returnSteps(value);\n              return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n            }\n            _nextSteps() {\n              if (this._isFinished) {\n                return Promise.resolve({ value: void 0, done: true });\n              }\n              const reader = this._reader;\n              if (reader._ownerReadableStream === void 0) {\n                return promiseRejectedWith(readerLockException(\"iterate\"));\n              }\n              let resolvePromise;\n              let rejectPromise;\n              const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n              });\n              const readRequest = {\n                _chunkSteps: (chunk) => {\n                  this._ongoingPromise = void 0;\n                  queueMicrotask(() => resolvePromise({ value: chunk, done: false }));\n                },\n                _closeSteps: () => {\n                  this._ongoingPromise = void 0;\n                  this._isFinished = true;\n                  ReadableStreamReaderGenericRelease(reader);\n                  resolvePromise({ value: void 0, done: true });\n                },\n                _errorSteps: (reason) => {\n                  this._ongoingPromise = void 0;\n                  this._isFinished = true;\n                  ReadableStreamReaderGenericRelease(reader);\n                  rejectPromise(reason);\n                }\n              };\n              ReadableStreamDefaultReaderRead(reader, readRequest);\n              return promise;\n            }\n            _returnSteps(value) {\n              if (this._isFinished) {\n                return Promise.resolve({ value, done: true });\n              }\n              this._isFinished = true;\n              const reader = this._reader;\n              if (reader._ownerReadableStream === void 0) {\n                return promiseRejectedWith(readerLockException(\"finish iterating\"));\n              }\n              if (!this._preventCancel) {\n                const result = ReadableStreamReaderGenericCancel(reader, value);\n                ReadableStreamReaderGenericRelease(reader);\n                return transformPromiseWith(result, () => ({ value, done: true }));\n              }\n              ReadableStreamReaderGenericRelease(reader);\n              return promiseResolvedWith({ value, done: true });\n            }\n          }\n          const ReadableStreamAsyncIteratorPrototype = {\n            next() {\n              if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException(\"next\"));\n              }\n              return this._asyncIteratorImpl.next();\n            },\n            return(value) {\n              if (!IsReadableStreamAsyncIterator(this)) {\n                return promiseRejectedWith(streamAsyncIteratorBrandCheckException(\"return\"));\n              }\n              return this._asyncIteratorImpl.return(value);\n            }\n          };\n          if (AsyncIteratorPrototype !== void 0) {\n            Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n          }\n          function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n            const reader = AcquireReadableStreamDefaultReader(stream);\n            const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n            const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n            iterator._asyncIteratorImpl = impl;\n            return iterator;\n          }\n          function IsReadableStreamAsyncIterator(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_asyncIteratorImpl\")) {\n              return false;\n            }\n            try {\n              return x2._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;\n            } catch (_a) {\n              return false;\n            }\n          }\n          function streamAsyncIteratorBrandCheckException(name) {\n            return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);\n          }\n          const NumberIsNaN = Number.isNaN || function(x2) {\n            return x2 !== x2;\n          };\n          function CreateArrayFromList(elements) {\n            return elements.slice();\n          }\n          function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n            new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n          }\n          function TransferArrayBuffer(O) {\n            return O;\n          }\n          function IsDetachedBuffer(O) {\n            return false;\n          }\n          function ArrayBufferSlice(buffer, begin, end) {\n            if (buffer.slice) {\n              return buffer.slice(begin, end);\n            }\n            const length = end - begin;\n            const slice = new ArrayBuffer(length);\n            CopyDataBlockBytes(slice, 0, buffer, begin, length);\n            return slice;\n          }\n          function IsNonNegativeNumber(v) {\n            if (typeof v !== \"number\") {\n              return false;\n            }\n            if (NumberIsNaN(v)) {\n              return false;\n            }\n            if (v < 0) {\n              return false;\n            }\n            return true;\n          }\n          function CloneAsUint8Array(O) {\n            const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n            return new Uint8Array(buffer);\n          }\n          function DequeueValue(container) {\n            const pair = container._queue.shift();\n            container._queueTotalSize -= pair.size;\n            if (container._queueTotalSize < 0) {\n              container._queueTotalSize = 0;\n            }\n            return pair.value;\n          }\n          function EnqueueValueWithSize(container, value, size) {\n            if (!IsNonNegativeNumber(size) || size === Infinity) {\n              throw new RangeError(\"Size must be a finite, non-NaN, non-negative number.\");\n            }\n            container._queue.push({ value, size });\n            container._queueTotalSize += size;\n          }\n          function PeekQueueValue(container) {\n            const pair = container._queue.peek();\n            return pair.value;\n          }\n          function ResetQueue(container) {\n            container._queue = new SimpleQueue();\n            container._queueTotalSize = 0;\n          }\n          class ReadableStreamBYOBRequest {\n            constructor() {\n              throw new TypeError(\"Illegal constructor\");\n            }\n            get view() {\n              if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException(\"view\");\n              }\n              return this._view;\n            }\n            respond(bytesWritten) {\n              if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException(\"respond\");\n              }\n              assertRequiredArgument(bytesWritten, 1, \"respond\");\n              bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, \"First parameter\");\n              if (this._associatedReadableByteStreamController === void 0) {\n                throw new TypeError(\"This BYOB request has been invalidated\");\n              }\n              if (IsDetachedBuffer(this._view.buffer))\n                ;\n              ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n            }\n            respondWithNewView(view) {\n              if (!IsReadableStreamBYOBRequest(this)) {\n                throw byobRequestBrandCheckException(\"respondWithNewView\");\n              }\n              assertRequiredArgument(view, 1, \"respondWithNewView\");\n              if (!ArrayBuffer.isView(view)) {\n                throw new TypeError(\"You can only respond with array buffer views\");\n              }\n              if (this._associatedReadableByteStreamController === void 0) {\n                throw new TypeError(\"This BYOB request has been invalidated\");\n              }\n              if (IsDetachedBuffer(view.buffer))\n                ;\n              ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n            }\n          }\n          Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n            respond: { enumerable: true },\n            respondWithNewView: { enumerable: true },\n            view: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n              value: \"ReadableStreamBYOBRequest\",\n              configurable: true\n            });\n          }\n          class ReadableByteStreamController {\n            constructor() {\n              throw new TypeError(\"Illegal constructor\");\n            }\n            get byobRequest() {\n              if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException(\"byobRequest\");\n              }\n              return ReadableByteStreamControllerGetBYOBRequest(this);\n            }\n            get desiredSize() {\n              if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException(\"desiredSize\");\n              }\n              return ReadableByteStreamControllerGetDesiredSize(this);\n            }\n            close() {\n              if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException(\"close\");\n              }\n              if (this._closeRequested) {\n                throw new TypeError(\"The stream has already been closed; do not close it again!\");\n              }\n              const state = this._controlledReadableByteStream._state;\n              if (state !== \"readable\") {\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);\n              }\n              ReadableByteStreamControllerClose(this);\n            }\n            enqueue(chunk) {\n              if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException(\"enqueue\");\n              }\n              assertRequiredArgument(chunk, 1, \"enqueue\");\n              if (!ArrayBuffer.isView(chunk)) {\n                throw new TypeError(\"chunk must be an array buffer view\");\n              }\n              if (chunk.byteLength === 0) {\n                throw new TypeError(\"chunk must have non-zero byteLength\");\n              }\n              if (chunk.buffer.byteLength === 0) {\n                throw new TypeError(`chunk's buffer must have non-zero byteLength`);\n              }\n              if (this._closeRequested) {\n                throw new TypeError(\"stream is closed or draining\");\n              }\n              const state = this._controlledReadableByteStream._state;\n              if (state !== \"readable\") {\n                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);\n              }\n              ReadableByteStreamControllerEnqueue(this, chunk);\n            }\n            error(e2 = void 0) {\n              if (!IsReadableByteStreamController(this)) {\n                throw byteStreamControllerBrandCheckException(\"error\");\n              }\n              ReadableByteStreamControllerError(this, e2);\n            }\n            [CancelSteps](reason) {\n              ReadableByteStreamControllerClearPendingPullIntos(this);\n              ResetQueue(this);\n              const result = this._cancelAlgorithm(reason);\n              ReadableByteStreamControllerClearAlgorithms(this);\n              return result;\n            }\n            [PullSteps](readRequest) {\n              const stream = this._controlledReadableByteStream;\n              if (this._queueTotalSize > 0) {\n                const entry = this._queue.shift();\n                this._queueTotalSize -= entry.byteLength;\n                ReadableByteStreamControllerHandleQueueDrain(this);\n                const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n                readRequest._chunkSteps(view);\n                return;\n              }\n              const autoAllocateChunkSize = this._autoAllocateChunkSize;\n              if (autoAllocateChunkSize !== void 0) {\n                let buffer;\n                try {\n                  buffer = new ArrayBuffer(autoAllocateChunkSize);\n                } catch (bufferE) {\n                  readRequest._errorSteps(bufferE);\n                  return;\n                }\n                const pullIntoDescriptor = {\n                  buffer,\n                  bufferByteLength: autoAllocateChunkSize,\n                  byteOffset: 0,\n                  byteLength: autoAllocateChunkSize,\n                  bytesFilled: 0,\n                  elementSize: 1,\n                  viewConstructor: Uint8Array,\n                  readerType: \"default\"\n                };\n                this._pendingPullIntos.push(pullIntoDescriptor);\n              }\n              ReadableStreamAddReadRequest(stream, readRequest);\n              ReadableByteStreamControllerCallPullIfNeeded(this);\n            }\n          }\n          Object.defineProperties(ReadableByteStreamController.prototype, {\n            close: { enumerable: true },\n            enqueue: { enumerable: true },\n            error: { enumerable: true },\n            byobRequest: { enumerable: true },\n            desiredSize: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n              value: \"ReadableByteStreamController\",\n              configurable: true\n            });\n          }\n          function IsReadableByteStreamController(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_controlledReadableByteStream\")) {\n              return false;\n            }\n            return x2 instanceof ReadableByteStreamController;\n          }\n          function IsReadableStreamBYOBRequest(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_associatedReadableByteStreamController\")) {\n              return false;\n            }\n            return x2 instanceof ReadableStreamBYOBRequest;\n          }\n          function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n            const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n            if (!shouldPull) {\n              return;\n            }\n            if (controller._pulling) {\n              controller._pullAgain = true;\n              return;\n            }\n            controller._pulling = true;\n            const pullPromise = controller._pullAlgorithm();\n            uponPromise(pullPromise, () => {\n              controller._pulling = false;\n              if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableByteStreamControllerCallPullIfNeeded(controller);\n              }\n            }, (e2) => {\n              ReadableByteStreamControllerError(controller, e2);\n            });\n          }\n          function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n            ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n            controller._pendingPullIntos = new SimpleQueue();\n          }\n          function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n            let done = false;\n            if (stream._state === \"closed\") {\n              done = true;\n            }\n            const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n            if (pullIntoDescriptor.readerType === \"default\") {\n              ReadableStreamFulfillReadRequest(stream, filledView, done);\n            } else {\n              ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n            }\n          }\n          function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n            const bytesFilled = pullIntoDescriptor.bytesFilled;\n            const elementSize = pullIntoDescriptor.elementSize;\n            return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n          }\n          function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n            controller._queue.push({ buffer, byteOffset, byteLength });\n            controller._queueTotalSize += byteLength;\n          }\n          function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n            const elementSize = pullIntoDescriptor.elementSize;\n            const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n            const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n            const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n            const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n            let totalBytesToCopyRemaining = maxBytesToCopy;\n            let ready = false;\n            if (maxAlignedBytes > currentAlignedBytes) {\n              totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n              ready = true;\n            }\n            const queue = controller._queue;\n            while (totalBytesToCopyRemaining > 0) {\n              const headOfQueue = queue.peek();\n              const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n              const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n              CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n              if (headOfQueue.byteLength === bytesToCopy) {\n                queue.shift();\n              } else {\n                headOfQueue.byteOffset += bytesToCopy;\n                headOfQueue.byteLength -= bytesToCopy;\n              }\n              controller._queueTotalSize -= bytesToCopy;\n              ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n              totalBytesToCopyRemaining -= bytesToCopy;\n            }\n            return ready;\n          }\n          function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n            pullIntoDescriptor.bytesFilled += size;\n          }\n          function ReadableByteStreamControllerHandleQueueDrain(controller) {\n            if (controller._queueTotalSize === 0 && controller._closeRequested) {\n              ReadableByteStreamControllerClearAlgorithms(controller);\n              ReadableStreamClose(controller._controlledReadableByteStream);\n            } else {\n              ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }\n          }\n          function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n            if (controller._byobRequest === null) {\n              return;\n            }\n            controller._byobRequest._associatedReadableByteStreamController = void 0;\n            controller._byobRequest._view = null;\n            controller._byobRequest = null;\n          }\n          function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n            while (controller._pendingPullIntos.length > 0) {\n              if (controller._queueTotalSize === 0) {\n                return;\n              }\n              const pullIntoDescriptor = controller._pendingPullIntos.peek();\n              if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n              }\n            }\n          }\n          function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n            const stream = controller._controlledReadableByteStream;\n            let elementSize = 1;\n            if (view.constructor !== DataView) {\n              elementSize = view.constructor.BYTES_PER_ELEMENT;\n            }\n            const ctor = view.constructor;\n            const buffer = TransferArrayBuffer(view.buffer);\n            const pullIntoDescriptor = {\n              buffer,\n              bufferByteLength: buffer.byteLength,\n              byteOffset: view.byteOffset,\n              byteLength: view.byteLength,\n              bytesFilled: 0,\n              elementSize,\n              viewConstructor: ctor,\n              readerType: \"byob\"\n            };\n            if (controller._pendingPullIntos.length > 0) {\n              controller._pendingPullIntos.push(pullIntoDescriptor);\n              ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n              return;\n            }\n            if (stream._state === \"closed\") {\n              const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n              readIntoRequest._closeSteps(emptyView);\n              return;\n            }\n            if (controller._queueTotalSize > 0) {\n              if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n                ReadableByteStreamControllerHandleQueueDrain(controller);\n                readIntoRequest._chunkSteps(filledView);\n                return;\n              }\n              if (controller._closeRequested) {\n                const e2 = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                ReadableByteStreamControllerError(controller, e2);\n                readIntoRequest._errorSteps(e2);\n                return;\n              }\n            }\n            controller._pendingPullIntos.push(pullIntoDescriptor);\n            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n          }\n          function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n            const stream = controller._controlledReadableByteStream;\n            if (ReadableStreamHasBYOBReader(stream)) {\n              while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n                const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n              }\n            }\n          }\n          function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n            if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n              return;\n            }\n            ReadableByteStreamControllerShiftPendingPullInto(controller);\n            const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n            if (remainderSize > 0) {\n              const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n              const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n              ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n            }\n            pullIntoDescriptor.bytesFilled -= remainderSize;\n            ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n          }\n          function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n            const firstDescriptor = controller._pendingPullIntos.peek();\n            ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n            const state = controller._controlledReadableByteStream._state;\n            if (state === \"closed\") {\n              ReadableByteStreamControllerRespondInClosedState(controller);\n            } else {\n              ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n            }\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n          }\n          function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n            const descriptor = controller._pendingPullIntos.shift();\n            return descriptor;\n          }\n          function ReadableByteStreamControllerShouldCallPull(controller) {\n            const stream = controller._controlledReadableByteStream;\n            if (stream._state !== \"readable\") {\n              return false;\n            }\n            if (controller._closeRequested) {\n              return false;\n            }\n            if (!controller._started) {\n              return false;\n            }\n            if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n              return true;\n            }\n            if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n              return true;\n            }\n            const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n            if (desiredSize > 0) {\n              return true;\n            }\n            return false;\n          }\n          function ReadableByteStreamControllerClearAlgorithms(controller) {\n            controller._pullAlgorithm = void 0;\n            controller._cancelAlgorithm = void 0;\n          }\n          function ReadableByteStreamControllerClose(controller) {\n            const stream = controller._controlledReadableByteStream;\n            if (controller._closeRequested || stream._state !== \"readable\") {\n              return;\n            }\n            if (controller._queueTotalSize > 0) {\n              controller._closeRequested = true;\n              return;\n            }\n            if (controller._pendingPullIntos.length > 0) {\n              const firstPendingPullInto = controller._pendingPullIntos.peek();\n              if (firstPendingPullInto.bytesFilled > 0) {\n                const e2 = new TypeError(\"Insufficient bytes to fill elements in the given buffer\");\n                ReadableByteStreamControllerError(controller, e2);\n                throw e2;\n              }\n            }\n            ReadableByteStreamControllerClearAlgorithms(controller);\n            ReadableStreamClose(stream);\n          }\n          function ReadableByteStreamControllerEnqueue(controller, chunk) {\n            const stream = controller._controlledReadableByteStream;\n            if (controller._closeRequested || stream._state !== \"readable\") {\n              return;\n            }\n            const buffer = chunk.buffer;\n            const byteOffset = chunk.byteOffset;\n            const byteLength = chunk.byteLength;\n            const transferredBuffer = TransferArrayBuffer(buffer);\n            if (controller._pendingPullIntos.length > 0) {\n              const firstPendingPullInto = controller._pendingPullIntos.peek();\n              if (IsDetachedBuffer(firstPendingPullInto.buffer))\n                ;\n              firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n            }\n            ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n            if (ReadableStreamHasDefaultReader(stream)) {\n              if (ReadableStreamGetNumReadRequests(stream) === 0) {\n                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n              } else {\n                if (controller._pendingPullIntos.length > 0) {\n                  ReadableByteStreamControllerShiftPendingPullInto(controller);\n                }\n                const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n                ReadableStreamFulfillReadRequest(stream, transferredView, false);\n              }\n            } else if (ReadableStreamHasBYOBReader(stream)) {\n              ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n              ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n            } else {\n              ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n            }\n            ReadableByteStreamControllerCallPullIfNeeded(controller);\n          }\n          function ReadableByteStreamControllerError(controller, e2) {\n            const stream = controller._controlledReadableByteStream;\n            if (stream._state !== \"readable\") {\n              return;\n            }\n            ReadableByteStreamControllerClearPendingPullIntos(controller);\n            ResetQueue(controller);\n            ReadableByteStreamControllerClearAlgorithms(controller);\n            ReadableStreamError(stream, e2);\n          }\n          function ReadableByteStreamControllerGetBYOBRequest(controller) {\n            if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n              const firstDescriptor = controller._pendingPullIntos.peek();\n              const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n              const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n              SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n              controller._byobRequest = byobRequest;\n            }\n            return controller._byobRequest;\n          }\n          function ReadableByteStreamControllerGetDesiredSize(controller) {\n            const state = controller._controlledReadableByteStream._state;\n            if (state === \"errored\") {\n              return null;\n            }\n            if (state === \"closed\") {\n              return 0;\n            }\n            return controller._strategyHWM - controller._queueTotalSize;\n          }\n          function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n            const firstDescriptor = controller._pendingPullIntos.peek();\n            const state = controller._controlledReadableByteStream._state;\n            if (state === \"closed\") {\n              if (bytesWritten !== 0) {\n                throw new TypeError(\"bytesWritten must be 0 when calling respond() on a closed stream\");\n              }\n            } else {\n              if (bytesWritten === 0) {\n                throw new TypeError(\"bytesWritten must be greater than 0 when calling respond() on a readable stream\");\n              }\n              if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n                throw new RangeError(\"bytesWritten out of range\");\n              }\n            }\n            firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n            ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n          }\n          function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n            const firstDescriptor = controller._pendingPullIntos.peek();\n            const state = controller._controlledReadableByteStream._state;\n            if (state === \"closed\") {\n              if (view.byteLength !== 0) {\n                throw new TypeError(\"The view's length must be 0 when calling respondWithNewView() on a closed stream\");\n              }\n            } else {\n              if (view.byteLength === 0) {\n                throw new TypeError(\"The view's length must be greater than 0 when calling respondWithNewView() on a readable stream\");\n              }\n            }\n            if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n              throw new RangeError(\"The region specified by view does not match byobRequest\");\n            }\n            if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n              throw new RangeError(\"The buffer of view has different capacity than byobRequest\");\n            }\n            if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n              throw new RangeError(\"The region specified by view is larger than byobRequest\");\n            }\n            const viewByteLength = view.byteLength;\n            firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n            ReadableByteStreamControllerRespondInternal(controller, viewByteLength);\n          }\n          function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n            controller._controlledReadableByteStream = stream;\n            controller._pullAgain = false;\n            controller._pulling = false;\n            controller._byobRequest = null;\n            controller._queue = controller._queueTotalSize = void 0;\n            ResetQueue(controller);\n            controller._closeRequested = false;\n            controller._started = false;\n            controller._strategyHWM = highWaterMark;\n            controller._pullAlgorithm = pullAlgorithm;\n            controller._cancelAlgorithm = cancelAlgorithm;\n            controller._autoAllocateChunkSize = autoAllocateChunkSize;\n            controller._pendingPullIntos = new SimpleQueue();\n            stream._readableStreamController = controller;\n            const startResult = startAlgorithm();\n            uponPromise(promiseResolvedWith(startResult), () => {\n              controller._started = true;\n              ReadableByteStreamControllerCallPullIfNeeded(controller);\n            }, (r22) => {\n              ReadableByteStreamControllerError(controller, r22);\n            });\n          }\n          function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n            const controller = Object.create(ReadableByteStreamController.prototype);\n            let startAlgorithm = () => void 0;\n            let pullAlgorithm = () => promiseResolvedWith(void 0);\n            let cancelAlgorithm = () => promiseResolvedWith(void 0);\n            if (underlyingByteSource.start !== void 0) {\n              startAlgorithm = () => underlyingByteSource.start(controller);\n            }\n            if (underlyingByteSource.pull !== void 0) {\n              pullAlgorithm = () => underlyingByteSource.pull(controller);\n            }\n            if (underlyingByteSource.cancel !== void 0) {\n              cancelAlgorithm = (reason) => underlyingByteSource.cancel(reason);\n            }\n            const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n            if (autoAllocateChunkSize === 0) {\n              throw new TypeError(\"autoAllocateChunkSize must be greater than 0\");\n            }\n            SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n          }\n          function SetUpReadableStreamBYOBRequest(request, controller, view) {\n            request._associatedReadableByteStreamController = controller;\n            request._view = view;\n          }\n          function byobRequestBrandCheckException(name) {\n            return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);\n          }\n          function byteStreamControllerBrandCheckException(name) {\n            return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);\n          }\n          function AcquireReadableStreamBYOBReader(stream) {\n            return new ReadableStreamBYOBReader(stream);\n          }\n          function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n            stream._reader._readIntoRequests.push(readIntoRequest);\n          }\n          function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n            const reader = stream._reader;\n            const readIntoRequest = reader._readIntoRequests.shift();\n            if (done) {\n              readIntoRequest._closeSteps(chunk);\n            } else {\n              readIntoRequest._chunkSteps(chunk);\n            }\n          }\n          function ReadableStreamGetNumReadIntoRequests(stream) {\n            return stream._reader._readIntoRequests.length;\n          }\n          function ReadableStreamHasBYOBReader(stream) {\n            const reader = stream._reader;\n            if (reader === void 0) {\n              return false;\n            }\n            if (!IsReadableStreamBYOBReader(reader)) {\n              return false;\n            }\n            return true;\n          }\n          class ReadableStreamBYOBReader {\n            constructor(stream) {\n              assertRequiredArgument(stream, 1, \"ReadableStreamBYOBReader\");\n              assertReadableStream(stream, \"First parameter\");\n              if (IsReadableStreamLocked(stream)) {\n                throw new TypeError(\"This stream has already been locked for exclusive reading by another reader\");\n              }\n              if (!IsReadableByteStreamController(stream._readableStreamController)) {\n                throw new TypeError(\"Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source\");\n              }\n              ReadableStreamReaderGenericInitialize(this, stream);\n              this._readIntoRequests = new SimpleQueue();\n            }\n            get closed() {\n              if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException(\"closed\"));\n              }\n              return this._closedPromise;\n            }\n            cancel(reason = void 0) {\n              if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException(\"cancel\"));\n              }\n              if (this._ownerReadableStream === void 0) {\n                return promiseRejectedWith(readerLockException(\"cancel\"));\n              }\n              return ReadableStreamReaderGenericCancel(this, reason);\n            }\n            read(view) {\n              if (!IsReadableStreamBYOBReader(this)) {\n                return promiseRejectedWith(byobReaderBrandCheckException(\"read\"));\n              }\n              if (!ArrayBuffer.isView(view)) {\n                return promiseRejectedWith(new TypeError(\"view must be an array buffer view\"));\n              }\n              if (view.byteLength === 0) {\n                return promiseRejectedWith(new TypeError(\"view must have non-zero byteLength\"));\n              }\n              if (view.buffer.byteLength === 0) {\n                return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));\n              }\n              if (IsDetachedBuffer(view.buffer))\n                ;\n              if (this._ownerReadableStream === void 0) {\n                return promiseRejectedWith(readerLockException(\"read from\"));\n              }\n              let resolvePromise;\n              let rejectPromise;\n              const promise = newPromise((resolve, reject) => {\n                resolvePromise = resolve;\n                rejectPromise = reject;\n              });\n              const readIntoRequest = {\n                _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),\n                _closeSteps: (chunk) => resolvePromise({ value: chunk, done: true }),\n                _errorSteps: (e2) => rejectPromise(e2)\n              };\n              ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n              return promise;\n            }\n            releaseLock() {\n              if (!IsReadableStreamBYOBReader(this)) {\n                throw byobReaderBrandCheckException(\"releaseLock\");\n              }\n              if (this._ownerReadableStream === void 0) {\n                return;\n              }\n              if (this._readIntoRequests.length > 0) {\n                throw new TypeError(\"Tried to release a reader lock when that reader has pending read() calls un-settled\");\n              }\n              ReadableStreamReaderGenericRelease(this);\n            }\n          }\n          Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n            cancel: { enumerable: true },\n            read: { enumerable: true },\n            releaseLock: { enumerable: true },\n            closed: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n              value: \"ReadableStreamBYOBReader\",\n              configurable: true\n            });\n          }\n          function IsReadableStreamBYOBReader(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_readIntoRequests\")) {\n              return false;\n            }\n            return x2 instanceof ReadableStreamBYOBReader;\n          }\n          function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n            const stream = reader._ownerReadableStream;\n            stream._disturbed = true;\n            if (stream._state === \"errored\") {\n              readIntoRequest._errorSteps(stream._storedError);\n            } else {\n              ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n            }\n          }\n          function byobReaderBrandCheckException(name) {\n            return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);\n          }\n          function ExtractHighWaterMark(strategy, defaultHWM) {\n            const { highWaterMark } = strategy;\n            if (highWaterMark === void 0) {\n              return defaultHWM;\n            }\n            if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n              throw new RangeError(\"Invalid highWaterMark\");\n            }\n            return highWaterMark;\n          }\n          function ExtractSizeAlgorithm(strategy) {\n            const { size } = strategy;\n            if (!size) {\n              return () => 1;\n            }\n            return size;\n          }\n          function convertQueuingStrategy(init, context) {\n            assertDictionary(init, context);\n            const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n            const size = init === null || init === void 0 ? void 0 : init.size;\n            return {\n              highWaterMark: highWaterMark === void 0 ? void 0 : convertUnrestrictedDouble(highWaterMark),\n              size: size === void 0 ? void 0 : convertQueuingStrategySize(size, `${context} has member 'size' that`)\n            };\n          }\n          function convertQueuingStrategySize(fn, context) {\n            assertFunction(fn, context);\n            return (chunk) => convertUnrestrictedDouble(fn(chunk));\n          }\n          function convertUnderlyingSink(original, context) {\n            assertDictionary(original, context);\n            const abort = original === null || original === void 0 ? void 0 : original.abort;\n            const close = original === null || original === void 0 ? void 0 : original.close;\n            const start = original === null || original === void 0 ? void 0 : original.start;\n            const type = original === null || original === void 0 ? void 0 : original.type;\n            const write = original === null || original === void 0 ? void 0 : original.write;\n            return {\n              abort: abort === void 0 ? void 0 : convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),\n              close: close === void 0 ? void 0 : convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),\n              start: start === void 0 ? void 0 : convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),\n              write: write === void 0 ? void 0 : convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),\n              type\n            };\n          }\n          function convertUnderlyingSinkAbortCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return (reason) => promiseCall(fn, original, [reason]);\n          }\n          function convertUnderlyingSinkCloseCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return () => promiseCall(fn, original, []);\n          }\n          function convertUnderlyingSinkStartCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return (controller) => reflectCall(fn, original, [controller]);\n          }\n          function convertUnderlyingSinkWriteCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n          }\n          function assertWritableStream(x2, context) {\n            if (!IsWritableStream(x2)) {\n              throw new TypeError(`${context} is not a WritableStream.`);\n            }\n          }\n          function isAbortSignal2(value) {\n            if (typeof value !== \"object\" || value === null) {\n              return false;\n            }\n            try {\n              return typeof value.aborted === \"boolean\";\n            } catch (_a) {\n              return false;\n            }\n          }\n          const supportsAbortController = typeof AbortController === \"function\";\n          function createAbortController() {\n            if (supportsAbortController) {\n              return new AbortController();\n            }\n            return void 0;\n          }\n          class WritableStream {\n            constructor(rawUnderlyingSink = {}, rawStrategy = {}) {\n              if (rawUnderlyingSink === void 0) {\n                rawUnderlyingSink = null;\n              } else {\n                assertObject(rawUnderlyingSink, \"First parameter\");\n              }\n              const strategy = convertQueuingStrategy(rawStrategy, \"Second parameter\");\n              const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, \"First parameter\");\n              InitializeWritableStream(this);\n              const type = underlyingSink.type;\n              if (type !== void 0) {\n                throw new RangeError(\"Invalid type is specified\");\n              }\n              const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n              const highWaterMark = ExtractHighWaterMark(strategy, 1);\n              SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n            }\n            get locked() {\n              if (!IsWritableStream(this)) {\n                throw streamBrandCheckException$2(\"locked\");\n              }\n              return IsWritableStreamLocked(this);\n            }\n            abort(reason = void 0) {\n              if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2(\"abort\"));\n              }\n              if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError(\"Cannot abort a stream that already has a writer\"));\n              }\n              return WritableStreamAbort(this, reason);\n            }\n            close() {\n              if (!IsWritableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$2(\"close\"));\n              }\n              if (IsWritableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError(\"Cannot close a stream that already has a writer\"));\n              }\n              if (WritableStreamCloseQueuedOrInFlight(this)) {\n                return promiseRejectedWith(new TypeError(\"Cannot close an already-closing stream\"));\n              }\n              return WritableStreamClose(this);\n            }\n            getWriter() {\n              if (!IsWritableStream(this)) {\n                throw streamBrandCheckException$2(\"getWriter\");\n              }\n              return AcquireWritableStreamDefaultWriter(this);\n            }\n          }\n          Object.defineProperties(WritableStream.prototype, {\n            abort: { enumerable: true },\n            close: { enumerable: true },\n            getWriter: { enumerable: true },\n            locked: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n              value: \"WritableStream\",\n              configurable: true\n            });\n          }\n          function AcquireWritableStreamDefaultWriter(stream) {\n            return new WritableStreamDefaultWriter(stream);\n          }\n          function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n            const stream = Object.create(WritableStream.prototype);\n            InitializeWritableStream(stream);\n            const controller = Object.create(WritableStreamDefaultController.prototype);\n            SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n            return stream;\n          }\n          function InitializeWritableStream(stream) {\n            stream._state = \"writable\";\n            stream._storedError = void 0;\n            stream._writer = void 0;\n            stream._writableStreamController = void 0;\n            stream._writeRequests = new SimpleQueue();\n            stream._inFlightWriteRequest = void 0;\n            stream._closeRequest = void 0;\n            stream._inFlightCloseRequest = void 0;\n            stream._pendingAbortRequest = void 0;\n            stream._backpressure = false;\n          }\n          function IsWritableStream(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_writableStreamController\")) {\n              return false;\n            }\n            return x2 instanceof WritableStream;\n          }\n          function IsWritableStreamLocked(stream) {\n            if (stream._writer === void 0) {\n              return false;\n            }\n            return true;\n          }\n          function WritableStreamAbort(stream, reason) {\n            var _a;\n            if (stream._state === \"closed\" || stream._state === \"errored\") {\n              return promiseResolvedWith(void 0);\n            }\n            stream._writableStreamController._abortReason = reason;\n            (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n            const state = stream._state;\n            if (state === \"closed\" || state === \"errored\") {\n              return promiseResolvedWith(void 0);\n            }\n            if (stream._pendingAbortRequest !== void 0) {\n              return stream._pendingAbortRequest._promise;\n            }\n            let wasAlreadyErroring = false;\n            if (state === \"erroring\") {\n              wasAlreadyErroring = true;\n              reason = void 0;\n            }\n            const promise = newPromise((resolve, reject) => {\n              stream._pendingAbortRequest = {\n                _promise: void 0,\n                _resolve: resolve,\n                _reject: reject,\n                _reason: reason,\n                _wasAlreadyErroring: wasAlreadyErroring\n              };\n            });\n            stream._pendingAbortRequest._promise = promise;\n            if (!wasAlreadyErroring) {\n              WritableStreamStartErroring(stream, reason);\n            }\n            return promise;\n          }\n          function WritableStreamClose(stream) {\n            const state = stream._state;\n            if (state === \"closed\" || state === \"errored\") {\n              return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));\n            }\n            const promise = newPromise((resolve, reject) => {\n              const closeRequest = {\n                _resolve: resolve,\n                _reject: reject\n              };\n              stream._closeRequest = closeRequest;\n            });\n            const writer = stream._writer;\n            if (writer !== void 0 && stream._backpressure && state === \"writable\") {\n              defaultWriterReadyPromiseResolve(writer);\n            }\n            WritableStreamDefaultControllerClose(stream._writableStreamController);\n            return promise;\n          }\n          function WritableStreamAddWriteRequest(stream) {\n            const promise = newPromise((resolve, reject) => {\n              const writeRequest = {\n                _resolve: resolve,\n                _reject: reject\n              };\n              stream._writeRequests.push(writeRequest);\n            });\n            return promise;\n          }\n          function WritableStreamDealWithRejection(stream, error) {\n            const state = stream._state;\n            if (state === \"writable\") {\n              WritableStreamStartErroring(stream, error);\n              return;\n            }\n            WritableStreamFinishErroring(stream);\n          }\n          function WritableStreamStartErroring(stream, reason) {\n            const controller = stream._writableStreamController;\n            stream._state = \"erroring\";\n            stream._storedError = reason;\n            const writer = stream._writer;\n            if (writer !== void 0) {\n              WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n            }\n            if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n              WritableStreamFinishErroring(stream);\n            }\n          }\n          function WritableStreamFinishErroring(stream) {\n            stream._state = \"errored\";\n            stream._writableStreamController[ErrorSteps]();\n            const storedError = stream._storedError;\n            stream._writeRequests.forEach((writeRequest) => {\n              writeRequest._reject(storedError);\n            });\n            stream._writeRequests = new SimpleQueue();\n            if (stream._pendingAbortRequest === void 0) {\n              WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n              return;\n            }\n            const abortRequest = stream._pendingAbortRequest;\n            stream._pendingAbortRequest = void 0;\n            if (abortRequest._wasAlreadyErroring) {\n              abortRequest._reject(storedError);\n              WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n              return;\n            }\n            const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n            uponPromise(promise, () => {\n              abortRequest._resolve();\n              WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            }, (reason) => {\n              abortRequest._reject(reason);\n              WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n            });\n          }\n          function WritableStreamFinishInFlightWrite(stream) {\n            stream._inFlightWriteRequest._resolve(void 0);\n            stream._inFlightWriteRequest = void 0;\n          }\n          function WritableStreamFinishInFlightWriteWithError(stream, error) {\n            stream._inFlightWriteRequest._reject(error);\n            stream._inFlightWriteRequest = void 0;\n            WritableStreamDealWithRejection(stream, error);\n          }\n          function WritableStreamFinishInFlightClose(stream) {\n            stream._inFlightCloseRequest._resolve(void 0);\n            stream._inFlightCloseRequest = void 0;\n            const state = stream._state;\n            if (state === \"erroring\") {\n              stream._storedError = void 0;\n              if (stream._pendingAbortRequest !== void 0) {\n                stream._pendingAbortRequest._resolve();\n                stream._pendingAbortRequest = void 0;\n              }\n            }\n            stream._state = \"closed\";\n            const writer = stream._writer;\n            if (writer !== void 0) {\n              defaultWriterClosedPromiseResolve(writer);\n            }\n          }\n          function WritableStreamFinishInFlightCloseWithError(stream, error) {\n            stream._inFlightCloseRequest._reject(error);\n            stream._inFlightCloseRequest = void 0;\n            if (stream._pendingAbortRequest !== void 0) {\n              stream._pendingAbortRequest._reject(error);\n              stream._pendingAbortRequest = void 0;\n            }\n            WritableStreamDealWithRejection(stream, error);\n          }\n          function WritableStreamCloseQueuedOrInFlight(stream) {\n            if (stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0) {\n              return false;\n            }\n            return true;\n          }\n          function WritableStreamHasOperationMarkedInFlight(stream) {\n            if (stream._inFlightWriteRequest === void 0 && stream._inFlightCloseRequest === void 0) {\n              return false;\n            }\n            return true;\n          }\n          function WritableStreamMarkCloseRequestInFlight(stream) {\n            stream._inFlightCloseRequest = stream._closeRequest;\n            stream._closeRequest = void 0;\n          }\n          function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n            stream._inFlightWriteRequest = stream._writeRequests.shift();\n          }\n          function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n            if (stream._closeRequest !== void 0) {\n              stream._closeRequest._reject(stream._storedError);\n              stream._closeRequest = void 0;\n            }\n            const writer = stream._writer;\n            if (writer !== void 0) {\n              defaultWriterClosedPromiseReject(writer, stream._storedError);\n            }\n          }\n          function WritableStreamUpdateBackpressure(stream, backpressure) {\n            const writer = stream._writer;\n            if (writer !== void 0 && backpressure !== stream._backpressure) {\n              if (backpressure) {\n                defaultWriterReadyPromiseReset(writer);\n              } else {\n                defaultWriterReadyPromiseResolve(writer);\n              }\n            }\n            stream._backpressure = backpressure;\n          }\n          class WritableStreamDefaultWriter {\n            constructor(stream) {\n              assertRequiredArgument(stream, 1, \"WritableStreamDefaultWriter\");\n              assertWritableStream(stream, \"First parameter\");\n              if (IsWritableStreamLocked(stream)) {\n                throw new TypeError(\"This stream has already been locked for exclusive writing by another writer\");\n              }\n              this._ownerWritableStream = stream;\n              stream._writer = this;\n              const state = stream._state;\n              if (state === \"writable\") {\n                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n                  defaultWriterReadyPromiseInitialize(this);\n                } else {\n                  defaultWriterReadyPromiseInitializeAsResolved(this);\n                }\n                defaultWriterClosedPromiseInitialize(this);\n              } else if (state === \"erroring\") {\n                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n                defaultWriterClosedPromiseInitialize(this);\n              } else if (state === \"closed\") {\n                defaultWriterReadyPromiseInitializeAsResolved(this);\n                defaultWriterClosedPromiseInitializeAsResolved(this);\n              } else {\n                const storedError = stream._storedError;\n                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n              }\n            }\n            get closed() {\n              if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException(\"closed\"));\n              }\n              return this._closedPromise;\n            }\n            get desiredSize() {\n              if (!IsWritableStreamDefaultWriter(this)) {\n                throw defaultWriterBrandCheckException(\"desiredSize\");\n              }\n              if (this._ownerWritableStream === void 0) {\n                throw defaultWriterLockException(\"desiredSize\");\n              }\n              return WritableStreamDefaultWriterGetDesiredSize(this);\n            }\n            get ready() {\n              if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException(\"ready\"));\n              }\n              return this._readyPromise;\n            }\n            abort(reason = void 0) {\n              if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException(\"abort\"));\n              }\n              if (this._ownerWritableStream === void 0) {\n                return promiseRejectedWith(defaultWriterLockException(\"abort\"));\n              }\n              return WritableStreamDefaultWriterAbort(this, reason);\n            }\n            close() {\n              if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException(\"close\"));\n              }\n              const stream = this._ownerWritableStream;\n              if (stream === void 0) {\n                return promiseRejectedWith(defaultWriterLockException(\"close\"));\n              }\n              if (WritableStreamCloseQueuedOrInFlight(stream)) {\n                return promiseRejectedWith(new TypeError(\"Cannot close an already-closing stream\"));\n              }\n              return WritableStreamDefaultWriterClose(this);\n            }\n            releaseLock() {\n              if (!IsWritableStreamDefaultWriter(this)) {\n                throw defaultWriterBrandCheckException(\"releaseLock\");\n              }\n              const stream = this._ownerWritableStream;\n              if (stream === void 0) {\n                return;\n              }\n              WritableStreamDefaultWriterRelease(this);\n            }\n            write(chunk = void 0) {\n              if (!IsWritableStreamDefaultWriter(this)) {\n                return promiseRejectedWith(defaultWriterBrandCheckException(\"write\"));\n              }\n              if (this._ownerWritableStream === void 0) {\n                return promiseRejectedWith(defaultWriterLockException(\"write to\"));\n              }\n              return WritableStreamDefaultWriterWrite(this, chunk);\n            }\n          }\n          Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n            abort: { enumerable: true },\n            close: { enumerable: true },\n            releaseLock: { enumerable: true },\n            write: { enumerable: true },\n            closed: { enumerable: true },\n            desiredSize: { enumerable: true },\n            ready: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n              value: \"WritableStreamDefaultWriter\",\n              configurable: true\n            });\n          }\n          function IsWritableStreamDefaultWriter(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_ownerWritableStream\")) {\n              return false;\n            }\n            return x2 instanceof WritableStreamDefaultWriter;\n          }\n          function WritableStreamDefaultWriterAbort(writer, reason) {\n            const stream = writer._ownerWritableStream;\n            return WritableStreamAbort(stream, reason);\n          }\n          function WritableStreamDefaultWriterClose(writer) {\n            const stream = writer._ownerWritableStream;\n            return WritableStreamClose(stream);\n          }\n          function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n            const stream = writer._ownerWritableStream;\n            const state = stream._state;\n            if (WritableStreamCloseQueuedOrInFlight(stream) || state === \"closed\") {\n              return promiseResolvedWith(void 0);\n            }\n            if (state === \"errored\") {\n              return promiseRejectedWith(stream._storedError);\n            }\n            return WritableStreamDefaultWriterClose(writer);\n          }\n          function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n            if (writer._closedPromiseState === \"pending\") {\n              defaultWriterClosedPromiseReject(writer, error);\n            } else {\n              defaultWriterClosedPromiseResetToRejected(writer, error);\n            }\n          }\n          function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n            if (writer._readyPromiseState === \"pending\") {\n              defaultWriterReadyPromiseReject(writer, error);\n            } else {\n              defaultWriterReadyPromiseResetToRejected(writer, error);\n            }\n          }\n          function WritableStreamDefaultWriterGetDesiredSize(writer) {\n            const stream = writer._ownerWritableStream;\n            const state = stream._state;\n            if (state === \"errored\" || state === \"erroring\") {\n              return null;\n            }\n            if (state === \"closed\") {\n              return 0;\n            }\n            return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n          }\n          function WritableStreamDefaultWriterRelease(writer) {\n            const stream = writer._ownerWritableStream;\n            const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);\n            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);\n            WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n            stream._writer = void 0;\n            writer._ownerWritableStream = void 0;\n          }\n          function WritableStreamDefaultWriterWrite(writer, chunk) {\n            const stream = writer._ownerWritableStream;\n            const controller = stream._writableStreamController;\n            const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n            if (stream !== writer._ownerWritableStream) {\n              return promiseRejectedWith(defaultWriterLockException(\"write to\"));\n            }\n            const state = stream._state;\n            if (state === \"errored\") {\n              return promiseRejectedWith(stream._storedError);\n            }\n            if (WritableStreamCloseQueuedOrInFlight(stream) || state === \"closed\") {\n              return promiseRejectedWith(new TypeError(\"The stream is closing or closed and cannot be written to\"));\n            }\n            if (state === \"erroring\") {\n              return promiseRejectedWith(stream._storedError);\n            }\n            const promise = WritableStreamAddWriteRequest(stream);\n            WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n            return promise;\n          }\n          const closeSentinel = {};\n          class WritableStreamDefaultController {\n            constructor() {\n              throw new TypeError(\"Illegal constructor\");\n            }\n            get abortReason() {\n              if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2(\"abortReason\");\n              }\n              return this._abortReason;\n            }\n            get signal() {\n              if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2(\"signal\");\n              }\n              if (this._abortController === void 0) {\n                throw new TypeError(\"WritableStreamDefaultController.prototype.signal is not supported\");\n              }\n              return this._abortController.signal;\n            }\n            error(e2 = void 0) {\n              if (!IsWritableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$2(\"error\");\n              }\n              const state = this._controlledWritableStream._state;\n              if (state !== \"writable\") {\n                return;\n              }\n              WritableStreamDefaultControllerError(this, e2);\n            }\n            [AbortSteps](reason) {\n              const result = this._abortAlgorithm(reason);\n              WritableStreamDefaultControllerClearAlgorithms(this);\n              return result;\n            }\n            [ErrorSteps]() {\n              ResetQueue(this);\n            }\n          }\n          Object.defineProperties(WritableStreamDefaultController.prototype, {\n            abortReason: { enumerable: true },\n            signal: { enumerable: true },\n            error: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n              value: \"WritableStreamDefaultController\",\n              configurable: true\n            });\n          }\n          function IsWritableStreamDefaultController(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_controlledWritableStream\")) {\n              return false;\n            }\n            return x2 instanceof WritableStreamDefaultController;\n          }\n          function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n            controller._controlledWritableStream = stream;\n            stream._writableStreamController = controller;\n            controller._queue = void 0;\n            controller._queueTotalSize = void 0;\n            ResetQueue(controller);\n            controller._abortReason = void 0;\n            controller._abortController = createAbortController();\n            controller._started = false;\n            controller._strategySizeAlgorithm = sizeAlgorithm;\n            controller._strategyHWM = highWaterMark;\n            controller._writeAlgorithm = writeAlgorithm;\n            controller._closeAlgorithm = closeAlgorithm;\n            controller._abortAlgorithm = abortAlgorithm;\n            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n            WritableStreamUpdateBackpressure(stream, backpressure);\n            const startResult = startAlgorithm();\n            const startPromise = promiseResolvedWith(startResult);\n            uponPromise(startPromise, () => {\n              controller._started = true;\n              WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            }, (r22) => {\n              controller._started = true;\n              WritableStreamDealWithRejection(stream, r22);\n            });\n          }\n          function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n            const controller = Object.create(WritableStreamDefaultController.prototype);\n            let startAlgorithm = () => void 0;\n            let writeAlgorithm = () => promiseResolvedWith(void 0);\n            let closeAlgorithm = () => promiseResolvedWith(void 0);\n            let abortAlgorithm = () => promiseResolvedWith(void 0);\n            if (underlyingSink.start !== void 0) {\n              startAlgorithm = () => underlyingSink.start(controller);\n            }\n            if (underlyingSink.write !== void 0) {\n              writeAlgorithm = (chunk) => underlyingSink.write(chunk, controller);\n            }\n            if (underlyingSink.close !== void 0) {\n              closeAlgorithm = () => underlyingSink.close();\n            }\n            if (underlyingSink.abort !== void 0) {\n              abortAlgorithm = (reason) => underlyingSink.abort(reason);\n            }\n            SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n          }\n          function WritableStreamDefaultControllerClearAlgorithms(controller) {\n            controller._writeAlgorithm = void 0;\n            controller._closeAlgorithm = void 0;\n            controller._abortAlgorithm = void 0;\n            controller._strategySizeAlgorithm = void 0;\n          }\n          function WritableStreamDefaultControllerClose(controller) {\n            EnqueueValueWithSize(controller, closeSentinel, 0);\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n          }\n          function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n            try {\n              return controller._strategySizeAlgorithm(chunk);\n            } catch (chunkSizeE) {\n              WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n              return 1;\n            }\n          }\n          function WritableStreamDefaultControllerGetDesiredSize(controller) {\n            return controller._strategyHWM - controller._queueTotalSize;\n          }\n          function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n            try {\n              EnqueueValueWithSize(controller, chunk, chunkSize);\n            } catch (enqueueE) {\n              WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n              return;\n            }\n            const stream = controller._controlledWritableStream;\n            if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === \"writable\") {\n              const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n              WritableStreamUpdateBackpressure(stream, backpressure);\n            }\n            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n          }\n          function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n            const stream = controller._controlledWritableStream;\n            if (!controller._started) {\n              return;\n            }\n            if (stream._inFlightWriteRequest !== void 0) {\n              return;\n            }\n            const state = stream._state;\n            if (state === \"erroring\") {\n              WritableStreamFinishErroring(stream);\n              return;\n            }\n            if (controller._queue.length === 0) {\n              return;\n            }\n            const value = PeekQueueValue(controller);\n            if (value === closeSentinel) {\n              WritableStreamDefaultControllerProcessClose(controller);\n            } else {\n              WritableStreamDefaultControllerProcessWrite(controller, value);\n            }\n          }\n          function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n            if (controller._controlledWritableStream._state === \"writable\") {\n              WritableStreamDefaultControllerError(controller, error);\n            }\n          }\n          function WritableStreamDefaultControllerProcessClose(controller) {\n            const stream = controller._controlledWritableStream;\n            WritableStreamMarkCloseRequestInFlight(stream);\n            DequeueValue(controller);\n            const sinkClosePromise = controller._closeAlgorithm();\n            WritableStreamDefaultControllerClearAlgorithms(controller);\n            uponPromise(sinkClosePromise, () => {\n              WritableStreamFinishInFlightClose(stream);\n            }, (reason) => {\n              WritableStreamFinishInFlightCloseWithError(stream, reason);\n            });\n          }\n          function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n            const stream = controller._controlledWritableStream;\n            WritableStreamMarkFirstWriteRequestInFlight(stream);\n            const sinkWritePromise = controller._writeAlgorithm(chunk);\n            uponPromise(sinkWritePromise, () => {\n              WritableStreamFinishInFlightWrite(stream);\n              const state = stream._state;\n              DequeueValue(controller);\n              if (!WritableStreamCloseQueuedOrInFlight(stream) && state === \"writable\") {\n                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n                WritableStreamUpdateBackpressure(stream, backpressure);\n              }\n              WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n            }, (reason) => {\n              if (stream._state === \"writable\") {\n                WritableStreamDefaultControllerClearAlgorithms(controller);\n              }\n              WritableStreamFinishInFlightWriteWithError(stream, reason);\n            });\n          }\n          function WritableStreamDefaultControllerGetBackpressure(controller) {\n            const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n            return desiredSize <= 0;\n          }\n          function WritableStreamDefaultControllerError(controller, error) {\n            const stream = controller._controlledWritableStream;\n            WritableStreamDefaultControllerClearAlgorithms(controller);\n            WritableStreamStartErroring(stream, error);\n          }\n          function streamBrandCheckException$2(name) {\n            return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);\n          }\n          function defaultControllerBrandCheckException$2(name) {\n            return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);\n          }\n          function defaultWriterBrandCheckException(name) {\n            return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);\n          }\n          function defaultWriterLockException(name) {\n            return new TypeError(\"Cannot \" + name + \" a stream using a released writer\");\n          }\n          function defaultWriterClosedPromiseInitialize(writer) {\n            writer._closedPromise = newPromise((resolve, reject) => {\n              writer._closedPromise_resolve = resolve;\n              writer._closedPromise_reject = reject;\n              writer._closedPromiseState = \"pending\";\n            });\n          }\n          function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n            defaultWriterClosedPromiseInitialize(writer);\n            defaultWriterClosedPromiseReject(writer, reason);\n          }\n          function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n            defaultWriterClosedPromiseInitialize(writer);\n            defaultWriterClosedPromiseResolve(writer);\n          }\n          function defaultWriterClosedPromiseReject(writer, reason) {\n            if (writer._closedPromise_reject === void 0) {\n              return;\n            }\n            setPromiseIsHandledToTrue(writer._closedPromise);\n            writer._closedPromise_reject(reason);\n            writer._closedPromise_resolve = void 0;\n            writer._closedPromise_reject = void 0;\n            writer._closedPromiseState = \"rejected\";\n          }\n          function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n            defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n          }\n          function defaultWriterClosedPromiseResolve(writer) {\n            if (writer._closedPromise_resolve === void 0) {\n              return;\n            }\n            writer._closedPromise_resolve(void 0);\n            writer._closedPromise_resolve = void 0;\n            writer._closedPromise_reject = void 0;\n            writer._closedPromiseState = \"resolved\";\n          }\n          function defaultWriterReadyPromiseInitialize(writer) {\n            writer._readyPromise = newPromise((resolve, reject) => {\n              writer._readyPromise_resolve = resolve;\n              writer._readyPromise_reject = reject;\n            });\n            writer._readyPromiseState = \"pending\";\n          }\n          function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n            defaultWriterReadyPromiseInitialize(writer);\n            defaultWriterReadyPromiseReject(writer, reason);\n          }\n          function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n            defaultWriterReadyPromiseInitialize(writer);\n            defaultWriterReadyPromiseResolve(writer);\n          }\n          function defaultWriterReadyPromiseReject(writer, reason) {\n            if (writer._readyPromise_reject === void 0) {\n              return;\n            }\n            setPromiseIsHandledToTrue(writer._readyPromise);\n            writer._readyPromise_reject(reason);\n            writer._readyPromise_resolve = void 0;\n            writer._readyPromise_reject = void 0;\n            writer._readyPromiseState = \"rejected\";\n          }\n          function defaultWriterReadyPromiseReset(writer) {\n            defaultWriterReadyPromiseInitialize(writer);\n          }\n          function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n            defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n          }\n          function defaultWriterReadyPromiseResolve(writer) {\n            if (writer._readyPromise_resolve === void 0) {\n              return;\n            }\n            writer._readyPromise_resolve(void 0);\n            writer._readyPromise_resolve = void 0;\n            writer._readyPromise_reject = void 0;\n            writer._readyPromiseState = \"fulfilled\";\n          }\n          const NativeDOMException = typeof DOMException !== \"undefined\" ? DOMException : void 0;\n          function isDOMExceptionConstructor(ctor) {\n            if (!(typeof ctor === \"function\" || typeof ctor === \"object\")) {\n              return false;\n            }\n            try {\n              new ctor();\n              return true;\n            } catch (_a) {\n              return false;\n            }\n          }\n          function createDOMExceptionPolyfill() {\n            const ctor = function DOMException3(message, name) {\n              this.message = message || \"\";\n              this.name = name || \"Error\";\n              if (Error.captureStackTrace) {\n                Error.captureStackTrace(this, this.constructor);\n              }\n            };\n            ctor.prototype = Object.create(Error.prototype);\n            Object.defineProperty(ctor.prototype, \"constructor\", { value: ctor, writable: true, configurable: true });\n            return ctor;\n          }\n          const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n          function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n            const reader = AcquireReadableStreamDefaultReader(source);\n            const writer = AcquireWritableStreamDefaultWriter(dest);\n            source._disturbed = true;\n            let shuttingDown = false;\n            let currentWrite = promiseResolvedWith(void 0);\n            return newPromise((resolve, reject) => {\n              let abortAlgorithm;\n              if (signal !== void 0) {\n                abortAlgorithm = () => {\n                  const error = new DOMException$1(\"Aborted\", \"AbortError\");\n                  const actions = [];\n                  if (!preventAbort) {\n                    actions.push(() => {\n                      if (dest._state === \"writable\") {\n                        return WritableStreamAbort(dest, error);\n                      }\n                      return promiseResolvedWith(void 0);\n                    });\n                  }\n                  if (!preventCancel) {\n                    actions.push(() => {\n                      if (source._state === \"readable\") {\n                        return ReadableStreamCancel(source, error);\n                      }\n                      return promiseResolvedWith(void 0);\n                    });\n                  }\n                  shutdownWithAction(() => Promise.all(actions.map((action) => action())), true, error);\n                };\n                if (signal.aborted) {\n                  abortAlgorithm();\n                  return;\n                }\n                signal.addEventListener(\"abort\", abortAlgorithm);\n              }\n              function pipeLoop() {\n                return newPromise((resolveLoop, rejectLoop) => {\n                  function next(done) {\n                    if (done) {\n                      resolveLoop();\n                    } else {\n                      PerformPromiseThen(pipeStep(), next, rejectLoop);\n                    }\n                  }\n                  next(false);\n                });\n              }\n              function pipeStep() {\n                if (shuttingDown) {\n                  return promiseResolvedWith(true);\n                }\n                return PerformPromiseThen(writer._readyPromise, () => {\n                  return newPromise((resolveRead, rejectRead) => {\n                    ReadableStreamDefaultReaderRead(reader, {\n                      _chunkSteps: (chunk) => {\n                        currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), void 0, noop2);\n                        resolveRead(false);\n                      },\n                      _closeSteps: () => resolveRead(true),\n                      _errorSteps: rejectRead\n                    });\n                  });\n                });\n              }\n              isOrBecomesErrored(source, reader._closedPromise, (storedError) => {\n                if (!preventAbort) {\n                  shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);\n                } else {\n                  shutdown(true, storedError);\n                }\n              });\n              isOrBecomesErrored(dest, writer._closedPromise, (storedError) => {\n                if (!preventCancel) {\n                  shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);\n                } else {\n                  shutdown(true, storedError);\n                }\n              });\n              isOrBecomesClosed(source, reader._closedPromise, () => {\n                if (!preventClose) {\n                  shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));\n                } else {\n                  shutdown();\n                }\n              });\n              if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === \"closed\") {\n                const destClosed = new TypeError(\"the destination writable stream closed before all data could be piped to it\");\n                if (!preventCancel) {\n                  shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);\n                } else {\n                  shutdown(true, destClosed);\n                }\n              }\n              setPromiseIsHandledToTrue(pipeLoop());\n              function waitForWritesToFinish() {\n                const oldCurrentWrite = currentWrite;\n                return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0);\n              }\n              function isOrBecomesErrored(stream, promise, action) {\n                if (stream._state === \"errored\") {\n                  action(stream._storedError);\n                } else {\n                  uponRejection(promise, action);\n                }\n              }\n              function isOrBecomesClosed(stream, promise, action) {\n                if (stream._state === \"closed\") {\n                  action();\n                } else {\n                  uponFulfillment(promise, action);\n                }\n              }\n              function shutdownWithAction(action, originalIsError, originalError) {\n                if (shuttingDown) {\n                  return;\n                }\n                shuttingDown = true;\n                if (dest._state === \"writable\" && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                  uponFulfillment(waitForWritesToFinish(), doTheRest);\n                } else {\n                  doTheRest();\n                }\n                function doTheRest() {\n                  uponPromise(action(), () => finalize(originalIsError, originalError), (newError) => finalize(true, newError));\n                }\n              }\n              function shutdown(isError, error) {\n                if (shuttingDown) {\n                  return;\n                }\n                shuttingDown = true;\n                if (dest._state === \"writable\" && !WritableStreamCloseQueuedOrInFlight(dest)) {\n                  uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));\n                } else {\n                  finalize(isError, error);\n                }\n              }\n              function finalize(isError, error) {\n                WritableStreamDefaultWriterRelease(writer);\n                ReadableStreamReaderGenericRelease(reader);\n                if (signal !== void 0) {\n                  signal.removeEventListener(\"abort\", abortAlgorithm);\n                }\n                if (isError) {\n                  reject(error);\n                } else {\n                  resolve(void 0);\n                }\n              }\n            });\n          }\n          class ReadableStreamDefaultController {\n            constructor() {\n              throw new TypeError(\"Illegal constructor\");\n            }\n            get desiredSize() {\n              if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1(\"desiredSize\");\n              }\n              return ReadableStreamDefaultControllerGetDesiredSize(this);\n            }\n            close() {\n              if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1(\"close\");\n              }\n              if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError(\"The stream is not in a state that permits close\");\n              }\n              ReadableStreamDefaultControllerClose(this);\n            }\n            enqueue(chunk = void 0) {\n              if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1(\"enqueue\");\n              }\n              if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n                throw new TypeError(\"The stream is not in a state that permits enqueue\");\n              }\n              return ReadableStreamDefaultControllerEnqueue(this, chunk);\n            }\n            error(e2 = void 0) {\n              if (!IsReadableStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException$1(\"error\");\n              }\n              ReadableStreamDefaultControllerError(this, e2);\n            }\n            [CancelSteps](reason) {\n              ResetQueue(this);\n              const result = this._cancelAlgorithm(reason);\n              ReadableStreamDefaultControllerClearAlgorithms(this);\n              return result;\n            }\n            [PullSteps](readRequest) {\n              const stream = this._controlledReadableStream;\n              if (this._queue.length > 0) {\n                const chunk = DequeueValue(this);\n                if (this._closeRequested && this._queue.length === 0) {\n                  ReadableStreamDefaultControllerClearAlgorithms(this);\n                  ReadableStreamClose(stream);\n                } else {\n                  ReadableStreamDefaultControllerCallPullIfNeeded(this);\n                }\n                readRequest._chunkSteps(chunk);\n              } else {\n                ReadableStreamAddReadRequest(stream, readRequest);\n                ReadableStreamDefaultControllerCallPullIfNeeded(this);\n              }\n            }\n          }\n          Object.defineProperties(ReadableStreamDefaultController.prototype, {\n            close: { enumerable: true },\n            enqueue: { enumerable: true },\n            error: { enumerable: true },\n            desiredSize: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n              value: \"ReadableStreamDefaultController\",\n              configurable: true\n            });\n          }\n          function IsReadableStreamDefaultController(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_controlledReadableStream\")) {\n              return false;\n            }\n            return x2 instanceof ReadableStreamDefaultController;\n          }\n          function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n            const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n            if (!shouldPull) {\n              return;\n            }\n            if (controller._pulling) {\n              controller._pullAgain = true;\n              return;\n            }\n            controller._pulling = true;\n            const pullPromise = controller._pullAlgorithm();\n            uponPromise(pullPromise, () => {\n              controller._pulling = false;\n              if (controller._pullAgain) {\n                controller._pullAgain = false;\n                ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n              }\n            }, (e2) => {\n              ReadableStreamDefaultControllerError(controller, e2);\n            });\n          }\n          function ReadableStreamDefaultControllerShouldCallPull(controller) {\n            const stream = controller._controlledReadableStream;\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n              return false;\n            }\n            if (!controller._started) {\n              return false;\n            }\n            if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n              return true;\n            }\n            const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n            if (desiredSize > 0) {\n              return true;\n            }\n            return false;\n          }\n          function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n            controller._pullAlgorithm = void 0;\n            controller._cancelAlgorithm = void 0;\n            controller._strategySizeAlgorithm = void 0;\n          }\n          function ReadableStreamDefaultControllerClose(controller) {\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n              return;\n            }\n            const stream = controller._controlledReadableStream;\n            controller._closeRequested = true;\n            if (controller._queue.length === 0) {\n              ReadableStreamDefaultControllerClearAlgorithms(controller);\n              ReadableStreamClose(stream);\n            }\n          }\n          function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n              return;\n            }\n            const stream = controller._controlledReadableStream;\n            if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n              ReadableStreamFulfillReadRequest(stream, chunk, false);\n            } else {\n              let chunkSize;\n              try {\n                chunkSize = controller._strategySizeAlgorithm(chunk);\n              } catch (chunkSizeE) {\n                ReadableStreamDefaultControllerError(controller, chunkSizeE);\n                throw chunkSizeE;\n              }\n              try {\n                EnqueueValueWithSize(controller, chunk, chunkSize);\n              } catch (enqueueE) {\n                ReadableStreamDefaultControllerError(controller, enqueueE);\n                throw enqueueE;\n              }\n            }\n            ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n          }\n          function ReadableStreamDefaultControllerError(controller, e2) {\n            const stream = controller._controlledReadableStream;\n            if (stream._state !== \"readable\") {\n              return;\n            }\n            ResetQueue(controller);\n            ReadableStreamDefaultControllerClearAlgorithms(controller);\n            ReadableStreamError(stream, e2);\n          }\n          function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n            const state = controller._controlledReadableStream._state;\n            if (state === \"errored\") {\n              return null;\n            }\n            if (state === \"closed\") {\n              return 0;\n            }\n            return controller._strategyHWM - controller._queueTotalSize;\n          }\n          function ReadableStreamDefaultControllerHasBackpressure(controller) {\n            if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n              return false;\n            }\n            return true;\n          }\n          function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n            const state = controller._controlledReadableStream._state;\n            if (!controller._closeRequested && state === \"readable\") {\n              return true;\n            }\n            return false;\n          }\n          function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n            controller._controlledReadableStream = stream;\n            controller._queue = void 0;\n            controller._queueTotalSize = void 0;\n            ResetQueue(controller);\n            controller._started = false;\n            controller._closeRequested = false;\n            controller._pullAgain = false;\n            controller._pulling = false;\n            controller._strategySizeAlgorithm = sizeAlgorithm;\n            controller._strategyHWM = highWaterMark;\n            controller._pullAlgorithm = pullAlgorithm;\n            controller._cancelAlgorithm = cancelAlgorithm;\n            stream._readableStreamController = controller;\n            const startResult = startAlgorithm();\n            uponPromise(promiseResolvedWith(startResult), () => {\n              controller._started = true;\n              ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n            }, (r22) => {\n              ReadableStreamDefaultControllerError(controller, r22);\n            });\n          }\n          function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n            const controller = Object.create(ReadableStreamDefaultController.prototype);\n            let startAlgorithm = () => void 0;\n            let pullAlgorithm = () => promiseResolvedWith(void 0);\n            let cancelAlgorithm = () => promiseResolvedWith(void 0);\n            if (underlyingSource.start !== void 0) {\n              startAlgorithm = () => underlyingSource.start(controller);\n            }\n            if (underlyingSource.pull !== void 0) {\n              pullAlgorithm = () => underlyingSource.pull(controller);\n            }\n            if (underlyingSource.cancel !== void 0) {\n              cancelAlgorithm = (reason) => underlyingSource.cancel(reason);\n            }\n            SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n          }\n          function defaultControllerBrandCheckException$1(name) {\n            return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);\n          }\n          function ReadableStreamTee(stream, cloneForBranch2) {\n            if (IsReadableByteStreamController(stream._readableStreamController)) {\n              return ReadableByteStreamTee(stream);\n            }\n            return ReadableStreamDefaultTee(stream);\n          }\n          function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n            const reader = AcquireReadableStreamDefaultReader(stream);\n            let reading = false;\n            let readAgain = false;\n            let canceled1 = false;\n            let canceled2 = false;\n            let reason1;\n            let reason2;\n            let branch1;\n            let branch2;\n            let resolveCancelPromise;\n            const cancelPromise = newPromise((resolve) => {\n              resolveCancelPromise = resolve;\n            });\n            function pullAlgorithm() {\n              if (reading) {\n                readAgain = true;\n                return promiseResolvedWith(void 0);\n              }\n              reading = true;\n              const readRequest = {\n                _chunkSteps: (chunk) => {\n                  queueMicrotask(() => {\n                    readAgain = false;\n                    const chunk1 = chunk;\n                    const chunk2 = chunk;\n                    if (!canceled1) {\n                      ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n                    }\n                    if (!canceled2) {\n                      ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n                    }\n                    reading = false;\n                    if (readAgain) {\n                      pullAlgorithm();\n                    }\n                  });\n                },\n                _closeSteps: () => {\n                  reading = false;\n                  if (!canceled1) {\n                    ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n                  }\n                  if (!canceled2) {\n                    ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n                  }\n                  if (!canceled1 || !canceled2) {\n                    resolveCancelPromise(void 0);\n                  }\n                },\n                _errorSteps: () => {\n                  reading = false;\n                }\n              };\n              ReadableStreamDefaultReaderRead(reader, readRequest);\n              return promiseResolvedWith(void 0);\n            }\n            function cancel1Algorithm(reason) {\n              canceled1 = true;\n              reason1 = reason;\n              if (canceled2) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n              }\n              return cancelPromise;\n            }\n            function cancel2Algorithm(reason) {\n              canceled2 = true;\n              reason2 = reason;\n              if (canceled1) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n              }\n              return cancelPromise;\n            }\n            function startAlgorithm() {\n            }\n            branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n            branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n            uponRejection(reader._closedPromise, (r22) => {\n              ReadableStreamDefaultControllerError(branch1._readableStreamController, r22);\n              ReadableStreamDefaultControllerError(branch2._readableStreamController, r22);\n              if (!canceled1 || !canceled2) {\n                resolveCancelPromise(void 0);\n              }\n            });\n            return [branch1, branch2];\n          }\n          function ReadableByteStreamTee(stream) {\n            let reader = AcquireReadableStreamDefaultReader(stream);\n            let reading = false;\n            let readAgainForBranch1 = false;\n            let readAgainForBranch2 = false;\n            let canceled1 = false;\n            let canceled2 = false;\n            let reason1;\n            let reason2;\n            let branch1;\n            let branch2;\n            let resolveCancelPromise;\n            const cancelPromise = newPromise((resolve) => {\n              resolveCancelPromise = resolve;\n            });\n            function forwardReaderError(thisReader) {\n              uponRejection(thisReader._closedPromise, (r22) => {\n                if (thisReader !== reader) {\n                  return;\n                }\n                ReadableByteStreamControllerError(branch1._readableStreamController, r22);\n                ReadableByteStreamControllerError(branch2._readableStreamController, r22);\n                if (!canceled1 || !canceled2) {\n                  resolveCancelPromise(void 0);\n                }\n              });\n            }\n            function pullWithDefaultReader() {\n              if (IsReadableStreamBYOBReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamDefaultReader(stream);\n                forwardReaderError(reader);\n              }\n              const readRequest = {\n                _chunkSteps: (chunk) => {\n                  queueMicrotask(() => {\n                    readAgainForBranch1 = false;\n                    readAgainForBranch2 = false;\n                    const chunk1 = chunk;\n                    let chunk2 = chunk;\n                    if (!canceled1 && !canceled2) {\n                      try {\n                        chunk2 = CloneAsUint8Array(chunk);\n                      } catch (cloneE) {\n                        ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                        ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                        return;\n                      }\n                    }\n                    if (!canceled1) {\n                      ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n                    }\n                    if (!canceled2) {\n                      ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n                    }\n                    reading = false;\n                    if (readAgainForBranch1) {\n                      pull1Algorithm();\n                    } else if (readAgainForBranch2) {\n                      pull2Algorithm();\n                    }\n                  });\n                },\n                _closeSteps: () => {\n                  reading = false;\n                  if (!canceled1) {\n                    ReadableByteStreamControllerClose(branch1._readableStreamController);\n                  }\n                  if (!canceled2) {\n                    ReadableByteStreamControllerClose(branch2._readableStreamController);\n                  }\n                  if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n                    ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n                  }\n                  if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n                    ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n                  }\n                  if (!canceled1 || !canceled2) {\n                    resolveCancelPromise(void 0);\n                  }\n                },\n                _errorSteps: () => {\n                  reading = false;\n                }\n              };\n              ReadableStreamDefaultReaderRead(reader, readRequest);\n            }\n            function pullWithBYOBReader(view, forBranch2) {\n              if (IsReadableStreamDefaultReader(reader)) {\n                ReadableStreamReaderGenericRelease(reader);\n                reader = AcquireReadableStreamBYOBReader(stream);\n                forwardReaderError(reader);\n              }\n              const byobBranch = forBranch2 ? branch2 : branch1;\n              const otherBranch = forBranch2 ? branch1 : branch2;\n              const readIntoRequest = {\n                _chunkSteps: (chunk) => {\n                  queueMicrotask(() => {\n                    readAgainForBranch1 = false;\n                    readAgainForBranch2 = false;\n                    const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                    const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                    if (!otherCanceled) {\n                      let clonedChunk;\n                      try {\n                        clonedChunk = CloneAsUint8Array(chunk);\n                      } catch (cloneE) {\n                        ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                        ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                        return;\n                      }\n                      if (!byobCanceled) {\n                        ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                      }\n                      ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n                    } else if (!byobCanceled) {\n                      ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                    }\n                    reading = false;\n                    if (readAgainForBranch1) {\n                      pull1Algorithm();\n                    } else if (readAgainForBranch2) {\n                      pull2Algorithm();\n                    }\n                  });\n                },\n                _closeSteps: (chunk) => {\n                  reading = false;\n                  const byobCanceled = forBranch2 ? canceled2 : canceled1;\n                  const otherCanceled = forBranch2 ? canceled1 : canceled2;\n                  if (!byobCanceled) {\n                    ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n                  }\n                  if (!otherCanceled) {\n                    ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n                  }\n                  if (chunk !== void 0) {\n                    if (!byobCanceled) {\n                      ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n                    }\n                    if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n                      ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n                    }\n                  }\n                  if (!byobCanceled || !otherCanceled) {\n                    resolveCancelPromise(void 0);\n                  }\n                },\n                _errorSteps: () => {\n                  reading = false;\n                }\n              };\n              ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n            }\n            function pull1Algorithm() {\n              if (reading) {\n                readAgainForBranch1 = true;\n                return promiseResolvedWith(void 0);\n              }\n              reading = true;\n              const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n              if (byobRequest === null) {\n                pullWithDefaultReader();\n              } else {\n                pullWithBYOBReader(byobRequest._view, false);\n              }\n              return promiseResolvedWith(void 0);\n            }\n            function pull2Algorithm() {\n              if (reading) {\n                readAgainForBranch2 = true;\n                return promiseResolvedWith(void 0);\n              }\n              reading = true;\n              const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n              if (byobRequest === null) {\n                pullWithDefaultReader();\n              } else {\n                pullWithBYOBReader(byobRequest._view, true);\n              }\n              return promiseResolvedWith(void 0);\n            }\n            function cancel1Algorithm(reason) {\n              canceled1 = true;\n              reason1 = reason;\n              if (canceled2) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n              }\n              return cancelPromise;\n            }\n            function cancel2Algorithm(reason) {\n              canceled2 = true;\n              reason2 = reason;\n              if (canceled1) {\n                const compositeReason = CreateArrayFromList([reason1, reason2]);\n                const cancelResult = ReadableStreamCancel(stream, compositeReason);\n                resolveCancelPromise(cancelResult);\n              }\n              return cancelPromise;\n            }\n            function startAlgorithm() {\n              return;\n            }\n            branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n            branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n            forwardReaderError(reader);\n            return [branch1, branch2];\n          }\n          function convertUnderlyingDefaultOrByteSource(source, context) {\n            assertDictionary(source, context);\n            const original = source;\n            const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n            const cancel = original === null || original === void 0 ? void 0 : original.cancel;\n            const pull = original === null || original === void 0 ? void 0 : original.pull;\n            const start = original === null || original === void 0 ? void 0 : original.start;\n            const type = original === null || original === void 0 ? void 0 : original.type;\n            return {\n              autoAllocateChunkSize: autoAllocateChunkSize === void 0 ? void 0 : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),\n              cancel: cancel === void 0 ? void 0 : convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),\n              pull: pull === void 0 ? void 0 : convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),\n              start: start === void 0 ? void 0 : convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),\n              type: type === void 0 ? void 0 : convertReadableStreamType(type, `${context} has member 'type' that`)\n            };\n          }\n          function convertUnderlyingSourceCancelCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return (reason) => promiseCall(fn, original, [reason]);\n          }\n          function convertUnderlyingSourcePullCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return (controller) => promiseCall(fn, original, [controller]);\n          }\n          function convertUnderlyingSourceStartCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return (controller) => reflectCall(fn, original, [controller]);\n          }\n          function convertReadableStreamType(type, context) {\n            type = `${type}`;\n            if (type !== \"bytes\") {\n              throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);\n            }\n            return type;\n          }\n          function convertReaderOptions(options, context) {\n            assertDictionary(options, context);\n            const mode = options === null || options === void 0 ? void 0 : options.mode;\n            return {\n              mode: mode === void 0 ? void 0 : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)\n            };\n          }\n          function convertReadableStreamReaderMode(mode, context) {\n            mode = `${mode}`;\n            if (mode !== \"byob\") {\n              throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);\n            }\n            return mode;\n          }\n          function convertIteratorOptions(options, context) {\n            assertDictionary(options, context);\n            const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n            return { preventCancel: Boolean(preventCancel) };\n          }\n          function convertPipeOptions(options, context) {\n            assertDictionary(options, context);\n            const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n            const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n            const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n            const signal = options === null || options === void 0 ? void 0 : options.signal;\n            if (signal !== void 0) {\n              assertAbortSignal(signal, `${context} has member 'signal' that`);\n            }\n            return {\n              preventAbort: Boolean(preventAbort),\n              preventCancel: Boolean(preventCancel),\n              preventClose: Boolean(preventClose),\n              signal\n            };\n          }\n          function assertAbortSignal(signal, context) {\n            if (!isAbortSignal2(signal)) {\n              throw new TypeError(`${context} is not an AbortSignal.`);\n            }\n          }\n          function convertReadableWritablePair(pair, context) {\n            assertDictionary(pair, context);\n            const readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n            assertRequiredField(readable, \"readable\", \"ReadableWritablePair\");\n            assertReadableStream(readable, `${context} has member 'readable' that`);\n            const writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n            assertRequiredField(writable, \"writable\", \"ReadableWritablePair\");\n            assertWritableStream(writable, `${context} has member 'writable' that`);\n            return { readable, writable };\n          }\n          class ReadableStream2 {\n            constructor(rawUnderlyingSource = {}, rawStrategy = {}) {\n              if (rawUnderlyingSource === void 0) {\n                rawUnderlyingSource = null;\n              } else {\n                assertObject(rawUnderlyingSource, \"First parameter\");\n              }\n              const strategy = convertQueuingStrategy(rawStrategy, \"Second parameter\");\n              const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, \"First parameter\");\n              InitializeReadableStream(this);\n              if (underlyingSource.type === \"bytes\") {\n                if (strategy.size !== void 0) {\n                  throw new RangeError(\"The strategy for a byte stream cannot have a size function\");\n                }\n                const highWaterMark = ExtractHighWaterMark(strategy, 0);\n                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n              } else {\n                const sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n                const highWaterMark = ExtractHighWaterMark(strategy, 1);\n                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);\n              }\n            }\n            get locked() {\n              if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1(\"locked\");\n              }\n              return IsReadableStreamLocked(this);\n            }\n            cancel(reason = void 0) {\n              if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1(\"cancel\"));\n              }\n              if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError(\"Cannot cancel a stream that already has a reader\"));\n              }\n              return ReadableStreamCancel(this, reason);\n            }\n            getReader(rawOptions = void 0) {\n              if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1(\"getReader\");\n              }\n              const options = convertReaderOptions(rawOptions, \"First parameter\");\n              if (options.mode === void 0) {\n                return AcquireReadableStreamDefaultReader(this);\n              }\n              return AcquireReadableStreamBYOBReader(this);\n            }\n            pipeThrough(rawTransform, rawOptions = {}) {\n              if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1(\"pipeThrough\");\n              }\n              assertRequiredArgument(rawTransform, 1, \"pipeThrough\");\n              const transform = convertReadableWritablePair(rawTransform, \"First parameter\");\n              const options = convertPipeOptions(rawOptions, \"Second parameter\");\n              if (IsReadableStreamLocked(this)) {\n                throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream\");\n              }\n              if (IsWritableStreamLocked(transform.writable)) {\n                throw new TypeError(\"ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream\");\n              }\n              const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n              setPromiseIsHandledToTrue(promise);\n              return transform.readable;\n            }\n            pipeTo(destination, rawOptions = {}) {\n              if (!IsReadableStream(this)) {\n                return promiseRejectedWith(streamBrandCheckException$1(\"pipeTo\"));\n              }\n              if (destination === void 0) {\n                return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);\n              }\n              if (!IsWritableStream(destination)) {\n                return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));\n              }\n              let options;\n              try {\n                options = convertPipeOptions(rawOptions, \"Second parameter\");\n              } catch (e2) {\n                return promiseRejectedWith(e2);\n              }\n              if (IsReadableStreamLocked(this)) {\n                return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream\"));\n              }\n              if (IsWritableStreamLocked(destination)) {\n                return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream\"));\n              }\n              return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n            }\n            tee() {\n              if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1(\"tee\");\n              }\n              const branches = ReadableStreamTee(this);\n              return CreateArrayFromList(branches);\n            }\n            values(rawOptions = void 0) {\n              if (!IsReadableStream(this)) {\n                throw streamBrandCheckException$1(\"values\");\n              }\n              const options = convertIteratorOptions(rawOptions, \"First parameter\");\n              return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n            }\n          }\n          Object.defineProperties(ReadableStream2.prototype, {\n            cancel: { enumerable: true },\n            getReader: { enumerable: true },\n            pipeThrough: { enumerable: true },\n            pipeTo: { enumerable: true },\n            tee: { enumerable: true },\n            values: { enumerable: true },\n            locked: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.toStringTag, {\n              value: \"ReadableStream\",\n              configurable: true\n            });\n          }\n          if (typeof SymbolPolyfill.asyncIterator === \"symbol\") {\n            Object.defineProperty(ReadableStream2.prototype, SymbolPolyfill.asyncIterator, {\n              value: ReadableStream2.prototype.values,\n              writable: true,\n              configurable: true\n            });\n          }\n          function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {\n            const stream = Object.create(ReadableStream2.prototype);\n            InitializeReadableStream(stream);\n            const controller = Object.create(ReadableStreamDefaultController.prototype);\n            SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n            return stream;\n          }\n          function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n            const stream = Object.create(ReadableStream2.prototype);\n            InitializeReadableStream(stream);\n            const controller = Object.create(ReadableByteStreamController.prototype);\n            SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, void 0);\n            return stream;\n          }\n          function InitializeReadableStream(stream) {\n            stream._state = \"readable\";\n            stream._reader = void 0;\n            stream._storedError = void 0;\n            stream._disturbed = false;\n          }\n          function IsReadableStream(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_readableStreamController\")) {\n              return false;\n            }\n            return x2 instanceof ReadableStream2;\n          }\n          function IsReadableStreamLocked(stream) {\n            if (stream._reader === void 0) {\n              return false;\n            }\n            return true;\n          }\n          function ReadableStreamCancel(stream, reason) {\n            stream._disturbed = true;\n            if (stream._state === \"closed\") {\n              return promiseResolvedWith(void 0);\n            }\n            if (stream._state === \"errored\") {\n              return promiseRejectedWith(stream._storedError);\n            }\n            ReadableStreamClose(stream);\n            const reader = stream._reader;\n            if (reader !== void 0 && IsReadableStreamBYOBReader(reader)) {\n              reader._readIntoRequests.forEach((readIntoRequest) => {\n                readIntoRequest._closeSteps(void 0);\n              });\n              reader._readIntoRequests = new SimpleQueue();\n            }\n            const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n            return transformPromiseWith(sourceCancelPromise, noop2);\n          }\n          function ReadableStreamClose(stream) {\n            stream._state = \"closed\";\n            const reader = stream._reader;\n            if (reader === void 0) {\n              return;\n            }\n            defaultReaderClosedPromiseResolve(reader);\n            if (IsReadableStreamDefaultReader(reader)) {\n              reader._readRequests.forEach((readRequest) => {\n                readRequest._closeSteps();\n              });\n              reader._readRequests = new SimpleQueue();\n            }\n          }\n          function ReadableStreamError(stream, e2) {\n            stream._state = \"errored\";\n            stream._storedError = e2;\n            const reader = stream._reader;\n            if (reader === void 0) {\n              return;\n            }\n            defaultReaderClosedPromiseReject(reader, e2);\n            if (IsReadableStreamDefaultReader(reader)) {\n              reader._readRequests.forEach((readRequest) => {\n                readRequest._errorSteps(e2);\n              });\n              reader._readRequests = new SimpleQueue();\n            } else {\n              reader._readIntoRequests.forEach((readIntoRequest) => {\n                readIntoRequest._errorSteps(e2);\n              });\n              reader._readIntoRequests = new SimpleQueue();\n            }\n          }\n          function streamBrandCheckException$1(name) {\n            return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);\n          }\n          function convertQueuingStrategyInit(init, context) {\n            assertDictionary(init, context);\n            const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n            assertRequiredField(highWaterMark, \"highWaterMark\", \"QueuingStrategyInit\");\n            return {\n              highWaterMark: convertUnrestrictedDouble(highWaterMark)\n            };\n          }\n          const byteLengthSizeFunction = (chunk) => {\n            return chunk.byteLength;\n          };\n          try {\n            Object.defineProperty(byteLengthSizeFunction, \"name\", {\n              value: \"size\",\n              configurable: true\n            });\n          } catch (_a) {\n          }\n          class ByteLengthQueuingStrategy {\n            constructor(options) {\n              assertRequiredArgument(options, 1, \"ByteLengthQueuingStrategy\");\n              options = convertQueuingStrategyInit(options, \"First parameter\");\n              this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n            }\n            get highWaterMark() {\n              if (!IsByteLengthQueuingStrategy(this)) {\n                throw byteLengthBrandCheckException(\"highWaterMark\");\n              }\n              return this._byteLengthQueuingStrategyHighWaterMark;\n            }\n            get size() {\n              if (!IsByteLengthQueuingStrategy(this)) {\n                throw byteLengthBrandCheckException(\"size\");\n              }\n              return byteLengthSizeFunction;\n            }\n          }\n          Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n            highWaterMark: { enumerable: true },\n            size: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n              value: \"ByteLengthQueuingStrategy\",\n              configurable: true\n            });\n          }\n          function byteLengthBrandCheckException(name) {\n            return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);\n          }\n          function IsByteLengthQueuingStrategy(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_byteLengthQueuingStrategyHighWaterMark\")) {\n              return false;\n            }\n            return x2 instanceof ByteLengthQueuingStrategy;\n          }\n          const countSizeFunction = () => {\n            return 1;\n          };\n          try {\n            Object.defineProperty(countSizeFunction, \"name\", {\n              value: \"size\",\n              configurable: true\n            });\n          } catch (_a) {\n          }\n          class CountQueuingStrategy {\n            constructor(options) {\n              assertRequiredArgument(options, 1, \"CountQueuingStrategy\");\n              options = convertQueuingStrategyInit(options, \"First parameter\");\n              this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n            }\n            get highWaterMark() {\n              if (!IsCountQueuingStrategy(this)) {\n                throw countBrandCheckException(\"highWaterMark\");\n              }\n              return this._countQueuingStrategyHighWaterMark;\n            }\n            get size() {\n              if (!IsCountQueuingStrategy(this)) {\n                throw countBrandCheckException(\"size\");\n              }\n              return countSizeFunction;\n            }\n          }\n          Object.defineProperties(CountQueuingStrategy.prototype, {\n            highWaterMark: { enumerable: true },\n            size: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n              value: \"CountQueuingStrategy\",\n              configurable: true\n            });\n          }\n          function countBrandCheckException(name) {\n            return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);\n          }\n          function IsCountQueuingStrategy(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_countQueuingStrategyHighWaterMark\")) {\n              return false;\n            }\n            return x2 instanceof CountQueuingStrategy;\n          }\n          function convertTransformer(original, context) {\n            assertDictionary(original, context);\n            const flush = original === null || original === void 0 ? void 0 : original.flush;\n            const readableType = original === null || original === void 0 ? void 0 : original.readableType;\n            const start = original === null || original === void 0 ? void 0 : original.start;\n            const transform = original === null || original === void 0 ? void 0 : original.transform;\n            const writableType = original === null || original === void 0 ? void 0 : original.writableType;\n            return {\n              flush: flush === void 0 ? void 0 : convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),\n              readableType,\n              start: start === void 0 ? void 0 : convertTransformerStartCallback(start, original, `${context} has member 'start' that`),\n              transform: transform === void 0 ? void 0 : convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),\n              writableType\n            };\n          }\n          function convertTransformerFlushCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return (controller) => promiseCall(fn, original, [controller]);\n          }\n          function convertTransformerStartCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return (controller) => reflectCall(fn, original, [controller]);\n          }\n          function convertTransformerTransformCallback(fn, original, context) {\n            assertFunction(fn, context);\n            return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);\n          }\n          class TransformStream {\n            constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {\n              if (rawTransformer === void 0) {\n                rawTransformer = null;\n              }\n              const writableStrategy = convertQueuingStrategy(rawWritableStrategy, \"Second parameter\");\n              const readableStrategy = convertQueuingStrategy(rawReadableStrategy, \"Third parameter\");\n              const transformer = convertTransformer(rawTransformer, \"First parameter\");\n              if (transformer.readableType !== void 0) {\n                throw new RangeError(\"Invalid readableType specified\");\n              }\n              if (transformer.writableType !== void 0) {\n                throw new RangeError(\"Invalid writableType specified\");\n              }\n              const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n              const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n              const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n              const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n              let startPromise_resolve;\n              const startPromise = newPromise((resolve) => {\n                startPromise_resolve = resolve;\n              });\n              InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n              SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n              if (transformer.start !== void 0) {\n                startPromise_resolve(transformer.start(this._transformStreamController));\n              } else {\n                startPromise_resolve(void 0);\n              }\n            }\n            get readable() {\n              if (!IsTransformStream(this)) {\n                throw streamBrandCheckException(\"readable\");\n              }\n              return this._readable;\n            }\n            get writable() {\n              if (!IsTransformStream(this)) {\n                throw streamBrandCheckException(\"writable\");\n              }\n              return this._writable;\n            }\n          }\n          Object.defineProperties(TransformStream.prototype, {\n            readable: { enumerable: true },\n            writable: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n              value: \"TransformStream\",\n              configurable: true\n            });\n          }\n          function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n            function startAlgorithm() {\n              return startPromise;\n            }\n            function writeAlgorithm(chunk) {\n              return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n            }\n            function abortAlgorithm(reason) {\n              return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n            }\n            function closeAlgorithm() {\n              return TransformStreamDefaultSinkCloseAlgorithm(stream);\n            }\n            stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n            function pullAlgorithm() {\n              return TransformStreamDefaultSourcePullAlgorithm(stream);\n            }\n            function cancelAlgorithm(reason) {\n              TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n              return promiseResolvedWith(void 0);\n            }\n            stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n            stream._backpressure = void 0;\n            stream._backpressureChangePromise = void 0;\n            stream._backpressureChangePromise_resolve = void 0;\n            TransformStreamSetBackpressure(stream, true);\n            stream._transformStreamController = void 0;\n          }\n          function IsTransformStream(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_transformStreamController\")) {\n              return false;\n            }\n            return x2 instanceof TransformStream;\n          }\n          function TransformStreamError(stream, e2) {\n            ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e2);\n            TransformStreamErrorWritableAndUnblockWrite(stream, e2);\n          }\n          function TransformStreamErrorWritableAndUnblockWrite(stream, e2) {\n            TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n            WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e2);\n            if (stream._backpressure) {\n              TransformStreamSetBackpressure(stream, false);\n            }\n          }\n          function TransformStreamSetBackpressure(stream, backpressure) {\n            if (stream._backpressureChangePromise !== void 0) {\n              stream._backpressureChangePromise_resolve();\n            }\n            stream._backpressureChangePromise = newPromise((resolve) => {\n              stream._backpressureChangePromise_resolve = resolve;\n            });\n            stream._backpressure = backpressure;\n          }\n          class TransformStreamDefaultController {\n            constructor() {\n              throw new TypeError(\"Illegal constructor\");\n            }\n            get desiredSize() {\n              if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException(\"desiredSize\");\n              }\n              const readableController = this._controlledTransformStream._readable._readableStreamController;\n              return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n            }\n            enqueue(chunk = void 0) {\n              if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException(\"enqueue\");\n              }\n              TransformStreamDefaultControllerEnqueue(this, chunk);\n            }\n            error(reason = void 0) {\n              if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException(\"error\");\n              }\n              TransformStreamDefaultControllerError(this, reason);\n            }\n            terminate() {\n              if (!IsTransformStreamDefaultController(this)) {\n                throw defaultControllerBrandCheckException(\"terminate\");\n              }\n              TransformStreamDefaultControllerTerminate(this);\n            }\n          }\n          Object.defineProperties(TransformStreamDefaultController.prototype, {\n            enqueue: { enumerable: true },\n            error: { enumerable: true },\n            terminate: { enumerable: true },\n            desiredSize: { enumerable: true }\n          });\n          if (typeof SymbolPolyfill.toStringTag === \"symbol\") {\n            Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n              value: \"TransformStreamDefaultController\",\n              configurable: true\n            });\n          }\n          function IsTransformStreamDefaultController(x2) {\n            if (!typeIsObject(x2)) {\n              return false;\n            }\n            if (!Object.prototype.hasOwnProperty.call(x2, \"_controlledTransformStream\")) {\n              return false;\n            }\n            return x2 instanceof TransformStreamDefaultController;\n          }\n          function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n            controller._controlledTransformStream = stream;\n            stream._transformStreamController = controller;\n            controller._transformAlgorithm = transformAlgorithm;\n            controller._flushAlgorithm = flushAlgorithm;\n          }\n          function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n            const controller = Object.create(TransformStreamDefaultController.prototype);\n            let transformAlgorithm = (chunk) => {\n              try {\n                TransformStreamDefaultControllerEnqueue(controller, chunk);\n                return promiseResolvedWith(void 0);\n              } catch (transformResultE) {\n                return promiseRejectedWith(transformResultE);\n              }\n            };\n            let flushAlgorithm = () => promiseResolvedWith(void 0);\n            if (transformer.transform !== void 0) {\n              transformAlgorithm = (chunk) => transformer.transform(chunk, controller);\n            }\n            if (transformer.flush !== void 0) {\n              flushAlgorithm = () => transformer.flush(controller);\n            }\n            SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n          }\n          function TransformStreamDefaultControllerClearAlgorithms(controller) {\n            controller._transformAlgorithm = void 0;\n            controller._flushAlgorithm = void 0;\n          }\n          function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n            const stream = controller._controlledTransformStream;\n            const readableController = stream._readable._readableStreamController;\n            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n              throw new TypeError(\"Readable side is not in a state that permits enqueue\");\n            }\n            try {\n              ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n            } catch (e2) {\n              TransformStreamErrorWritableAndUnblockWrite(stream, e2);\n              throw stream._readable._storedError;\n            }\n            const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n            if (backpressure !== stream._backpressure) {\n              TransformStreamSetBackpressure(stream, true);\n            }\n          }\n          function TransformStreamDefaultControllerError(controller, e2) {\n            TransformStreamError(controller._controlledTransformStream, e2);\n          }\n          function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n            const transformPromise = controller._transformAlgorithm(chunk);\n            return transformPromiseWith(transformPromise, void 0, (r22) => {\n              TransformStreamError(controller._controlledTransformStream, r22);\n              throw r22;\n            });\n          }\n          function TransformStreamDefaultControllerTerminate(controller) {\n            const stream = controller._controlledTransformStream;\n            const readableController = stream._readable._readableStreamController;\n            ReadableStreamDefaultControllerClose(readableController);\n            const error = new TypeError(\"TransformStream terminated\");\n            TransformStreamErrorWritableAndUnblockWrite(stream, error);\n          }\n          function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n            const controller = stream._transformStreamController;\n            if (stream._backpressure) {\n              const backpressureChangePromise = stream._backpressureChangePromise;\n              return transformPromiseWith(backpressureChangePromise, () => {\n                const writable = stream._writable;\n                const state = writable._state;\n                if (state === \"erroring\") {\n                  throw writable._storedError;\n                }\n                return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n              });\n            }\n            return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n          }\n          function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n            TransformStreamError(stream, reason);\n            return promiseResolvedWith(void 0);\n          }\n          function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n            const readable = stream._readable;\n            const controller = stream._transformStreamController;\n            const flushPromise = controller._flushAlgorithm();\n            TransformStreamDefaultControllerClearAlgorithms(controller);\n            return transformPromiseWith(flushPromise, () => {\n              if (readable._state === \"errored\") {\n                throw readable._storedError;\n              }\n              ReadableStreamDefaultControllerClose(readable._readableStreamController);\n            }, (r22) => {\n              TransformStreamError(stream, r22);\n              throw readable._storedError;\n            });\n          }\n          function TransformStreamDefaultSourcePullAlgorithm(stream) {\n            TransformStreamSetBackpressure(stream, false);\n            return stream._backpressureChangePromise;\n          }\n          function defaultControllerBrandCheckException(name) {\n            return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);\n          }\n          function streamBrandCheckException(name) {\n            return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);\n          }\n          exports22.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n          exports22.CountQueuingStrategy = CountQueuingStrategy;\n          exports22.ReadableByteStreamController = ReadableByteStreamController;\n          exports22.ReadableStream = ReadableStream2;\n          exports22.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n          exports22.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n          exports22.ReadableStreamDefaultController = ReadableStreamDefaultController;\n          exports22.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n          exports22.TransformStream = TransformStream;\n          exports22.TransformStreamDefaultController = TransformStreamDefaultController;\n          exports22.WritableStream = WritableStream;\n          exports22.WritableStreamDefaultController = WritableStreamDefaultController;\n          exports22.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n          Object.defineProperty(exports22, \"__esModule\", { value: true });\n        });\n      }\n    });\n    var require_streams = __commonJS2({\n      \"node_modules/fetch-blob/streams.cjs\"() {\n        var POOL_SIZE2 = 65536;\n        if (!globalThis.ReadableStream) {\n          try {\n            const process2 = __webpack_require__(/*! process */ \"process\");\n            const { emitWarning } = process2;\n            try {\n              process2.emitWarning = () => {\n              };\n              Object.assign(globalThis, __webpack_require__(/*! stream/web */ \"stream/web\"));\n              process2.emitWarning = emitWarning;\n            } catch (error) {\n              process2.emitWarning = emitWarning;\n              throw error;\n            }\n          } catch (error) {\n            Object.assign(globalThis, require_ponyfill_es2018());\n          }\n        }\n        try {\n          const { Blob: Blob3 } = __webpack_require__(/*! buffer */ \"buffer\");\n          if (Blob3 && !Blob3.prototype.stream) {\n            Blob3.prototype.stream = function name(params) {\n              let position = 0;\n              const blob = this;\n              return new ReadableStream({\n                type: \"bytes\",\n                async pull(ctrl) {\n                  const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE2));\n                  const buffer = await chunk.arrayBuffer();\n                  position += buffer.byteLength;\n                  ctrl.enqueue(new Uint8Array(buffer));\n                  if (position === blob.size) {\n                    ctrl.close();\n                  }\n                }\n              });\n            };\n          }\n        } catch (error) {\n        }\n      }\n    });\n    async function* toIterator(parts, clone2 = true) {\n      for (const part of parts) {\n        if (\"stream\" in part) {\n          yield* part.stream();\n        } else if (ArrayBuffer.isView(part)) {\n          if (clone2) {\n            let position = part.byteOffset;\n            const end = part.byteOffset + part.byteLength;\n            while (position !== end) {\n              const size = Math.min(end - position, POOL_SIZE);\n              const chunk = part.buffer.slice(position, position + size);\n              position += chunk.byteLength;\n              yield new Uint8Array(chunk);\n            }\n          } else {\n            yield part;\n          }\n        } else {\n          let position = 0, b = part;\n          while (position !== b.size) {\n            const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));\n            const buffer = await chunk.arrayBuffer();\n            position += buffer.byteLength;\n            yield new Uint8Array(buffer);\n          }\n        }\n      }\n    }\n    var import_streams;\n    var POOL_SIZE;\n    var _Blob;\n    var Blob2;\n    var fetch_blob_default;\n    var init_fetch_blob = __esm({\n      \"node_modules/fetch-blob/index.js\"() {\n        import_streams = __toModule(require_streams());\n        POOL_SIZE = 65536;\n        _Blob = class Blob3 {\n          #parts = [];\n          #type = \"\";\n          #size = 0;\n          #endings = \"transparent\";\n          constructor(blobParts = [], options = {}) {\n            if (typeof blobParts !== \"object\" || blobParts === null) {\n              throw new TypeError(\"Failed to construct 'Blob': The provided value cannot be converted to a sequence.\");\n            }\n            if (typeof blobParts[Symbol.iterator] !== \"function\") {\n              throw new TypeError(\"Failed to construct 'Blob': The object must have a callable @@iterator property.\");\n            }\n            if (typeof options !== \"object\" && typeof options !== \"function\") {\n              throw new TypeError(\"Failed to construct 'Blob': parameter 2 cannot convert to dictionary.\");\n            }\n            if (options === null)\n              options = {};\n            const encoder = new TextEncoder();\n            for (const element of blobParts) {\n              let part;\n              if (ArrayBuffer.isView(element)) {\n                part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));\n              } else if (element instanceof ArrayBuffer) {\n                part = new Uint8Array(element.slice(0));\n              } else if (element instanceof Blob3) {\n                part = element;\n              } else {\n                part = encoder.encode(`${element}`);\n              }\n              this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size;\n              this.#parts.push(part);\n            }\n            this.#endings = `${options.endings === void 0 ? \"transparent\" : options.endings}`;\n            const type = options.type === void 0 ? \"\" : String(options.type);\n            this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : \"\";\n          }\n          get size() {\n            return this.#size;\n          }\n          get type() {\n            return this.#type;\n          }\n          async text() {\n            const decoder = new TextDecoder();\n            let str = \"\";\n            for await (const part of toIterator(this.#parts, false)) {\n              str += decoder.decode(part, { stream: true });\n            }\n            str += decoder.decode();\n            return str;\n          }\n          async arrayBuffer() {\n            const data = new Uint8Array(this.size);\n            let offset = 0;\n            for await (const chunk of toIterator(this.#parts, false)) {\n              data.set(chunk, offset);\n              offset += chunk.length;\n            }\n            return data.buffer;\n          }\n          stream() {\n            const it = toIterator(this.#parts, true);\n            return new globalThis.ReadableStream({\n              type: \"bytes\",\n              async pull(ctrl) {\n                const chunk = await it.next();\n                chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);\n              },\n              async cancel() {\n                await it.return();\n              }\n            });\n          }\n          slice(start = 0, end = this.size, type = \"\") {\n            const { size } = this;\n            let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n            let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n            const span = Math.max(relativeEnd - relativeStart, 0);\n            const parts = this.#parts;\n            const blobParts = [];\n            let added = 0;\n            for (const part of parts) {\n              if (added >= span) {\n                break;\n              }\n              const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n              if (relativeStart && size2 <= relativeStart) {\n                relativeStart -= size2;\n                relativeEnd -= size2;\n              } else {\n                let chunk;\n                if (ArrayBuffer.isView(part)) {\n                  chunk = part.subarray(relativeStart, Math.min(size2, relativeEnd));\n                  added += chunk.byteLength;\n                } else {\n                  chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));\n                  added += chunk.size;\n                }\n                relativeEnd -= size2;\n                blobParts.push(chunk);\n                relativeStart = 0;\n              }\n            }\n            const blob = new Blob3([], { type: String(type).toLowerCase() });\n            blob.#size = span;\n            blob.#parts = blobParts;\n            return blob;\n          }\n          get [Symbol.toStringTag]() {\n            return \"Blob\";\n          }\n          static [Symbol.hasInstance](object) {\n            return object && typeof object === \"object\" && typeof object.constructor === \"function\" && (typeof object.stream === \"function\" || typeof object.arrayBuffer === \"function\") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n          }\n        };\n        Object.defineProperties(_Blob.prototype, {\n          size: { enumerable: true },\n          type: { enumerable: true },\n          slice: { enumerable: true }\n        });\n        Blob2 = _Blob;\n        fetch_blob_default = Blob2;\n      }\n    });\n    var _File;\n    var File2;\n    var file_default;\n    var init_file = __esm({\n      \"node_modules/fetch-blob/file.js\"() {\n        init_fetch_blob();\n        _File = class File extends fetch_blob_default {\n          #lastModified = 0;\n          #name = \"\";\n          constructor(fileBits, fileName, options = {}) {\n            if (arguments.length < 2) {\n              throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);\n            }\n            super(fileBits, options);\n            if (options === null)\n              options = {};\n            const lastModified = options.lastModified === void 0 ? Date.now() : Number(options.lastModified);\n            if (!Number.isNaN(lastModified)) {\n              this.#lastModified = lastModified;\n            }\n            this.#name = String(fileName);\n          }\n          get name() {\n            return this.#name;\n          }\n          get lastModified() {\n            return this.#lastModified;\n          }\n          get [Symbol.toStringTag]() {\n            return \"File\";\n          }\n          static [Symbol.hasInstance](object) {\n            return !!object && object instanceof fetch_blob_default && /^(File)$/.test(object[Symbol.toStringTag]);\n          }\n        };\n        File2 = _File;\n        file_default = File2;\n      }\n    });\n    function formDataToBlob(F2, B = fetch_blob_default) {\n      var b = `${r2()}${r2()}`.replace(/\\./g, \"\").slice(-28).padStart(32, \"-\"), c = [], p = `--${b}\\r\nContent-Disposition: form-data; name=\"`;\n      F2.forEach((v, n) => typeof v == \"string\" ? c.push(p + e(n) + `\"\\r\n\\r\n${v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, \"\\r\\n\")}\\r\n`) : c.push(p + e(n) + `\"; filename=\"${e(v.name, 1)}\"\\r\nContent-Type: ${v.type || \"application/octet-stream\"}\\r\n\\r\n`, v, \"\\r\\n\"));\n      c.push(`--${b}--`);\n      return new B(c, { type: \"multipart/form-data; boundary=\" + b });\n    }\n    var t;\n    var i;\n    var h;\n    var r2;\n    var m;\n    var f;\n    var e;\n    var x;\n    var FormData;\n    var init_esm_min = __esm({\n      \"node_modules/formdata-polyfill/esm.min.js\"() {\n        init_fetch_blob();\n        init_file();\n        ({ toStringTag: t, iterator: i, hasInstance: h } = Symbol);\n        r2 = Math.random;\n        m = \"append,set,get,getAll,delete,keys,values,entries,forEach,constructor\".split(\",\");\n        f = (a, b, c) => (a += \"\", /^(Blob|File)$/.test(b && b[t]) ? [(c = c !== void 0 ? c + \"\" : b[t] == \"File\" ? b.name : \"blob\", a), b.name !== c || b[t] == \"blob\" ? new file_default([b], c, b) : b] : [a, b + \"\"]);\n        e = (c, f3) => (f3 ? c : c.replace(/\\r?\\n|\\r/g, \"\\r\\n\")).replace(/\\n/g, \"%0A\").replace(/\\r/g, \"%0D\").replace(/\"/g, \"%22\");\n        x = (n, a, e2) => {\n          if (a.length < e2) {\n            throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e2} arguments required, but only ${a.length} present.`);\n          }\n        };\n        FormData = class FormData2 {\n          #d = [];\n          constructor(...a) {\n            if (a.length)\n              throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`);\n          }\n          get [t]() {\n            return \"FormData\";\n          }\n          [i]() {\n            return this.entries();\n          }\n          static [h](o) {\n            return o && typeof o === \"object\" && o[t] === \"FormData\" && !m.some((m2) => typeof o[m2] != \"function\");\n          }\n          append(...a) {\n            x(\"append\", arguments, 2);\n            this.#d.push(f(...a));\n          }\n          delete(a) {\n            x(\"delete\", arguments, 1);\n            a += \"\";\n            this.#d = this.#d.filter(([b]) => b !== a);\n          }\n          get(a) {\n            x(\"get\", arguments, 1);\n            a += \"\";\n            for (var b = this.#d, l = b.length, c = 0; c < l; c++)\n              if (b[c][0] === a)\n                return b[c][1];\n            return null;\n          }\n          getAll(a, b) {\n            x(\"getAll\", arguments, 1);\n            b = [];\n            a += \"\";\n            this.#d.forEach((c) => c[0] === a && b.push(c[1]));\n            return b;\n          }\n          has(a) {\n            x(\"has\", arguments, 1);\n            a += \"\";\n            return this.#d.some((b) => b[0] === a);\n          }\n          forEach(a, b) {\n            x(\"forEach\", arguments, 1);\n            for (var [c, d] of this)\n              a.call(b, d, c, this);\n          }\n          set(...a) {\n            x(\"set\", arguments, 2);\n            var b = [], c = true;\n            a = f(...a);\n            this.#d.forEach((d) => {\n              d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);\n            });\n            c && b.push(a);\n            this.#d = b;\n          }\n          *entries() {\n            yield* this.#d;\n          }\n          *keys() {\n            for (var [a] of this)\n              yield a;\n          }\n          *values() {\n            for (var [, a] of this)\n              yield a;\n          }\n        };\n      }\n    });\n    var require_node_domexception = __commonJS2({\n      \"node_modules/node-domexception/index.js\"(exports3, module22) {\n        if (!globalThis.DOMException) {\n          try {\n            const { MessageChannel } = __webpack_require__(/*! worker_threads */ \"worker_threads\"), port = new MessageChannel().port1, ab = new ArrayBuffer();\n            port.postMessage(ab, [ab, ab]);\n          } catch (err) {\n            err.constructor.name === \"DOMException\" && (globalThis.DOMException = err.constructor);\n          }\n        }\n        module22.exports = globalThis.DOMException;\n      }\n    });\n    var import_node_fs;\n    var import_node_path;\n    var import_node_domexception;\n    var stat;\n    var blobFromSync;\n    var blobFrom;\n    var fileFrom;\n    var fileFromSync;\n    var fromBlob;\n    var fromFile;\n    var BlobDataItem;\n    var init_from = __esm({\n      \"node_modules/fetch-blob/from.js\"() {\n        import_node_fs = __toModule(__webpack_require__(/*! fs */ \"fs\"));\n        import_node_path = __toModule(__webpack_require__(/*! path */ \"path\"));\n        import_node_domexception = __toModule(require_node_domexception());\n        init_file();\n        init_fetch_blob();\n        ({ stat } = import_node_fs.promises);\n        blobFromSync = (path, type) => fromBlob((0, import_node_fs.statSync)(path), path, type);\n        blobFrom = (path, type) => stat(path).then((stat2) => fromBlob(stat2, path, type));\n        fileFrom = (path, type) => stat(path).then((stat2) => fromFile(stat2, path, type));\n        fileFromSync = (path, type) => fromFile((0, import_node_fs.statSync)(path), path, type);\n        fromBlob = (stat2, path, type = \"\") => new fetch_blob_default([new BlobDataItem({\n          path,\n          size: stat2.size,\n          lastModified: stat2.mtimeMs,\n          start: 0\n        })], { type });\n        fromFile = (stat2, path, type = \"\") => new file_default([new BlobDataItem({\n          path,\n          size: stat2.size,\n          lastModified: stat2.mtimeMs,\n          start: 0\n        })], (0, import_node_path.basename)(path), { type, lastModified: stat2.mtimeMs });\n        BlobDataItem = class {\n          #path;\n          #start;\n          constructor(options) {\n            this.#path = options.path;\n            this.#start = options.start;\n            this.size = options.size;\n            this.lastModified = options.lastModified;\n          }\n          slice(start, end) {\n            return new BlobDataItem({\n              path: this.#path,\n              lastModified: this.lastModified,\n              size: end - start,\n              start: this.#start + start\n            });\n          }\n          async *stream() {\n            const { mtimeMs } = await stat(this.#path);\n            if (mtimeMs > this.lastModified) {\n              throw new import_node_domexception.default(\"The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.\", \"NotReadableError\");\n            }\n            yield* (0, import_node_fs.createReadStream)(this.#path, {\n              start: this.#start,\n              end: this.#start + this.size - 1\n            });\n          }\n          get [Symbol.toStringTag]() {\n            return \"Blob\";\n          }\n        };\n      }\n    });\n    var multipart_parser_exports = {};\n    __export(multipart_parser_exports, {\n      toFormData: () => toFormData\n    });\n    function _fileName(headerValue) {\n      const m2 = headerValue.match(/\\bfilename=(\"(.*?)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))($|;\\s)/i);\n      if (!m2) {\n        return;\n      }\n      const match = m2[2] || m2[3] || \"\";\n      let filename = match.slice(match.lastIndexOf(\"\\\\\") + 1);\n      filename = filename.replace(/%22/g, '\"');\n      filename = filename.replace(/&#(\\d{4});/g, (m3, code) => {\n        return String.fromCharCode(code);\n      });\n      return filename;\n    }\n    async function toFormData(Body2, ct) {\n      if (!/multipart/i.test(ct)) {\n        throw new TypeError(\"Failed to fetch\");\n      }\n      const m2 = ct.match(/boundary=(?:\"([^\"]+)\"|([^;]+))/i);\n      if (!m2) {\n        throw new TypeError(\"no or bad content-type header, no multipart boundary\");\n      }\n      const parser = new MultipartParser(m2[1] || m2[2]);\n      let headerField;\n      let headerValue;\n      let entryValue;\n      let entryName;\n      let contentType;\n      let filename;\n      const entryChunks = [];\n      const formData = new FormData();\n      const onPartData = (ui8a) => {\n        entryValue += decoder.decode(ui8a, { stream: true });\n      };\n      const appendToFile = (ui8a) => {\n        entryChunks.push(ui8a);\n      };\n      const appendFileToFormData = () => {\n        const file = new file_default(entryChunks, filename, { type: contentType });\n        formData.append(entryName, file);\n      };\n      const appendEntryToFormData = () => {\n        formData.append(entryName, entryValue);\n      };\n      const decoder = new TextDecoder(\"utf-8\");\n      decoder.decode();\n      parser.onPartBegin = function() {\n        parser.onPartData = onPartData;\n        parser.onPartEnd = appendEntryToFormData;\n        headerField = \"\";\n        headerValue = \"\";\n        entryValue = \"\";\n        entryName = \"\";\n        contentType = \"\";\n        filename = null;\n        entryChunks.length = 0;\n      };\n      parser.onHeaderField = function(ui8a) {\n        headerField += decoder.decode(ui8a, { stream: true });\n      };\n      parser.onHeaderValue = function(ui8a) {\n        headerValue += decoder.decode(ui8a, { stream: true });\n      };\n      parser.onHeaderEnd = function() {\n        headerValue += decoder.decode();\n        headerField = headerField.toLowerCase();\n        if (headerField === \"content-disposition\") {\n          const m3 = headerValue.match(/\\bname=(\"([^\"]*)\"|([^()<>@,;:\\\\\"/[\\]?={}\\s\\t]+))/i);\n          if (m3) {\n            entryName = m3[2] || m3[3] || \"\";\n          }\n          filename = _fileName(headerValue);\n          if (filename) {\n            parser.onPartData = appendToFile;\n            parser.onPartEnd = appendFileToFormData;\n          }\n        } else if (headerField === \"content-type\") {\n          contentType = headerValue;\n        }\n        headerValue = \"\";\n        headerField = \"\";\n      };\n      for await (const chunk of Body2) {\n        parser.write(chunk);\n      }\n      parser.end();\n      return formData;\n    }\n    var s;\n    var S;\n    var f2;\n    var F;\n    var LF;\n    var CR;\n    var SPACE;\n    var HYPHEN;\n    var COLON;\n    var A;\n    var Z;\n    var lower;\n    var noop;\n    var MultipartParser;\n    var init_multipart_parser = __esm({\n      \"node_modules/node-fetch/src/utils/multipart-parser.js\"() {\n        init_from();\n        init_esm_min();\n        s = 0;\n        S = {\n          START_BOUNDARY: s++,\n          HEADER_FIELD_START: s++,\n          HEADER_FIELD: s++,\n          HEADER_VALUE_START: s++,\n          HEADER_VALUE: s++,\n          HEADER_VALUE_ALMOST_DONE: s++,\n          HEADERS_ALMOST_DONE: s++,\n          PART_DATA_START: s++,\n          PART_DATA: s++,\n          END: s++\n        };\n        f2 = 1;\n        F = {\n          PART_BOUNDARY: f2,\n          LAST_BOUNDARY: f2 *= 2\n        };\n        LF = 10;\n        CR = 13;\n        SPACE = 32;\n        HYPHEN = 45;\n        COLON = 58;\n        A = 97;\n        Z = 122;\n        lower = (c) => c | 32;\n        noop = () => {\n        };\n        MultipartParser = class {\n          constructor(boundary) {\n            this.index = 0;\n            this.flags = 0;\n            this.onHeaderEnd = noop;\n            this.onHeaderField = noop;\n            this.onHeadersEnd = noop;\n            this.onHeaderValue = noop;\n            this.onPartBegin = noop;\n            this.onPartData = noop;\n            this.onPartEnd = noop;\n            this.boundaryChars = {};\n            boundary = \"\\r\\n--\" + boundary;\n            const ui8a = new Uint8Array(boundary.length);\n            for (let i2 = 0; i2 < boundary.length; i2++) {\n              ui8a[i2] = boundary.charCodeAt(i2);\n              this.boundaryChars[ui8a[i2]] = true;\n            }\n            this.boundary = ui8a;\n            this.lookbehind = new Uint8Array(this.boundary.length + 8);\n            this.state = S.START_BOUNDARY;\n          }\n          write(data) {\n            let i2 = 0;\n            const length_ = data.length;\n            let previousIndex = this.index;\n            let { lookbehind, boundary, boundaryChars, index, state, flags } = this;\n            const boundaryLength = this.boundary.length;\n            const boundaryEnd = boundaryLength - 1;\n            const bufferLength = data.length;\n            let c;\n            let cl;\n            const mark = (name) => {\n              this[name + \"Mark\"] = i2;\n            };\n            const clear = (name) => {\n              delete this[name + \"Mark\"];\n            };\n            const callback = (callbackSymbol, start, end, ui8a) => {\n              if (start === void 0 || start !== end) {\n                this[callbackSymbol](ui8a && ui8a.subarray(start, end));\n              }\n            };\n            const dataCallback = (name, clear2) => {\n              const markSymbol = name + \"Mark\";\n              if (!(markSymbol in this)) {\n                return;\n              }\n              if (clear2) {\n                callback(name, this[markSymbol], i2, data);\n                delete this[markSymbol];\n              } else {\n                callback(name, this[markSymbol], data.length, data);\n                this[markSymbol] = 0;\n              }\n            };\n            for (i2 = 0; i2 < length_; i2++) {\n              c = data[i2];\n              switch (state) {\n                case S.START_BOUNDARY:\n                  if (index === boundary.length - 2) {\n                    if (c === HYPHEN) {\n                      flags |= F.LAST_BOUNDARY;\n                    } else if (c !== CR) {\n                      return;\n                    }\n                    index++;\n                    break;\n                  } else if (index - 1 === boundary.length - 2) {\n                    if (flags & F.LAST_BOUNDARY && c === HYPHEN) {\n                      state = S.END;\n                      flags = 0;\n                    } else if (!(flags & F.LAST_BOUNDARY) && c === LF) {\n                      index = 0;\n                      callback(\"onPartBegin\");\n                      state = S.HEADER_FIELD_START;\n                    } else {\n                      return;\n                    }\n                    break;\n                  }\n                  if (c !== boundary[index + 2]) {\n                    index = -2;\n                  }\n                  if (c === boundary[index + 2]) {\n                    index++;\n                  }\n                  break;\n                case S.HEADER_FIELD_START:\n                  state = S.HEADER_FIELD;\n                  mark(\"onHeaderField\");\n                  index = 0;\n                case S.HEADER_FIELD:\n                  if (c === CR) {\n                    clear(\"onHeaderField\");\n                    state = S.HEADERS_ALMOST_DONE;\n                    break;\n                  }\n                  index++;\n                  if (c === HYPHEN) {\n                    break;\n                  }\n                  if (c === COLON) {\n                    if (index === 1) {\n                      return;\n                    }\n                    dataCallback(\"onHeaderField\", true);\n                    state = S.HEADER_VALUE_START;\n                    break;\n                  }\n                  cl = lower(c);\n                  if (cl < A || cl > Z) {\n                    return;\n                  }\n                  break;\n                case S.HEADER_VALUE_START:\n                  if (c === SPACE) {\n                    break;\n                  }\n                  mark(\"onHeaderValue\");\n                  state = S.HEADER_VALUE;\n                case S.HEADER_VALUE:\n                  if (c === CR) {\n                    dataCallback(\"onHeaderValue\", true);\n                    callback(\"onHeaderEnd\");\n                    state = S.HEADER_VALUE_ALMOST_DONE;\n                  }\n                  break;\n                case S.HEADER_VALUE_ALMOST_DONE:\n                  if (c !== LF) {\n                    return;\n                  }\n                  state = S.HEADER_FIELD_START;\n                  break;\n                case S.HEADERS_ALMOST_DONE:\n                  if (c !== LF) {\n                    return;\n                  }\n                  callback(\"onHeadersEnd\");\n                  state = S.PART_DATA_START;\n                  break;\n                case S.PART_DATA_START:\n                  state = S.PART_DATA;\n                  mark(\"onPartData\");\n                case S.PART_DATA:\n                  previousIndex = index;\n                  if (index === 0) {\n                    i2 += boundaryEnd;\n                    while (i2 < bufferLength && !(data[i2] in boundaryChars)) {\n                      i2 += boundaryLength;\n                    }\n                    i2 -= boundaryEnd;\n                    c = data[i2];\n                  }\n                  if (index < boundary.length) {\n                    if (boundary[index] === c) {\n                      if (index === 0) {\n                        dataCallback(\"onPartData\", true);\n                      }\n                      index++;\n                    } else {\n                      index = 0;\n                    }\n                  } else if (index === boundary.length) {\n                    index++;\n                    if (c === CR) {\n                      flags |= F.PART_BOUNDARY;\n                    } else if (c === HYPHEN) {\n                      flags |= F.LAST_BOUNDARY;\n                    } else {\n                      index = 0;\n                    }\n                  } else if (index - 1 === boundary.length) {\n                    if (flags & F.PART_BOUNDARY) {\n                      index = 0;\n                      if (c === LF) {\n                        flags &= ~F.PART_BOUNDARY;\n                        callback(\"onPartEnd\");\n                        callback(\"onPartBegin\");\n                        state = S.HEADER_FIELD_START;\n                        break;\n                      }\n                    } else if (flags & F.LAST_BOUNDARY) {\n                      if (c === HYPHEN) {\n                        callback(\"onPartEnd\");\n                        state = S.END;\n                        flags = 0;\n                      } else {\n                        index = 0;\n                      }\n                    } else {\n                      index = 0;\n                    }\n                  }\n                  if (index > 0) {\n                    lookbehind[index - 1] = c;\n                  } else if (previousIndex > 0) {\n                    const _lookbehind = new Uint8Array(lookbehind.buffer, lookbehind.byteOffset, lookbehind.byteLength);\n                    callback(\"onPartData\", 0, previousIndex, _lookbehind);\n                    previousIndex = 0;\n                    mark(\"onPartData\");\n                    i2--;\n                  }\n                  break;\n                case S.END:\n                  break;\n                default:\n                  throw new Error(`Unexpected state entered: ${state}`);\n              }\n            }\n            dataCallback(\"onHeaderField\");\n            dataCallback(\"onHeaderValue\");\n            dataCallback(\"onPartData\");\n            this.index = index;\n            this.state = state;\n            this.flags = flags;\n          }\n          end() {\n            if (this.state === S.HEADER_FIELD_START && this.index === 0 || this.state === S.PART_DATA && this.index === this.boundary.length) {\n              this.onPartEnd();\n            } else if (this.state !== S.END) {\n              throw new Error(\"MultipartParser.end(): stream ended unexpectedly\");\n            }\n          }\n        };\n      }\n    });\n    __export(exports2, {\n      AbortError: () => AbortError,\n      Blob: () => Blob2,\n      FetchError: () => FetchError,\n      File: () => file_default,\n      FormData: () => FormData,\n      Headers: () => Headers,\n      Request: () => Request,\n      Response: () => Response,\n      blobFrom: () => blobFrom,\n      blobFromSync: () => blobFromSync,\n      default: () => fetch,\n      fileFrom: () => fileFrom,\n      fileFromSync: () => fileFromSync,\n      isRedirect: () => isRedirect\n    });\n    var import_node_http2 = __toModule(__webpack_require__(/*! http */ \"http\"));\n    var import_node_https = __toModule(__webpack_require__(/*! https */ \"https\"));\n    var import_node_zlib = __toModule(__webpack_require__(/*! zlib */ \"zlib\"));\n    var import_node_stream2 = __toModule(__webpack_require__(/*! stream */ \"stream\"));\n    var import_node_buffer2 = __toModule(__webpack_require__(/*! buffer */ \"buffer\"));\n    function dataUriToBuffer(uri) {\n      if (!/^data:/i.test(uri)) {\n        throw new TypeError('`uri` does not appear to be a Data URI (must begin with \"data:\")');\n      }\n      uri = uri.replace(/\\r?\\n/g, \"\");\n      const firstComma = uri.indexOf(\",\");\n      if (firstComma === -1 || firstComma <= 4) {\n        throw new TypeError(\"malformed data: URI\");\n      }\n      const meta = uri.substring(5, firstComma).split(\";\");\n      let charset = \"\";\n      let base64 = false;\n      const type = meta[0] || \"text/plain\";\n      let typeFull = type;\n      for (let i2 = 1; i2 < meta.length; i2++) {\n        if (meta[i2] === \"base64\") {\n          base64 = true;\n        } else if (meta[i2]) {\n          typeFull += `;${meta[i2]}`;\n          if (meta[i2].indexOf(\"charset=\") === 0) {\n            charset = meta[i2].substring(8);\n          }\n        }\n      }\n      if (!meta[0] && !charset.length) {\n        typeFull += \";charset=US-ASCII\";\n        charset = \"US-ASCII\";\n      }\n      const encoding = base64 ? \"base64\" : \"ascii\";\n      const data = unescape(uri.substring(firstComma + 1));\n      const buffer = Buffer.from(data, encoding);\n      buffer.type = type;\n      buffer.typeFull = typeFull;\n      buffer.charset = charset;\n      return buffer;\n    }\n    var dist_default = dataUriToBuffer;\n    var import_node_stream = __toModule(__webpack_require__(/*! stream */ \"stream\"));\n    var import_node_util = __toModule(__webpack_require__(/*! util */ \"util\"));\n    var import_node_buffer = __toModule(__webpack_require__(/*! buffer */ \"buffer\"));\n    init_fetch_blob();\n    init_esm_min();\n    var FetchBaseError = class extends Error {\n      constructor(message, type) {\n        super(message);\n        Error.captureStackTrace(this, this.constructor);\n        this.type = type;\n      }\n      get name() {\n        return this.constructor.name;\n      }\n      get [Symbol.toStringTag]() {\n        return this.constructor.name;\n      }\n    };\n    var FetchError = class extends FetchBaseError {\n      constructor(message, type, systemError) {\n        super(message, type);\n        if (systemError) {\n          this.code = this.errno = systemError.code;\n          this.erroredSysCall = systemError.syscall;\n        }\n      }\n    };\n    var NAME = Symbol.toStringTag;\n    var isURLSearchParameters = (object) => {\n      return typeof object === \"object\" && typeof object.append === \"function\" && typeof object.delete === \"function\" && typeof object.get === \"function\" && typeof object.getAll === \"function\" && typeof object.has === \"function\" && typeof object.set === \"function\" && typeof object.sort === \"function\" && object[NAME] === \"URLSearchParams\";\n    };\n    var isBlob = (object) => {\n      return object && typeof object === \"object\" && typeof object.arrayBuffer === \"function\" && typeof object.type === \"string\" && typeof object.stream === \"function\" && typeof object.constructor === \"function\" && /^(Blob|File)$/.test(object[NAME]);\n    };\n    var isAbortSignal = (object) => {\n      return typeof object === \"object\" && (object[NAME] === \"AbortSignal\" || object[NAME] === \"EventTarget\");\n    };\n    var isDomainOrSubdomain = (destination, original) => {\n      const orig = new URL(original).hostname;\n      const dest = new URL(destination).hostname;\n      return orig === dest || orig.endsWith(`.${dest}`);\n    };\n    var isSameProtocol = (destination, original) => {\n      const orig = new URL(original).protocol;\n      const dest = new URL(destination).protocol;\n      return orig === dest;\n    };\n    var pipeline = (0, import_node_util.promisify)(import_node_stream.default.pipeline);\n    var INTERNALS = Symbol(\"Body internals\");\n    var Body = class {\n      constructor(body, {\n        size = 0\n      } = {}) {\n        let boundary = null;\n        if (body === null) {\n          body = null;\n        } else if (isURLSearchParameters(body)) {\n          body = import_node_buffer.Buffer.from(body.toString());\n        } else if (isBlob(body)) {\n        } else if (import_node_buffer.Buffer.isBuffer(body)) {\n        } else if (import_node_util.types.isAnyArrayBuffer(body)) {\n          body = import_node_buffer.Buffer.from(body);\n        } else if (ArrayBuffer.isView(body)) {\n          body = import_node_buffer.Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n        } else if (body instanceof import_node_stream.default) {\n        } else if (body instanceof FormData) {\n          body = formDataToBlob(body);\n          boundary = body.type.split(\"=\")[1];\n        } else {\n          body = import_node_buffer.Buffer.from(String(body));\n        }\n        let stream = body;\n        if (import_node_buffer.Buffer.isBuffer(body)) {\n          stream = import_node_stream.default.Readable.from(body);\n        } else if (isBlob(body)) {\n          stream = import_node_stream.default.Readable.from(body.stream());\n        }\n        this[INTERNALS] = {\n          body,\n          stream,\n          boundary,\n          disturbed: false,\n          error: null\n        };\n        this.size = size;\n        if (body instanceof import_node_stream.default) {\n          body.on(\"error\", (error_) => {\n            const error = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, \"system\", error_);\n            this[INTERNALS].error = error;\n          });\n        }\n      }\n      get body() {\n        return this[INTERNALS].stream;\n      }\n      get bodyUsed() {\n        return this[INTERNALS].disturbed;\n      }\n      async arrayBuffer() {\n        const { buffer, byteOffset, byteLength } = await consumeBody(this);\n        return buffer.slice(byteOffset, byteOffset + byteLength);\n      }\n      async formData() {\n        const ct = this.headers.get(\"content-type\");\n        if (ct.startsWith(\"application/x-www-form-urlencoded\")) {\n          const formData = new FormData();\n          const parameters = new URLSearchParams(await this.text());\n          for (const [name, value] of parameters) {\n            formData.append(name, value);\n          }\n          return formData;\n        }\n        const { toFormData: toFormData2 } = await Promise.resolve().then(() => (init_multipart_parser(), multipart_parser_exports));\n        return toFormData2(this.body, ct);\n      }\n      async blob() {\n        const ct = this.headers && this.headers.get(\"content-type\") || this[INTERNALS].body && this[INTERNALS].body.type || \"\";\n        const buf = await this.arrayBuffer();\n        return new fetch_blob_default([buf], {\n          type: ct\n        });\n      }\n      async json() {\n        const text = await this.text();\n        return JSON.parse(text);\n      }\n      async text() {\n        const buffer = await consumeBody(this);\n        return new TextDecoder().decode(buffer);\n      }\n      buffer() {\n        return consumeBody(this);\n      }\n    };\n    Body.prototype.buffer = (0, import_node_util.deprecate)(Body.prototype.buffer, \"Please use 'response.arrayBuffer()' instead of 'response.buffer()'\", \"node-fetch#buffer\");\n    Object.defineProperties(Body.prototype, {\n      body: { enumerable: true },\n      bodyUsed: { enumerable: true },\n      arrayBuffer: { enumerable: true },\n      blob: { enumerable: true },\n      json: { enumerable: true },\n      text: { enumerable: true },\n      data: { get: (0, import_node_util.deprecate)(() => {\n      }, \"data doesn't exist, use json(), text(), arrayBuffer(), or body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (response)\") }\n    });\n    async function consumeBody(data) {\n      if (data[INTERNALS].disturbed) {\n        throw new TypeError(`body used already for: ${data.url}`);\n      }\n      data[INTERNALS].disturbed = true;\n      if (data[INTERNALS].error) {\n        throw data[INTERNALS].error;\n      }\n      const { body } = data;\n      if (body === null) {\n        return import_node_buffer.Buffer.alloc(0);\n      }\n      if (!(body instanceof import_node_stream.default)) {\n        return import_node_buffer.Buffer.alloc(0);\n      }\n      const accum = [];\n      let accumBytes = 0;\n      try {\n        for await (const chunk of body) {\n          if (data.size > 0 && accumBytes + chunk.length > data.size) {\n            const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, \"max-size\");\n            body.destroy(error);\n            throw error;\n          }\n          accumBytes += chunk.length;\n          accum.push(chunk);\n        }\n      } catch (error) {\n        const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, \"system\", error);\n        throw error_;\n      }\n      if (body.readableEnded === true || body._readableState.ended === true) {\n        try {\n          if (accum.every((c) => typeof c === \"string\")) {\n            return import_node_buffer.Buffer.from(accum.join(\"\"));\n          }\n          return import_node_buffer.Buffer.concat(accum, accumBytes);\n        } catch (error) {\n          throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, \"system\", error);\n        }\n      } else {\n        throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);\n      }\n    }\n    var clone = (instance, highWaterMark) => {\n      let p1;\n      let p2;\n      let { body } = instance[INTERNALS];\n      if (instance.bodyUsed) {\n        throw new Error(\"cannot clone body after it is used\");\n      }\n      if (body instanceof import_node_stream.default && typeof body.getBoundary !== \"function\") {\n        p1 = new import_node_stream.PassThrough({ highWaterMark });\n        p2 = new import_node_stream.PassThrough({ highWaterMark });\n        body.pipe(p1);\n        body.pipe(p2);\n        instance[INTERNALS].stream = p1;\n        body = p2;\n      }\n      return body;\n    };\n    var getNonSpecFormDataBoundary = (0, import_node_util.deprecate)((body) => body.getBoundary(), \"form-data doesn't follow the spec and requires special treatment. Use alternative package\", \"https://github.com/node-fetch/node-fetch/issues/1167\");\n    var extractContentType = (body, request) => {\n      if (body === null) {\n        return null;\n      }\n      if (typeof body === \"string\") {\n        return \"text/plain;charset=UTF-8\";\n      }\n      if (isURLSearchParameters(body)) {\n        return \"application/x-www-form-urlencoded;charset=UTF-8\";\n      }\n      if (isBlob(body)) {\n        return body.type || null;\n      }\n      if (import_node_buffer.Buffer.isBuffer(body) || import_node_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n        return null;\n      }\n      if (body instanceof FormData) {\n        return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;\n      }\n      if (body && typeof body.getBoundary === \"function\") {\n        return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;\n      }\n      if (body instanceof import_node_stream.default) {\n        return null;\n      }\n      return \"text/plain;charset=UTF-8\";\n    };\n    var getTotalBytes = (request) => {\n      const { body } = request[INTERNALS];\n      if (body === null) {\n        return 0;\n      }\n      if (isBlob(body)) {\n        return body.size;\n      }\n      if (import_node_buffer.Buffer.isBuffer(body)) {\n        return body.length;\n      }\n      if (body && typeof body.getLengthSync === \"function\") {\n        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n      }\n      return null;\n    };\n    var writeToStream = async (dest, { body }) => {\n      if (body === null) {\n        dest.end();\n      } else {\n        await pipeline(body, dest);\n      }\n    };\n    var import_node_util2 = __toModule(__webpack_require__(/*! util */ \"util\"));\n    var import_node_http = __toModule(__webpack_require__(/*! http */ \"http\"));\n    var validateHeaderName = typeof import_node_http.default.validateHeaderName === \"function\" ? import_node_http.default.validateHeaderName : (name) => {\n      if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n        const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);\n        Object.defineProperty(error, \"code\", { value: \"ERR_INVALID_HTTP_TOKEN\" });\n        throw error;\n      }\n    };\n    var validateHeaderValue = typeof import_node_http.default.validateHeaderValue === \"function\" ? import_node_http.default.validateHeaderValue : (name, value) => {\n      if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n        const error = new TypeError(`Invalid character in header content [\"${name}\"]`);\n        Object.defineProperty(error, \"code\", { value: \"ERR_INVALID_CHAR\" });\n        throw error;\n      }\n    };\n    var Headers = class extends URLSearchParams {\n      constructor(init) {\n        let result = [];\n        if (init instanceof Headers) {\n          const raw = init.raw();\n          for (const [name, values] of Object.entries(raw)) {\n            result.push(...values.map((value) => [name, value]));\n          }\n        } else if (init == null) {\n        } else if (typeof init === \"object\" && !import_node_util2.types.isBoxedPrimitive(init)) {\n          const method = init[Symbol.iterator];\n          if (method == null) {\n            result.push(...Object.entries(init));\n          } else {\n            if (typeof method !== \"function\") {\n              throw new TypeError(\"Header pairs must be iterable\");\n            }\n            result = [...init].map((pair) => {\n              if (typeof pair !== \"object\" || import_node_util2.types.isBoxedPrimitive(pair)) {\n                throw new TypeError(\"Each header pair must be an iterable object\");\n              }\n              return [...pair];\n            }).map((pair) => {\n              if (pair.length !== 2) {\n                throw new TypeError(\"Each header pair must be a name/value tuple\");\n              }\n              return [...pair];\n            });\n          }\n        } else {\n          throw new TypeError(\"Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)\");\n        }\n        result = result.length > 0 ? result.map(([name, value]) => {\n          validateHeaderName(name);\n          validateHeaderValue(name, String(value));\n          return [String(name).toLowerCase(), String(value)];\n        }) : void 0;\n        super(result);\n        return new Proxy(this, {\n          get(target, p, receiver) {\n            switch (p) {\n              case \"append\":\n              case \"set\":\n                return (name, value) => {\n                  validateHeaderName(name);\n                  validateHeaderValue(name, String(value));\n                  return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value));\n                };\n              case \"delete\":\n              case \"has\":\n              case \"getAll\":\n                return (name) => {\n                  validateHeaderName(name);\n                  return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());\n                };\n              case \"keys\":\n                return () => {\n                  target.sort();\n                  return new Set(URLSearchParams.prototype.keys.call(target)).keys();\n                };\n              default:\n                return Reflect.get(target, p, receiver);\n            }\n          }\n        });\n      }\n      get [Symbol.toStringTag]() {\n        return this.constructor.name;\n      }\n      toString() {\n        return Object.prototype.toString.call(this);\n      }\n      get(name) {\n        const values = this.getAll(name);\n        if (values.length === 0) {\n          return null;\n        }\n        let value = values.join(\", \");\n        if (/^content-encoding$/i.test(name)) {\n          value = value.toLowerCase();\n        }\n        return value;\n      }\n      forEach(callback, thisArg = void 0) {\n        for (const name of this.keys()) {\n          Reflect.apply(callback, thisArg, [this.get(name), name, this]);\n        }\n      }\n      *values() {\n        for (const name of this.keys()) {\n          yield this.get(name);\n        }\n      }\n      *entries() {\n        for (const name of this.keys()) {\n          yield [name, this.get(name)];\n        }\n      }\n      [Symbol.iterator]() {\n        return this.entries();\n      }\n      raw() {\n        return [...this.keys()].reduce((result, key) => {\n          result[key] = this.getAll(key);\n          return result;\n        }, {});\n      }\n      [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n        return [...this.keys()].reduce((result, key) => {\n          const values = this.getAll(key);\n          if (key === \"host\") {\n            result[key] = values[0];\n          } else {\n            result[key] = values.length > 1 ? values : values[0];\n          }\n          return result;\n        }, {});\n      }\n    };\n    Object.defineProperties(Headers.prototype, [\"get\", \"entries\", \"forEach\", \"values\"].reduce((result, property) => {\n      result[property] = { enumerable: true };\n      return result;\n    }, {}));\n    function fromRawHeaders(headers = []) {\n      return new Headers(headers.reduce((result, value, index, array) => {\n        if (index % 2 === 0) {\n          result.push(array.slice(index, index + 2));\n        }\n        return result;\n      }, []).filter(([name, value]) => {\n        try {\n          validateHeaderName(name);\n          validateHeaderValue(name, String(value));\n          return true;\n        } catch {\n          return false;\n        }\n      }));\n    }\n    var redirectStatus = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);\n    var isRedirect = (code) => {\n      return redirectStatus.has(code);\n    };\n    var INTERNALS2 = Symbol(\"Response internals\");\n    var Response = class extends Body {\n      constructor(body = null, options = {}) {\n        super(body, options);\n        const status = options.status != null ? options.status : 200;\n        const headers = new Headers(options.headers);\n        if (body !== null && !headers.has(\"Content-Type\")) {\n          const contentType = extractContentType(body, this);\n          if (contentType) {\n            headers.append(\"Content-Type\", contentType);\n          }\n        }\n        this[INTERNALS2] = {\n          type: \"default\",\n          url: options.url,\n          status,\n          statusText: options.statusText || \"\",\n          headers,\n          counter: options.counter,\n          highWaterMark: options.highWaterMark\n        };\n      }\n      get type() {\n        return this[INTERNALS2].type;\n      }\n      get url() {\n        return this[INTERNALS2].url || \"\";\n      }\n      get status() {\n        return this[INTERNALS2].status;\n      }\n      get ok() {\n        return this[INTERNALS2].status >= 200 && this[INTERNALS2].status < 300;\n      }\n      get redirected() {\n        return this[INTERNALS2].counter > 0;\n      }\n      get statusText() {\n        return this[INTERNALS2].statusText;\n      }\n      get headers() {\n        return this[INTERNALS2].headers;\n      }\n      get highWaterMark() {\n        return this[INTERNALS2].highWaterMark;\n      }\n      clone() {\n        return new Response(clone(this, this.highWaterMark), {\n          type: this.type,\n          url: this.url,\n          status: this.status,\n          statusText: this.statusText,\n          headers: this.headers,\n          ok: this.ok,\n          redirected: this.redirected,\n          size: this.size,\n          highWaterMark: this.highWaterMark\n        });\n      }\n      static redirect(url, status = 302) {\n        if (!isRedirect(status)) {\n          throw new RangeError('Failed to execute \"redirect\" on \"response\": Invalid status code');\n        }\n        return new Response(null, {\n          headers: {\n            location: new URL(url).toString()\n          },\n          status\n        });\n      }\n      static error() {\n        const response = new Response(null, { status: 0, statusText: \"\" });\n        response[INTERNALS2].type = \"error\";\n        return response;\n      }\n      static json(data = void 0, init = {}) {\n        const body = JSON.stringify(data);\n        if (body === void 0) {\n          throw new TypeError(\"data is not JSON serializable\");\n        }\n        const headers = new Headers(init && init.headers);\n        if (!headers.has(\"content-type\")) {\n          headers.set(\"content-type\", \"application/json\");\n        }\n        return new Response(body, {\n          ...init,\n          headers\n        });\n      }\n      get [Symbol.toStringTag]() {\n        return \"Response\";\n      }\n    };\n    Object.defineProperties(Response.prototype, {\n      type: { enumerable: true },\n      url: { enumerable: true },\n      status: { enumerable: true },\n      ok: { enumerable: true },\n      redirected: { enumerable: true },\n      statusText: { enumerable: true },\n      headers: { enumerable: true },\n      clone: { enumerable: true }\n    });\n    var import_node_url = __toModule(__webpack_require__(/*! url */ \"url\"));\n    var import_node_util3 = __toModule(__webpack_require__(/*! util */ \"util\"));\n    var getSearch = (parsedURL) => {\n      if (parsedURL.search) {\n        return parsedURL.search;\n      }\n      const lastOffset = parsedURL.href.length - 1;\n      const hash = parsedURL.hash || (parsedURL.href[lastOffset] === \"#\" ? \"#\" : \"\");\n      return parsedURL.href[lastOffset - hash.length] === \"?\" ? \"?\" : \"\";\n    };\n    var import_node_net = __toModule(__webpack_require__(/*! net */ \"net\"));\n    function stripURLForUseAsAReferrer(url, originOnly = false) {\n      if (url == null) {\n        return \"no-referrer\";\n      }\n      url = new URL(url);\n      if (/^(about|blob|data):$/.test(url.protocol)) {\n        return \"no-referrer\";\n      }\n      url.username = \"\";\n      url.password = \"\";\n      url.hash = \"\";\n      if (originOnly) {\n        url.pathname = \"\";\n        url.search = \"\";\n      }\n      return url;\n    }\n    var ReferrerPolicy = /* @__PURE__ */ new Set([\n      \"\",\n      \"no-referrer\",\n      \"no-referrer-when-downgrade\",\n      \"same-origin\",\n      \"origin\",\n      \"strict-origin\",\n      \"origin-when-cross-origin\",\n      \"strict-origin-when-cross-origin\",\n      \"unsafe-url\"\n    ]);\n    var DEFAULT_REFERRER_POLICY = \"strict-origin-when-cross-origin\";\n    function validateReferrerPolicy(referrerPolicy) {\n      if (!ReferrerPolicy.has(referrerPolicy)) {\n        throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);\n      }\n      return referrerPolicy;\n    }\n    function isOriginPotentiallyTrustworthy(url) {\n      if (/^(http|ws)s:$/.test(url.protocol)) {\n        return true;\n      }\n      const hostIp = url.host.replace(/(^\\[)|(]$)/g, \"\");\n      const hostIPVersion = (0, import_node_net.isIP)(hostIp);\n      if (hostIPVersion === 4 && /^127\\./.test(hostIp)) {\n        return true;\n      }\n      if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {\n        return true;\n      }\n      if (url.host === \"localhost\" || url.host.endsWith(\".localhost\")) {\n        return false;\n      }\n      if (url.protocol === \"file:\") {\n        return true;\n      }\n      return false;\n    }\n    function isUrlPotentiallyTrustworthy(url) {\n      if (/^about:(blank|srcdoc)$/.test(url)) {\n        return true;\n      }\n      if (url.protocol === \"data:\") {\n        return true;\n      }\n      if (/^(blob|filesystem):$/.test(url.protocol)) {\n        return true;\n      }\n      return isOriginPotentiallyTrustworthy(url);\n    }\n    function determineRequestsReferrer(request, { referrerURLCallback, referrerOriginCallback } = {}) {\n      if (request.referrer === \"no-referrer\" || request.referrerPolicy === \"\") {\n        return null;\n      }\n      const policy = request.referrerPolicy;\n      if (request.referrer === \"about:client\") {\n        return \"no-referrer\";\n      }\n      const referrerSource = request.referrer;\n      let referrerURL = stripURLForUseAsAReferrer(referrerSource);\n      let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);\n      if (referrerURL.toString().length > 4096) {\n        referrerURL = referrerOrigin;\n      }\n      if (referrerURLCallback) {\n        referrerURL = referrerURLCallback(referrerURL);\n      }\n      if (referrerOriginCallback) {\n        referrerOrigin = referrerOriginCallback(referrerOrigin);\n      }\n      const currentURL = new URL(request.url);\n      switch (policy) {\n        case \"no-referrer\":\n          return \"no-referrer\";\n        case \"origin\":\n          return referrerOrigin;\n        case \"unsafe-url\":\n          return referrerURL;\n        case \"strict-origin\":\n          if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n            return \"no-referrer\";\n          }\n          return referrerOrigin.toString();\n        case \"strict-origin-when-cross-origin\":\n          if (referrerURL.origin === currentURL.origin) {\n            return referrerURL;\n          }\n          if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n            return \"no-referrer\";\n          }\n          return referrerOrigin;\n        case \"same-origin\":\n          if (referrerURL.origin === currentURL.origin) {\n            return referrerURL;\n          }\n          return \"no-referrer\";\n        case \"origin-when-cross-origin\":\n          if (referrerURL.origin === currentURL.origin) {\n            return referrerURL;\n          }\n          return referrerOrigin;\n        case \"no-referrer-when-downgrade\":\n          if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {\n            return \"no-referrer\";\n          }\n          return referrerURL;\n        default:\n          throw new TypeError(`Invalid referrerPolicy: ${policy}`);\n      }\n    }\n    function parseReferrerPolicyFromHeader(headers) {\n      const policyTokens = (headers.get(\"referrer-policy\") || \"\").split(/[,\\s]+/);\n      let policy = \"\";\n      for (const token of policyTokens) {\n        if (token && ReferrerPolicy.has(token)) {\n          policy = token;\n        }\n      }\n      return policy;\n    }\n    var INTERNALS3 = Symbol(\"Request internals\");\n    var isRequest = (object) => {\n      return typeof object === \"object\" && typeof object[INTERNALS3] === \"object\";\n    };\n    var doBadDataWarn = (0, import_node_util3.deprecate)(() => {\n    }, \".data is not a valid RequestInit property, use .body instead\", \"https://github.com/node-fetch/node-fetch/issues/1000 (request)\");\n    var Request = class extends Body {\n      constructor(input, init = {}) {\n        let parsedURL;\n        if (isRequest(input)) {\n          parsedURL = new URL(input.url);\n        } else {\n          parsedURL = new URL(input);\n          input = {};\n        }\n        if (parsedURL.username !== \"\" || parsedURL.password !== \"\") {\n          throw new TypeError(`${parsedURL} is an url with embedded credentials.`);\n        }\n        let method = init.method || input.method || \"GET\";\n        if (/^(delete|get|head|options|post|put)$/i.test(method)) {\n          method = method.toUpperCase();\n        }\n        if (!isRequest(init) && \"data\" in init) {\n          doBadDataWarn();\n        }\n        if ((init.body != null || isRequest(input) && input.body !== null) && (method === \"GET\" || method === \"HEAD\")) {\n          throw new TypeError(\"Request with GET/HEAD method cannot have body\");\n        }\n        const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n        super(inputBody, {\n          size: init.size || input.size || 0\n        });\n        const headers = new Headers(init.headers || input.headers || {});\n        if (inputBody !== null && !headers.has(\"Content-Type\")) {\n          const contentType = extractContentType(inputBody, this);\n          if (contentType) {\n            headers.set(\"Content-Type\", contentType);\n          }\n        }\n        let signal = isRequest(input) ? input.signal : null;\n        if (\"signal\" in init) {\n          signal = init.signal;\n        }\n        if (signal != null && !isAbortSignal(signal)) {\n          throw new TypeError(\"Expected signal to be an instanceof AbortSignal or EventTarget\");\n        }\n        let referrer = init.referrer == null ? input.referrer : init.referrer;\n        if (referrer === \"\") {\n          referrer = \"no-referrer\";\n        } else if (referrer) {\n          const parsedReferrer = new URL(referrer);\n          referrer = /^about:(\\/\\/)?client$/.test(parsedReferrer) ? \"client\" : parsedReferrer;\n        } else {\n          referrer = void 0;\n        }\n        this[INTERNALS3] = {\n          method,\n          redirect: init.redirect || input.redirect || \"follow\",\n          headers,\n          parsedURL,\n          signal,\n          referrer\n        };\n        this.follow = init.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init.follow;\n        this.compress = init.compress === void 0 ? input.compress === void 0 ? true : input.compress : init.compress;\n        this.counter = init.counter || input.counter || 0;\n        this.agent = init.agent || input.agent;\n        this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;\n        this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;\n        this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || \"\";\n      }\n      get method() {\n        return this[INTERNALS3].method;\n      }\n      get url() {\n        return (0, import_node_url.format)(this[INTERNALS3].parsedURL);\n      }\n      get headers() {\n        return this[INTERNALS3].headers;\n      }\n      get redirect() {\n        return this[INTERNALS3].redirect;\n      }\n      get signal() {\n        return this[INTERNALS3].signal;\n      }\n      get referrer() {\n        if (this[INTERNALS3].referrer === \"no-referrer\") {\n          return \"\";\n        }\n        if (this[INTERNALS3].referrer === \"client\") {\n          return \"about:client\";\n        }\n        if (this[INTERNALS3].referrer) {\n          return this[INTERNALS3].referrer.toString();\n        }\n        return void 0;\n      }\n      get referrerPolicy() {\n        return this[INTERNALS3].referrerPolicy;\n      }\n      set referrerPolicy(referrerPolicy) {\n        this[INTERNALS3].referrerPolicy = validateReferrerPolicy(referrerPolicy);\n      }\n      clone() {\n        return new Request(this);\n      }\n      get [Symbol.toStringTag]() {\n        return \"Request\";\n      }\n    };\n    Object.defineProperties(Request.prototype, {\n      method: { enumerable: true },\n      url: { enumerable: true },\n      headers: { enumerable: true },\n      redirect: { enumerable: true },\n      clone: { enumerable: true },\n      signal: { enumerable: true },\n      referrer: { enumerable: true },\n      referrerPolicy: { enumerable: true }\n    });\n    var getNodeRequestOptions = (request) => {\n      const { parsedURL } = request[INTERNALS3];\n      const headers = new Headers(request[INTERNALS3].headers);\n      if (!headers.has(\"Accept\")) {\n        headers.set(\"Accept\", \"*/*\");\n      }\n      let contentLengthValue = null;\n      if (request.body === null && /^(post|put)$/i.test(request.method)) {\n        contentLengthValue = \"0\";\n      }\n      if (request.body !== null) {\n        const totalBytes = getTotalBytes(request);\n        if (typeof totalBytes === \"number\" && !Number.isNaN(totalBytes)) {\n          contentLengthValue = String(totalBytes);\n        }\n      }\n      if (contentLengthValue) {\n        headers.set(\"Content-Length\", contentLengthValue);\n      }\n      if (request.referrerPolicy === \"\") {\n        request.referrerPolicy = DEFAULT_REFERRER_POLICY;\n      }\n      if (request.referrer && request.referrer !== \"no-referrer\") {\n        request[INTERNALS3].referrer = determineRequestsReferrer(request);\n      } else {\n        request[INTERNALS3].referrer = \"no-referrer\";\n      }\n      if (request[INTERNALS3].referrer instanceof URL) {\n        headers.set(\"Referer\", request.referrer);\n      }\n      if (!headers.has(\"User-Agent\")) {\n        headers.set(\"User-Agent\", \"node-fetch\");\n      }\n      if (request.compress && !headers.has(\"Accept-Encoding\")) {\n        headers.set(\"Accept-Encoding\", \"gzip, deflate, br\");\n      }\n      let { agent } = request;\n      if (typeof agent === \"function\") {\n        agent = agent(parsedURL);\n      }\n      const search = getSearch(parsedURL);\n      const options = {\n        path: parsedURL.pathname + search,\n        method: request.method,\n        headers: headers[Symbol.for(\"nodejs.util.inspect.custom\")](),\n        insecureHTTPParser: request.insecureHTTPParser,\n        agent\n      };\n      return {\n        parsedURL,\n        options\n      };\n    };\n    var AbortError = class extends FetchBaseError {\n      constructor(message, type = \"aborted\") {\n        super(message, type);\n      }\n    };\n    init_esm_min();\n    init_from();\n    var supportedSchemas = /* @__PURE__ */ new Set([\"data:\", \"http:\", \"https:\"]);\n    async function fetch(url, options_) {\n      return new Promise((resolve, reject) => {\n        const request = new Request(url, options_);\n        const { parsedURL, options } = getNodeRequestOptions(request);\n        if (!supportedSchemas.has(parsedURL.protocol)) {\n          throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${parsedURL.protocol.replace(/:$/, \"\")}\" is not supported.`);\n        }\n        if (parsedURL.protocol === \"data:\") {\n          const data = dist_default(request.url);\n          const response2 = new Response(data, { headers: { \"Content-Type\": data.typeFull } });\n          resolve(response2);\n          return;\n        }\n        const send = (parsedURL.protocol === \"https:\" ? import_node_https.default : import_node_http2.default).request;\n        const { signal } = request;\n        let response = null;\n        const abort = () => {\n          const error = new AbortError(\"The operation was aborted.\");\n          reject(error);\n          if (request.body && request.body instanceof import_node_stream2.default.Readable) {\n            request.body.destroy(error);\n          }\n          if (!response || !response.body) {\n            return;\n          }\n          response.body.emit(\"error\", error);\n        };\n        if (signal && signal.aborted) {\n          abort();\n          return;\n        }\n        const abortAndFinalize = () => {\n          abort();\n          finalize();\n        };\n        const request_ = send(parsedURL.toString(), options);\n        if (signal) {\n          signal.addEventListener(\"abort\", abortAndFinalize);\n        }\n        const finalize = () => {\n          request_.abort();\n          if (signal) {\n            signal.removeEventListener(\"abort\", abortAndFinalize);\n          }\n        };\n        request_.on(\"error\", (error) => {\n          reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, \"system\", error));\n          finalize();\n        });\n        fixResponseChunkedTransferBadEnding(request_, (error) => {\n          if (response && response.body) {\n            response.body.destroy(error);\n          }\n        });\n        if (process.version < \"v14\") {\n          request_.on(\"socket\", (s2) => {\n            let endedWithEventsCount;\n            s2.prependListener(\"end\", () => {\n              endedWithEventsCount = s2._eventsCount;\n            });\n            s2.prependListener(\"close\", (hadError) => {\n              if (response && endedWithEventsCount < s2._eventsCount && !hadError) {\n                const error = new Error(\"Premature close\");\n                error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n                response.body.emit(\"error\", error);\n              }\n            });\n          });\n        }\n        request_.on(\"response\", (response_) => {\n          request_.setTimeout(0);\n          const headers = fromRawHeaders(response_.rawHeaders);\n          if (isRedirect(response_.statusCode)) {\n            const location = headers.get(\"Location\");\n            let locationURL = null;\n            try {\n              locationURL = location === null ? null : new URL(location, request.url);\n            } catch {\n              if (request.redirect !== \"manual\") {\n                reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, \"invalid-redirect\"));\n                finalize();\n                return;\n              }\n            }\n            switch (request.redirect) {\n              case \"error\":\n                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, \"no-redirect\"));\n                finalize();\n                return;\n              case \"manual\":\n                break;\n              case \"follow\": {\n                if (locationURL === null) {\n                  break;\n                }\n                if (request.counter >= request.follow) {\n                  reject(new FetchError(`maximum redirect reached at: ${request.url}`, \"max-redirect\"));\n                  finalize();\n                  return;\n                }\n                const requestOptions = {\n                  headers: new Headers(request.headers),\n                  follow: request.follow,\n                  counter: request.counter + 1,\n                  agent: request.agent,\n                  compress: request.compress,\n                  method: request.method,\n                  body: clone(request),\n                  signal: request.signal,\n                  size: request.size,\n                  referrer: request.referrer,\n                  referrerPolicy: request.referrerPolicy\n                };\n                if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n                  for (const name of [\"authorization\", \"www-authenticate\", \"cookie\", \"cookie2\"]) {\n                    requestOptions.headers.delete(name);\n                  }\n                }\n                if (response_.statusCode !== 303 && request.body && options_.body instanceof import_node_stream2.default.Readable) {\n                  reject(new FetchError(\"Cannot follow redirect with body being a readable stream\", \"unsupported-redirect\"));\n                  finalize();\n                  return;\n                }\n                if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === \"POST\") {\n                  requestOptions.method = \"GET\";\n                  requestOptions.body = void 0;\n                  requestOptions.headers.delete(\"content-length\");\n                }\n                const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);\n                if (responseReferrerPolicy) {\n                  requestOptions.referrerPolicy = responseReferrerPolicy;\n                }\n                resolve(fetch(new Request(locationURL, requestOptions)));\n                finalize();\n                return;\n              }\n              default:\n                return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n            }\n          }\n          if (signal) {\n            response_.once(\"end\", () => {\n              signal.removeEventListener(\"abort\", abortAndFinalize);\n            });\n          }\n          let body = (0, import_node_stream2.pipeline)(response_, new import_node_stream2.PassThrough(), (error) => {\n            if (error) {\n              reject(error);\n            }\n          });\n          if (process.version < \"v12.10\") {\n            response_.on(\"aborted\", abortAndFinalize);\n          }\n          const responseOptions = {\n            url: request.url,\n            status: response_.statusCode,\n            statusText: response_.statusMessage,\n            headers,\n            size: request.size,\n            counter: request.counter,\n            highWaterMark: request.highWaterMark\n          };\n          const codings = headers.get(\"Content-Encoding\");\n          if (!request.compress || request.method === \"HEAD\" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n            response = new Response(body, responseOptions);\n            resolve(response);\n            return;\n          }\n          const zlibOptions = {\n            flush: import_node_zlib.default.Z_SYNC_FLUSH,\n            finishFlush: import_node_zlib.default.Z_SYNC_FLUSH\n          };\n          if (codings === \"gzip\" || codings === \"x-gzip\") {\n            body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createGunzip(zlibOptions), (error) => {\n              if (error) {\n                reject(error);\n              }\n            });\n            response = new Response(body, responseOptions);\n            resolve(response);\n            return;\n          }\n          if (codings === \"deflate\" || codings === \"x-deflate\") {\n            const raw = (0, import_node_stream2.pipeline)(response_, new import_node_stream2.PassThrough(), (error) => {\n              if (error) {\n                reject(error);\n              }\n            });\n            raw.once(\"data\", (chunk) => {\n              if ((chunk[0] & 15) === 8) {\n                body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createInflate(), (error) => {\n                  if (error) {\n                    reject(error);\n                  }\n                });\n              } else {\n                body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createInflateRaw(), (error) => {\n                  if (error) {\n                    reject(error);\n                  }\n                });\n              }\n              response = new Response(body, responseOptions);\n              resolve(response);\n            });\n            raw.once(\"end\", () => {\n              if (!response) {\n                response = new Response(body, responseOptions);\n                resolve(response);\n              }\n            });\n            return;\n          }\n          if (codings === \"br\") {\n            body = (0, import_node_stream2.pipeline)(body, import_node_zlib.default.createBrotliDecompress(), (error) => {\n              if (error) {\n                reject(error);\n              }\n            });\n            response = new Response(body, responseOptions);\n            resolve(response);\n            return;\n          }\n          response = new Response(body, responseOptions);\n          resolve(response);\n        });\n        writeToStream(request_, request).catch(reject);\n      });\n    }\n    function fixResponseChunkedTransferBadEnding(request, errorCallback) {\n      const LAST_CHUNK = import_node_buffer2.Buffer.from(\"0\\r\\n\\r\\n\");\n      let isChunkedTransfer = false;\n      let properLastChunkReceived = false;\n      let previousChunk;\n      request.on(\"response\", (response) => {\n        const { headers } = response;\n        isChunkedTransfer = headers[\"transfer-encoding\"] === \"chunked\" && !headers[\"content-length\"];\n      });\n      request.on(\"socket\", (socket) => {\n        const onSocketClose = () => {\n          if (isChunkedTransfer && !properLastChunkReceived) {\n            const error = new Error(\"Premature close\");\n            error.code = \"ERR_STREAM_PREMATURE_CLOSE\";\n            errorCallback(error);\n          }\n        };\n        const onData = (buf) => {\n          properLastChunkReceived = import_node_buffer2.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;\n          if (!properLastChunkReceived && previousChunk) {\n            if (buf.length < 5) {\n              properLastChunkReceived = import_node_buffer2.Buffer.compare(\n                import_node_buffer2.Buffer.from([...previousChunk.slice(-5), ...buf]).slice(-5),\n                LAST_CHUNK\n              ) === 0;\n            }\n          }\n          previousChunk = buf;\n        };\n        socket.prependListener(\"close\", onSocketClose);\n        socket.on(\"data\", onData);\n        request.on(\"close\", () => {\n          socket.removeListener(\"close\", onSocketClose);\n          socket.removeListener(\"data\", onData);\n        });\n      });\n    }\n    init_fetch_blob();\n    init_esm_min();\n  }\n});\n\n// server.js\nfunction r(m) {\n  return m && m.default || m;\n}\nmodule.exports = function(url, opts) {\n  return r(require_dist())(String(url).replace(/^\\/\\//g, \"https://\"), opts);\n};\n/*! Bundled license information:\n\nnode-fetch-cjs/dist/index.js:\n  (*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)\n  (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)\n  (*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)\n*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/isomorphic-unfetch/dist/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/isomorphic-unfetch/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@plasmicapp/isomorphic-unfetch/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function r(m){return m && m.default || m;}\nmodule.exports = (typeof process == 'undefined'\n\t\t? global.fetch || r(__webpack_require__(/*! unfetch */ \"(ssr)/./node_modules/unfetch/dist/unfetch.module.js\"))\n\t\t: r(__webpack_require__(/*! ./dist/server */ \"(ssr)/./node_modules/@plasmicapp/isomorphic-unfetch/dist/server.js\"))\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBsYXNtaWNhcHAvaXNvbW9ycGhpYy11bmZldGNoL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGNBQWM7QUFDZDtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLG9FQUFTO0FBQ3ZDLE1BQU0sbUJBQU8sQ0FBQyx5RkFBZTtBQUM3QiIsInNvdXJjZXMiOlsiL1VzZXJzL3dvbmRlcmxhbmRtaXRjaC9DYXNjYWRlUHJvamVjdHMvV29uZGVyVml0ZS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQHBsYXNtaWNhcHAvaXNvbW9ycGhpYy11bmZldGNoL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHIobSl7cmV0dXJuIG0gJiYgbS5kZWZhdWx0IHx8IG07fVxubW9kdWxlLmV4cG9ydHMgPSAodHlwZW9mIHByb2Nlc3MgPT0gJ3VuZGVmaW5lZCdcblx0XHQ/IGdsb2JhbC5mZXRjaCB8fCByKHJlcXVpcmUoJ3VuZmV0Y2gnKSlcblx0XHQ6IHIocmVxdWlyZSgnLi9kaXN0L3NlcnZlcicpKVxuKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/isomorphic-unfetch/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/loader-core/dist/index.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/@plasmicapp/loader-core/dist/index.esm.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Api: () => (/* reexport safe */ _plasmicapp_loader_fetcher__WEBPACK_IMPORTED_MODULE_0__.Api),\n/* harmony export */   PlasmicModulesFetcher: () => (/* reexport safe */ _plasmicapp_loader_fetcher__WEBPACK_IMPORTED_MODULE_0__.PlasmicModulesFetcher),\n/* harmony export */   PlasmicTracker: () => (/* binding */ PlasmicTracker),\n/* harmony export */   Registry: () => (/* binding */ Registry),\n/* harmony export */   getBundleSubset: () => (/* binding */ getBundleSubset)\n/* harmony export */ });\n/* harmony import */ var _plasmicapp_loader_fetcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @plasmicapp/loader-fetcher */ \"(ssr)/./node_modules/@plasmicapp/loader-fetcher/dist/index.esm.js\");\n/* harmony import */ var _plasmicapp_isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @plasmicapp/isomorphic-unfetch */ \"(ssr)/./node_modules/@plasmicapp/isomorphic-unfetch/index.js\");\n/* harmony import */ var _plasmicapp_isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_plasmicapp_isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_1__);\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/index.ts\n\n\n// src/deps-graph.ts\nvar DepsGraph = class {\n  constructor(bundle, browserBuild) {\n    this.bundle = bundle;\n    this.browserBuild = browserBuild;\n    this.dependsOn = {};\n    this.dependedBy = {};\n    this.rebuildGraph();\n  }\n  getTransitiveDependers(name2) {\n    return this.transitiveCrawl(name2, this.dependedBy);\n  }\n  getTransitiveDeps(name2) {\n    if (!(name2 in this.dependsOn)) {\n      return [];\n    }\n    return this.transitiveCrawl(name2, this.dependsOn);\n  }\n  transitiveCrawl(name2, edges) {\n    const deps = /* @__PURE__ */ new Set();\n    const crawl = (dep2) => {\n      var _a;\n      if (deps.has(dep2)) {\n        return;\n      }\n      deps.add(dep2);\n      for (const subdep of (_a = edges[dep2]) != null ? _a : []) {\n        crawl(subdep);\n      }\n    };\n    for (const dep2 of edges[name2]) {\n      crawl(dep2);\n    }\n    return Array.from(deps);\n  }\n  rebuildGraph() {\n    this.dependedBy = {};\n    this.dependsOn = {};\n    for (const mod of this.browserBuild ? this.bundle.modules.browser : this.bundle.modules.server) {\n      if (mod.type === \"code\") {\n        for (const imported of mod.imports) {\n          if (!(mod.fileName in this.dependsOn)) {\n            this.dependsOn[mod.fileName] = [imported];\n          } else {\n            this.dependsOn[mod.fileName].push(imported);\n          }\n          if (!(imported in this.dependedBy)) {\n            this.dependedBy[imported] = [mod.fileName];\n          } else {\n            this.dependedBy[imported].push(mod.fileName);\n          }\n        }\n      }\n    }\n  }\n};\n\n// src/bundles.ts\nfunction getBundleSubset(bundle, names, opts2) {\n  var _a, _b;\n  const namesSet = new Set(names);\n  const target = (_a = opts2 == null ? void 0 : opts2.target) != null ? _a : \"browser\";\n  const forBrowser = target === \"browser\";\n  const graph = new DepsGraph(bundle, forBrowser);\n  const deps = new Set(names.flatMap((name2) => graph.getTransitiveDeps(name2)));\n  const isSubModule = (fileName) => deps.has(fileName) || namesSet.has(fileName);\n  const modules = bundle.modules[target];\n  const filteredModules = modules.filter((mod) => isSubModule(mod.fileName));\n  const filteredComponents = bundle.components.filter(\n    (c) => isSubModule(c.entry)\n  );\n  const filteredComponentsIds = new Set(filteredComponents.map((c) => c.id));\n  const filteredIds = Object.fromEntries(\n    Object.entries(bundle.filteredIds).map(([k, v]) => [k, [...v]])\n  );\n  bundle.components.filter((c) => !filteredComponentsIds.has(c.id)).forEach((component) => {\n    var _a2;\n    filteredIds[component.projectId] = (_a2 = filteredIds[component.projectId]) != null ? _a2 : [];\n    if (!filteredIds[component.projectId].includes(component.id)) {\n      filteredIds[component.projectId].push(component.id);\n    }\n  });\n  return {\n    modules: {\n      browser: forBrowser ? filteredModules : [],\n      server: forBrowser ? [] : filteredModules\n    },\n    components: filteredComponents,\n    globalGroups: bundle.globalGroups,\n    projects: bundle.projects,\n    activeSplits: bundle.activeSplits,\n    bundleKey: (_b = bundle.bundleKey) != null ? _b : null,\n    deferChunksByDefault: bundle.deferChunksByDefault,\n    disableRootLoadingBoundaryByDefault: bundle.disableRootLoadingBoundaryByDefault,\n    filteredIds\n  };\n}\n\n// src/registry.ts\nvar isBrowser = typeof window !== \"undefined\" && window != null && typeof window.document !== \"undefined\";\nfunction isModuleBundlePromiseSet(name2) {\n  return globalThis.__PlasmicBundlePromises && !!globalThis.__PlasmicBundlePromises[name2] && !!globalThis.__PlasmicBundlePromises[name2].then;\n}\nvar Registry = class {\n  constructor() {\n    this.loadedModules = {};\n    this.registeredModules = {};\n    this.modules = {};\n  }\n  register(name2, module) {\n    this.registeredModules[name2] = module;\n  }\n  isEmpty() {\n    return Object.keys(this.loadedModules).length === 0;\n  }\n  clear() {\n    this.loadedModules = {};\n  }\n  getRegisteredModule(name2) {\n    return this.registeredModules[name2];\n  }\n  hasModule(name2, opts2 = {}) {\n    if (name2 in this.registeredModules && !opts2.forceOriginal) {\n      return true;\n    }\n    if (name2 in this.modules) {\n      return true;\n    }\n    if (globalThis.__PLASMIC_CHUNKS && !!globalThis.__PLASMIC_CHUNKS[name2]) {\n      return true;\n    }\n    if (isModuleBundlePromiseSet(name2)) {\n      return true;\n    }\n    return false;\n  }\n  load(name, opts = {}) {\n    if (name in this.registeredModules && !opts.forceOriginal) {\n      return this.registeredModules[name];\n    }\n    if (name in this.loadedModules) {\n      return this.loadedModules[name];\n    }\n    if (!this.modules[name] && globalThis.__PLASMIC_CHUNKS && !!globalThis.__PLASMIC_CHUNKS[name]) {\n      this.modules[name] = globalThis.__PLASMIC_CHUNKS[name];\n    }\n    if (!this.modules[name] && isModuleBundlePromiseSet(name)) {\n      throw globalThis.__PlasmicBundlePromises[name];\n    }\n    if (!(name in this.modules)) {\n      throw new Error(`Unknown module ${name}`);\n    }\n    const code = this.modules[name];\n    const requireFn = isBrowser ? (dep2) => {\n      const normalizedDep = resolvePath(dep2, name);\n      return this.load(normalizedDep);\n    } : (dep) => {\n      try {\n        const normalizedDep = resolvePath(dep, name);\n        return this.load(normalizedDep);\n      } catch (err) {\n        try {\n          return eval(\"require\")(dep);\n        } catch (e) {\n          throw err;\n        }\n      }\n    };\n    let func;\n    try {\n      func = new Function(\"require\", \"exports\", code);\n    } catch (err2) {\n      throw new Error(`PLASMIC: Failed to create function for ${name}: ${err2}`);\n    }\n    const exports = {};\n    this.loadedModules[name] = exports;\n    try {\n      func(requireFn, exports);\n    } catch (err2) {\n      delete this.loadedModules[name];\n      if (!(err2 instanceof Error) && !!err2 && !!err2.then) {\n        throw err2;\n      }\n      throw new Error(`PLASMIC: Failed to load ${name}: ${err2}`);\n    }\n    return exports;\n  }\n  updateModules(bundle) {\n    let updated = false;\n    for (const mod of isBrowser ? bundle.modules.browser : bundle.modules.server) {\n      if (mod.type === \"code\" && !!mod.code && mod.code !== this.modules[mod.fileName]) {\n        this.modules[mod.fileName] = mod.code;\n        if (!globalThis.__PLASMIC_CHUNKS) {\n          globalThis.__PLASMIC_CHUNKS = {};\n        }\n        globalThis.__PLASMIC_CHUNKS[mod.fileName] = mod.code;\n        updated = true;\n      }\n    }\n    if (updated) {\n      this.clear();\n    }\n  }\n};\nfunction resolvePath(path, from) {\n  const fromParts = from.split(\"/\");\n  const pathParts = path.split(\"/\");\n  if (pathParts.length === 0) {\n    return path;\n  }\n  if (pathParts[0] === \".\") {\n    return [\n      ...fromParts.slice(0, fromParts.length - 1),\n      ...pathParts.slice(1)\n    ].join(\"/\");\n  } else if (pathParts[0] === \"..\") {\n    let count = 0;\n    for (const part of pathParts) {\n      if (part === \"..\") {\n        count += 1;\n      } else {\n        break;\n      }\n    }\n    return [\n      ...fromParts.slice(0, fromParts.length - count - 1),\n      ...pathParts.slice(count)\n    ].join(\"/\");\n  } else {\n    return path;\n  }\n}\n\n// src/tracker/index.ts\n\n\n// src/tracker/utils.ts\nvar isBrowser2 = typeof window !== \"undefined\" && window != null && typeof window.document !== \"undefined\";\nfunction getPlasmicCookieValues() {\n  if (!isBrowser2) {\n    return {};\n  }\n  return Object.fromEntries(\n    document.cookie.split(\"; \").filter((cookie) => cookie.includes(\"plasmic:\")).map((cookie) => cookie.split(\"=\")).map(([key, value]) => [key.split(\":\")[1], value])\n  );\n}\nfunction getVariationCookieValues() {\n  const cookies = getPlasmicCookieValues();\n  return Object.fromEntries(\n    Object.keys(cookies).map((key) => [key.split(\".\")[1], cookies[key]]).filter((val) => !!val[0])\n  );\n}\nfunction getDistinctId() {\n  if (!isBrowser2) {\n    return \"LOADER-SERVER\";\n  }\n  return \"LOADER-CLIENT\";\n}\nfunction getCampaignParams() {\n  const { location } = window;\n  const params = {};\n  try {\n    const url = new URL(location.href);\n    const CAMPAIGN_KEYWORDS = [\n      \"utm_source\",\n      \"utm_medium\",\n      \"utm_campaign\",\n      \"utm_content\",\n      \"utm_term\",\n      \"gclid\"\n    ];\n    CAMPAIGN_KEYWORDS.forEach((keyword) => {\n      const value = url.searchParams.get(keyword);\n      if (value) {\n        params[keyword] = value;\n      }\n    });\n  } catch (err2) {\n  }\n  return params;\n}\nfunction getLocationMeta() {\n  const { location } = window;\n  const { referrer } = document;\n  return __spreadValues({\n    url: location.href,\n    host: location.host,\n    pathname: location.pathname,\n    referrer\n  }, getCampaignParams());\n}\nfunction getScreenMeta() {\n  const { screen } = window;\n  return {\n    screen_height: screen.height,\n    screen_width: screen.width,\n    viewport_height: window.innerHeight,\n    viewport_width: window.innerWidth\n  };\n}\nfunction getOS(userAgent) {\n  if (/Windows/i.test(userAgent)) {\n    if (/Phone/.test(userAgent) || /WPDesktop/.test(userAgent)) {\n      return \"Windows Phone\";\n    }\n    return \"Windows\";\n  } else if (/(iPhone|iPad|iPod)/.test(userAgent)) {\n    return \"iOS\";\n  } else if (/Android/.test(userAgent)) {\n    return \"Android\";\n  } else if (/(BlackBerry|PlayBook|BB10)/i.test(userAgent)) {\n    return \"BlackBerry\";\n  } else if (/Mac/i.test(userAgent)) {\n    return \"Mac OS X\";\n  } else if (/Linux/.test(userAgent)) {\n    return \"Linux\";\n  } else if (/CrOS/.test(userAgent)) {\n    return \"Chrome OS\";\n  } else {\n    return \"\";\n  }\n}\nfunction getDeviceInfo(userAgent) {\n  const PATTERNS = [\n    {\n      device: \"iPhone\",\n      patterns: [/iPhone/]\n    },\n    {\n      device: \"iPad\",\n      patterns: [/iPad/]\n    },\n    {\n      device: \"iPod Touch\",\n      patterns: [/iPod/]\n    },\n    {\n      device: \"Windows Phone\",\n      patterns: [/Windows Phone/i, /WPDesktop/]\n    },\n    {\n      device: \"Android\",\n      patterns: [/Android/]\n    }\n  ];\n  const match = PATTERNS.find(\n    (pattern) => pattern.patterns.some((expr) => expr.test(userAgent))\n  );\n  const device = match == null ? void 0 : match.device;\n  return {\n    device: device != null ? device : \"\",\n    deviceType: device ? \"Mobile\" : \"Desktop\",\n    os: getOS(userAgent)\n  };\n}\nfunction getUserAgentMeta() {\n  const { navigator } = window;\n  const { userAgent } = navigator;\n  return __spreadValues({}, getDeviceInfo(userAgent));\n}\nfunction getWindowMeta() {\n  if (!isBrowser2) {\n    return {};\n  }\n  return __spreadValues(__spreadValues(__spreadValues({}, getLocationMeta()), getScreenMeta()), getUserAgentMeta());\n}\nvar isProduction = \"development\" === \"production\";\nfunction getEnvMeta() {\n  return {\n    isBrowser: isBrowser2,\n    isProduction\n  };\n}\nfunction rawSplitVariation(variation) {\n  const rawVariations = {};\n  Object.keys(variation).forEach((variationKey) => {\n    const [, splitId] = variationKey.split(\".\");\n    if (splitId) {\n      rawVariations[splitId] = variation[variationKey];\n    }\n  });\n  return rawVariations;\n}\nvar POLL_TIME = 5e3;\nfunction throttled(func2) {\n  let timerId = void 0;\n  return (param) => {\n    if (timerId) {\n      return;\n    }\n    if (isBrowser2) {\n      timerId = window.requestAnimationFrame(() => {\n        timerId = void 0;\n        func2(param);\n      });\n    } else {\n      timerId = setTimeout(() => {\n        timerId = void 0;\n        func2(param);\n      }, POLL_TIME);\n    }\n  };\n}\n\n// src/tracker/index.ts\nvar API_ENDPOINT = \"https://analytics.plasmic.app/capture\";\nvar API_PUBLIC_KEY = \"phc_BRvYTAoMoam9fDHfrIneF67KdtMJagLVVCM6ELNYd4n\";\nvar TRACKER_VERSION = 4;\nvar PlasmicTracker = class {\n  constructor(opts2) {\n    this.opts = opts2;\n    this.eventQueue = [];\n    this.sendEvents = throttled((transport) => __async(this, null, function* () {\n      if (this.eventQueue.length === 0) {\n        return;\n      }\n      const events = [...this.eventQueue];\n      this.eventQueue.length = 0;\n      const body = {\n        api_key: API_PUBLIC_KEY,\n        batch: events\n      };\n      try {\n        const stringBody = JSON.stringify(body);\n        if (transport === \"beacon\") {\n          window.navigator.sendBeacon(API_ENDPOINT, stringBody);\n        } else {\n          this.fetch(API_ENDPOINT, {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\"\n            },\n            body: stringBody\n          }).then(() => {\n          }).catch(() => {\n          });\n        }\n      } catch (err2) {\n      }\n    }));\n    this.fetch = (opts2.nativeFetch && globalThis.fetch ? globalThis.fetch : (_plasmicapp_isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_1___default())).bind(globalThis);\n  }\n  trackRender(opts2) {\n    var _a, _b;\n    this.enqueue({\n      event: \"$render\",\n      properties: __spreadValues(__spreadValues(__spreadValues({}, this.getProperties()), (_a = opts2 == null ? void 0 : opts2.renderCtx) != null ? _a : {}), rawSplitVariation((_b = opts2 == null ? void 0 : opts2.variation) != null ? _b : {}))\n    });\n  }\n  trackFetch() {\n    this.enqueue({\n      event: \"$fetch\",\n      properties: this.getProperties()\n    });\n  }\n  trackConversion(value = 0) {\n    this.enqueue({\n      event: \"$conversion\",\n      properties: __spreadProps(__spreadValues({}, this.getProperties()), {\n        value\n      })\n    });\n  }\n  getProperties() {\n    var _a;\n    return __spreadProps(__spreadValues(__spreadValues(__spreadValues(__spreadValues({\n      distinct_id: getDistinctId()\n    }, getWindowMeta()), getEnvMeta()), this.getContextMeta()), getVariationCookieValues()), {\n      timestamp: (_a = Date.now()) != null ? _a : +/* @__PURE__ */ new Date(),\n      trackerVersion: TRACKER_VERSION\n    });\n  }\n  enqueue(event) {\n    if (this.opts.__plasmicTrackerDisabled) {\n      return;\n    }\n    this.eventQueue.push(event);\n    this.sendEvents(\"fetch\");\n  }\n  getContextMeta() {\n    return {\n      platform: this.opts.platform,\n      preview: this.opts.preview,\n      projectIds: this.opts.projectIds\n    };\n  }\n};\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBsYXNtaWNhcHAvbG9hZGVyLWNvcmUvZGlzdC9pbmRleC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsNkRBQTZEO0FBQzNJO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUN3RTs7QUFFeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxLQUFLO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sZ0VBQWdFLEtBQUssSUFBSSxLQUFLO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsS0FBSyxJQUFJLEtBQUs7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ3FEOztBQUVyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFdBQVc7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxXQUFXO0FBQ3JCLFVBQVUsV0FBVztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxVQUFVLFNBQVM7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QixVQUFVLFlBQVk7QUFDdEIsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQSxtQkFBbUIsYUFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxXQUFXO0FBQ1gsV0FBVztBQUNYLFdBQVc7QUFDWDtBQUNBLFFBQVE7QUFDUjtBQUNBLEtBQUs7QUFDTCw2RUFBNkUsdUVBQU87QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSwwRkFBMEYsc0ZBQXNGO0FBQ2pQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvd29uZGVybGFuZG1pdGNoL0Nhc2NhZGVQcm9qZWN0cy9Xb25kZXJWaXRlLWZyb250ZW5kL25vZGVfbW9kdWxlcy9AcGxhc21pY2FwcC9sb2FkZXItY29yZS9kaXN0L2luZGV4LmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmUHJvcHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydGllcztcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG52YXIgX19zcHJlYWRQcm9wcyA9IChhLCBiKSA9PiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTtcbnZhciBfX2FzeW5jID0gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHZhciBmdWxmaWxsZWQgPSAodmFsdWUpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHJlamVjdGVkID0gKHZhbHVlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc3RlcCA9ICh4KSA9PiB4LmRvbmUgPyByZXNvbHZlKHgudmFsdWUpIDogUHJvbWlzZS5yZXNvbHZlKHgudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7XG4gICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KF9fdGhpcywgX19hcmd1bWVudHMpKS5uZXh0KCkpO1xuICB9KTtcbn07XG5cbi8vIHNyYy9pbmRleC50c1xuaW1wb3J0IHsgQXBpLCBQbGFzbWljTW9kdWxlc0ZldGNoZXIgfSBmcm9tIFwiQHBsYXNtaWNhcHAvbG9hZGVyLWZldGNoZXJcIjtcblxuLy8gc3JjL2RlcHMtZ3JhcGgudHNcbnZhciBEZXBzR3JhcGggPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGJ1bmRsZSwgYnJvd3NlckJ1aWxkKSB7XG4gICAgdGhpcy5idW5kbGUgPSBidW5kbGU7XG4gICAgdGhpcy5icm93c2VyQnVpbGQgPSBicm93c2VyQnVpbGQ7XG4gICAgdGhpcy5kZXBlbmRzT24gPSB7fTtcbiAgICB0aGlzLmRlcGVuZGVkQnkgPSB7fTtcbiAgICB0aGlzLnJlYnVpbGRHcmFwaCgpO1xuICB9XG4gIGdldFRyYW5zaXRpdmVEZXBlbmRlcnMobmFtZTIpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2l0aXZlQ3Jhd2wobmFtZTIsIHRoaXMuZGVwZW5kZWRCeSk7XG4gIH1cbiAgZ2V0VHJhbnNpdGl2ZURlcHMobmFtZTIpIHtcbiAgICBpZiAoIShuYW1lMiBpbiB0aGlzLmRlcGVuZHNPbikpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJhbnNpdGl2ZUNyYXdsKG5hbWUyLCB0aGlzLmRlcGVuZHNPbik7XG4gIH1cbiAgdHJhbnNpdGl2ZUNyYXdsKG5hbWUyLCBlZGdlcykge1xuICAgIGNvbnN0IGRlcHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgIGNvbnN0IGNyYXdsID0gKGRlcDIpID0+IHtcbiAgICAgIHZhciBfYTtcbiAgICAgIGlmIChkZXBzLmhhcyhkZXAyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkZXBzLmFkZChkZXAyKTtcbiAgICAgIGZvciAoY29uc3Qgc3ViZGVwIG9mIChfYSA9IGVkZ2VzW2RlcDJdKSAhPSBudWxsID8gX2EgOiBbXSkge1xuICAgICAgICBjcmF3bChzdWJkZXApO1xuICAgICAgfVxuICAgIH07XG4gICAgZm9yIChjb25zdCBkZXAyIG9mIGVkZ2VzW25hbWUyXSkge1xuICAgICAgY3Jhd2woZGVwMik7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKGRlcHMpO1xuICB9XG4gIHJlYnVpbGRHcmFwaCgpIHtcbiAgICB0aGlzLmRlcGVuZGVkQnkgPSB7fTtcbiAgICB0aGlzLmRlcGVuZHNPbiA9IHt9O1xuICAgIGZvciAoY29uc3QgbW9kIG9mIHRoaXMuYnJvd3NlckJ1aWxkID8gdGhpcy5idW5kbGUubW9kdWxlcy5icm93c2VyIDogdGhpcy5idW5kbGUubW9kdWxlcy5zZXJ2ZXIpIHtcbiAgICAgIGlmIChtb2QudHlwZSA9PT0gXCJjb2RlXCIpIHtcbiAgICAgICAgZm9yIChjb25zdCBpbXBvcnRlZCBvZiBtb2QuaW1wb3J0cykge1xuICAgICAgICAgIGlmICghKG1vZC5maWxlTmFtZSBpbiB0aGlzLmRlcGVuZHNPbikpIHtcbiAgICAgICAgICAgIHRoaXMuZGVwZW5kc09uW21vZC5maWxlTmFtZV0gPSBbaW1wb3J0ZWRdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRlcGVuZHNPblttb2QuZmlsZU5hbWVdLnB1c2goaW1wb3J0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShpbXBvcnRlZCBpbiB0aGlzLmRlcGVuZGVkQnkpKSB7XG4gICAgICAgICAgICB0aGlzLmRlcGVuZGVkQnlbaW1wb3J0ZWRdID0gW21vZC5maWxlTmFtZV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVwZW5kZWRCeVtpbXBvcnRlZF0ucHVzaChtb2QuZmlsZU5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLy8gc3JjL2J1bmRsZXMudHNcbmZ1bmN0aW9uIGdldEJ1bmRsZVN1YnNldChidW5kbGUsIG5hbWVzLCBvcHRzMikge1xuICB2YXIgX2EsIF9iO1xuICBjb25zdCBuYW1lc1NldCA9IG5ldyBTZXQobmFtZXMpO1xuICBjb25zdCB0YXJnZXQgPSAoX2EgPSBvcHRzMiA9PSBudWxsID8gdm9pZCAwIDogb3B0czIudGFyZ2V0KSAhPSBudWxsID8gX2EgOiBcImJyb3dzZXJcIjtcbiAgY29uc3QgZm9yQnJvd3NlciA9IHRhcmdldCA9PT0gXCJicm93c2VyXCI7XG4gIGNvbnN0IGdyYXBoID0gbmV3IERlcHNHcmFwaChidW5kbGUsIGZvckJyb3dzZXIpO1xuICBjb25zdCBkZXBzID0gbmV3IFNldChuYW1lcy5mbGF0TWFwKChuYW1lMikgPT4gZ3JhcGguZ2V0VHJhbnNpdGl2ZURlcHMobmFtZTIpKSk7XG4gIGNvbnN0IGlzU3ViTW9kdWxlID0gKGZpbGVOYW1lKSA9PiBkZXBzLmhhcyhmaWxlTmFtZSkgfHwgbmFtZXNTZXQuaGFzKGZpbGVOYW1lKTtcbiAgY29uc3QgbW9kdWxlcyA9IGJ1bmRsZS5tb2R1bGVzW3RhcmdldF07XG4gIGNvbnN0IGZpbHRlcmVkTW9kdWxlcyA9IG1vZHVsZXMuZmlsdGVyKChtb2QpID0+IGlzU3ViTW9kdWxlKG1vZC5maWxlTmFtZSkpO1xuICBjb25zdCBmaWx0ZXJlZENvbXBvbmVudHMgPSBidW5kbGUuY29tcG9uZW50cy5maWx0ZXIoXG4gICAgKGMpID0+IGlzU3ViTW9kdWxlKGMuZW50cnkpXG4gICk7XG4gIGNvbnN0IGZpbHRlcmVkQ29tcG9uZW50c0lkcyA9IG5ldyBTZXQoZmlsdGVyZWRDb21wb25lbnRzLm1hcCgoYykgPT4gYy5pZCkpO1xuICBjb25zdCBmaWx0ZXJlZElkcyA9IE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBPYmplY3QuZW50cmllcyhidW5kbGUuZmlsdGVyZWRJZHMpLm1hcCgoW2ssIHZdKSA9PiBbaywgWy4uLnZdXSlcbiAgKTtcbiAgYnVuZGxlLmNvbXBvbmVudHMuZmlsdGVyKChjKSA9PiAhZmlsdGVyZWRDb21wb25lbnRzSWRzLmhhcyhjLmlkKSkuZm9yRWFjaCgoY29tcG9uZW50KSA9PiB7XG4gICAgdmFyIF9hMjtcbiAgICBmaWx0ZXJlZElkc1tjb21wb25lbnQucHJvamVjdElkXSA9IChfYTIgPSBmaWx0ZXJlZElkc1tjb21wb25lbnQucHJvamVjdElkXSkgIT0gbnVsbCA/IF9hMiA6IFtdO1xuICAgIGlmICghZmlsdGVyZWRJZHNbY29tcG9uZW50LnByb2plY3RJZF0uaW5jbHVkZXMoY29tcG9uZW50LmlkKSkge1xuICAgICAgZmlsdGVyZWRJZHNbY29tcG9uZW50LnByb2plY3RJZF0ucHVzaChjb21wb25lbnQuaWQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgbW9kdWxlczoge1xuICAgICAgYnJvd3NlcjogZm9yQnJvd3NlciA/IGZpbHRlcmVkTW9kdWxlcyA6IFtdLFxuICAgICAgc2VydmVyOiBmb3JCcm93c2VyID8gW10gOiBmaWx0ZXJlZE1vZHVsZXNcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IGZpbHRlcmVkQ29tcG9uZW50cyxcbiAgICBnbG9iYWxHcm91cHM6IGJ1bmRsZS5nbG9iYWxHcm91cHMsXG4gICAgcHJvamVjdHM6IGJ1bmRsZS5wcm9qZWN0cyxcbiAgICBhY3RpdmVTcGxpdHM6IGJ1bmRsZS5hY3RpdmVTcGxpdHMsXG4gICAgYnVuZGxlS2V5OiAoX2IgPSBidW5kbGUuYnVuZGxlS2V5KSAhPSBudWxsID8gX2IgOiBudWxsLFxuICAgIGRlZmVyQ2h1bmtzQnlEZWZhdWx0OiBidW5kbGUuZGVmZXJDaHVua3NCeURlZmF1bHQsXG4gICAgZGlzYWJsZVJvb3RMb2FkaW5nQm91bmRhcnlCeURlZmF1bHQ6IGJ1bmRsZS5kaXNhYmxlUm9vdExvYWRpbmdCb3VuZGFyeUJ5RGVmYXVsdCxcbiAgICBmaWx0ZXJlZElkc1xuICB9O1xufVxuXG4vLyBzcmMvcmVnaXN0cnkudHNcbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdyAhPSBudWxsICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5mdW5jdGlvbiBpc01vZHVsZUJ1bmRsZVByb21pc2VTZXQobmFtZTIpIHtcbiAgcmV0dXJuIGdsb2JhbFRoaXMuX19QbGFzbWljQnVuZGxlUHJvbWlzZXMgJiYgISFnbG9iYWxUaGlzLl9fUGxhc21pY0J1bmRsZVByb21pc2VzW25hbWUyXSAmJiAhIWdsb2JhbFRoaXMuX19QbGFzbWljQnVuZGxlUHJvbWlzZXNbbmFtZTJdLnRoZW47XG59XG52YXIgUmVnaXN0cnkgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubG9hZGVkTW9kdWxlcyA9IHt9O1xuICAgIHRoaXMucmVnaXN0ZXJlZE1vZHVsZXMgPSB7fTtcbiAgICB0aGlzLm1vZHVsZXMgPSB7fTtcbiAgfVxuICByZWdpc3RlcihuYW1lMiwgbW9kdWxlKSB7XG4gICAgdGhpcy5yZWdpc3RlcmVkTW9kdWxlc1tuYW1lMl0gPSBtb2R1bGU7XG4gIH1cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5sb2FkZWRNb2R1bGVzKS5sZW5ndGggPT09IDA7XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5sb2FkZWRNb2R1bGVzID0ge307XG4gIH1cbiAgZ2V0UmVnaXN0ZXJlZE1vZHVsZShuYW1lMikge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyZWRNb2R1bGVzW25hbWUyXTtcbiAgfVxuICBoYXNNb2R1bGUobmFtZTIsIG9wdHMyID0ge30pIHtcbiAgICBpZiAobmFtZTIgaW4gdGhpcy5yZWdpc3RlcmVkTW9kdWxlcyAmJiAhb3B0czIuZm9yY2VPcmlnaW5hbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChuYW1lMiBpbiB0aGlzLm1vZHVsZXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoZ2xvYmFsVGhpcy5fX1BMQVNNSUNfQ0hVTktTICYmICEhZ2xvYmFsVGhpcy5fX1BMQVNNSUNfQ0hVTktTW25hbWUyXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChpc01vZHVsZUJ1bmRsZVByb21pc2VTZXQobmFtZTIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxvYWQobmFtZSwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKG5hbWUgaW4gdGhpcy5yZWdpc3RlcmVkTW9kdWxlcyAmJiAhb3B0cy5mb3JjZU9yaWdpbmFsKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RlcmVkTW9kdWxlc1tuYW1lXTtcbiAgICB9XG4gICAgaWYgKG5hbWUgaW4gdGhpcy5sb2FkZWRNb2R1bGVzKSB7XG4gICAgICByZXR1cm4gdGhpcy5sb2FkZWRNb2R1bGVzW25hbWVdO1xuICAgIH1cbiAgICBpZiAoIXRoaXMubW9kdWxlc1tuYW1lXSAmJiBnbG9iYWxUaGlzLl9fUExBU01JQ19DSFVOS1MgJiYgISFnbG9iYWxUaGlzLl9fUExBU01JQ19DSFVOS1NbbmFtZV0pIHtcbiAgICAgIHRoaXMubW9kdWxlc1tuYW1lXSA9IGdsb2JhbFRoaXMuX19QTEFTTUlDX0NIVU5LU1tuYW1lXTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLm1vZHVsZXNbbmFtZV0gJiYgaXNNb2R1bGVCdW5kbGVQcm9taXNlU2V0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBnbG9iYWxUaGlzLl9fUGxhc21pY0J1bmRsZVByb21pc2VzW25hbWVdO1xuICAgIH1cbiAgICBpZiAoIShuYW1lIGluIHRoaXMubW9kdWxlcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBtb2R1bGUgJHtuYW1lfWApO1xuICAgIH1cbiAgICBjb25zdCBjb2RlID0gdGhpcy5tb2R1bGVzW25hbWVdO1xuICAgIGNvbnN0IHJlcXVpcmVGbiA9IGlzQnJvd3NlciA/IChkZXAyKSA9PiB7XG4gICAgICBjb25zdCBub3JtYWxpemVkRGVwID0gcmVzb2x2ZVBhdGgoZGVwMiwgbmFtZSk7XG4gICAgICByZXR1cm4gdGhpcy5sb2FkKG5vcm1hbGl6ZWREZXApO1xuICAgIH0gOiAoZGVwKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkRGVwID0gcmVzb2x2ZVBhdGgoZGVwLCBuYW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZChub3JtYWxpemVkRGVwKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBldmFsKFwicmVxdWlyZVwiKShkZXApO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBsZXQgZnVuYztcbiAgICB0cnkge1xuICAgICAgZnVuYyA9IG5ldyBGdW5jdGlvbihcInJlcXVpcmVcIiwgXCJleHBvcnRzXCIsIGNvZGUpO1xuICAgIH0gY2F0Y2ggKGVycjIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUExBU01JQzogRmFpbGVkIHRvIGNyZWF0ZSBmdW5jdGlvbiBmb3IgJHtuYW1lfTogJHtlcnIyfWApO1xuICAgIH1cbiAgICBjb25zdCBleHBvcnRzID0ge307XG4gICAgdGhpcy5sb2FkZWRNb2R1bGVzW25hbWVdID0gZXhwb3J0cztcbiAgICB0cnkge1xuICAgICAgZnVuYyhyZXF1aXJlRm4sIGV4cG9ydHMpO1xuICAgIH0gY2F0Y2ggKGVycjIpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmxvYWRlZE1vZHVsZXNbbmFtZV07XG4gICAgICBpZiAoIShlcnIyIGluc3RhbmNlb2YgRXJyb3IpICYmICEhZXJyMiAmJiAhIWVycjIudGhlbikge1xuICAgICAgICB0aHJvdyBlcnIyO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQTEFTTUlDOiBGYWlsZWQgdG8gbG9hZCAke25hbWV9OiAke2VycjJ9YCk7XG4gICAgfVxuICAgIHJldHVybiBleHBvcnRzO1xuICB9XG4gIHVwZGF0ZU1vZHVsZXMoYnVuZGxlKSB7XG4gICAgbGV0IHVwZGF0ZWQgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IG1vZCBvZiBpc0Jyb3dzZXIgPyBidW5kbGUubW9kdWxlcy5icm93c2VyIDogYnVuZGxlLm1vZHVsZXMuc2VydmVyKSB7XG4gICAgICBpZiAobW9kLnR5cGUgPT09IFwiY29kZVwiICYmICEhbW9kLmNvZGUgJiYgbW9kLmNvZGUgIT09IHRoaXMubW9kdWxlc1ttb2QuZmlsZU5hbWVdKSB7XG4gICAgICAgIHRoaXMubW9kdWxlc1ttb2QuZmlsZU5hbWVdID0gbW9kLmNvZGU7XG4gICAgICAgIGlmICghZ2xvYmFsVGhpcy5fX1BMQVNNSUNfQ0hVTktTKSB7XG4gICAgICAgICAgZ2xvYmFsVGhpcy5fX1BMQVNNSUNfQ0hVTktTID0ge307XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsVGhpcy5fX1BMQVNNSUNfQ0hVTktTW21vZC5maWxlTmFtZV0gPSBtb2QuY29kZTtcbiAgICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh1cGRhdGVkKSB7XG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gcmVzb2x2ZVBhdGgocGF0aCwgZnJvbSkge1xuICBjb25zdCBmcm9tUGFydHMgPSBmcm9tLnNwbGl0KFwiL1wiKTtcbiAgY29uc3QgcGF0aFBhcnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGlmIChwYXRoUGFydHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbiAgaWYgKHBhdGhQYXJ0c1swXSA9PT0gXCIuXCIpIHtcbiAgICByZXR1cm4gW1xuICAgICAgLi4uZnJvbVBhcnRzLnNsaWNlKDAsIGZyb21QYXJ0cy5sZW5ndGggLSAxKSxcbiAgICAgIC4uLnBhdGhQYXJ0cy5zbGljZSgxKVxuICAgIF0uam9pbihcIi9cIik7XG4gIH0gZWxzZSBpZiAocGF0aFBhcnRzWzBdID09PSBcIi4uXCIpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXRoUGFydHMpIHtcbiAgICAgIGlmIChwYXJ0ID09PSBcIi4uXCIpIHtcbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW1xuICAgICAgLi4uZnJvbVBhcnRzLnNsaWNlKDAsIGZyb21QYXJ0cy5sZW5ndGggLSBjb3VudCAtIDEpLFxuICAgICAgLi4ucGF0aFBhcnRzLnNsaWNlKGNvdW50KVxuICAgIF0uam9pbihcIi9cIik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH1cbn1cblxuLy8gc3JjL3RyYWNrZXIvaW5kZXgudHNcbmltcG9ydCB1bmZldGNoIGZyb20gXCJAcGxhc21pY2FwcC9pc29tb3JwaGljLXVuZmV0Y2hcIjtcblxuLy8gc3JjL3RyYWNrZXIvdXRpbHMudHNcbnZhciBpc0Jyb3dzZXIyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cgIT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuZnVuY3Rpb24gZ2V0UGxhc21pY0Nvb2tpZVZhbHVlcygpIHtcbiAgaWYgKCFpc0Jyb3dzZXIyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgZG9jdW1lbnQuY29va2llLnNwbGl0KFwiOyBcIikuZmlsdGVyKChjb29raWUpID0+IGNvb2tpZS5pbmNsdWRlcyhcInBsYXNtaWM6XCIpKS5tYXAoKGNvb2tpZSkgPT4gY29va2llLnNwbGl0KFwiPVwiKSkubWFwKChba2V5LCB2YWx1ZV0pID0+IFtrZXkuc3BsaXQoXCI6XCIpWzFdLCB2YWx1ZV0pXG4gICk7XG59XG5mdW5jdGlvbiBnZXRWYXJpYXRpb25Db29raWVWYWx1ZXMoKSB7XG4gIGNvbnN0IGNvb2tpZXMgPSBnZXRQbGFzbWljQ29va2llVmFsdWVzKCk7XG4gIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgT2JqZWN0LmtleXMoY29va2llcykubWFwKChrZXkpID0+IFtrZXkuc3BsaXQoXCIuXCIpWzFdLCBjb29raWVzW2tleV1dKS5maWx0ZXIoKHZhbCkgPT4gISF2YWxbMF0pXG4gICk7XG59XG5mdW5jdGlvbiBnZXREaXN0aW5jdElkKCkge1xuICBpZiAoIWlzQnJvd3NlcjIpIHtcbiAgICByZXR1cm4gXCJMT0FERVItU0VSVkVSXCI7XG4gIH1cbiAgcmV0dXJuIFwiTE9BREVSLUNMSUVOVFwiO1xufVxuZnVuY3Rpb24gZ2V0Q2FtcGFpZ25QYXJhbXMoKSB7XG4gIGNvbnN0IHsgbG9jYXRpb24gfSA9IHdpbmRvdztcbiAgY29uc3QgcGFyYW1zID0ge307XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChsb2NhdGlvbi5ocmVmKTtcbiAgICBjb25zdCBDQU1QQUlHTl9LRVlXT1JEUyA9IFtcbiAgICAgIFwidXRtX3NvdXJjZVwiLFxuICAgICAgXCJ1dG1fbWVkaXVtXCIsXG4gICAgICBcInV0bV9jYW1wYWlnblwiLFxuICAgICAgXCJ1dG1fY29udGVudFwiLFxuICAgICAgXCJ1dG1fdGVybVwiLFxuICAgICAgXCJnY2xpZFwiXG4gICAgXTtcbiAgICBDQU1QQUlHTl9LRVlXT1JEUy5mb3JFYWNoKChrZXl3b3JkKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KGtleXdvcmQpO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHBhcmFtc1trZXl3b3JkXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnIyKSB7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cbmZ1bmN0aW9uIGdldExvY2F0aW9uTWV0YSgpIHtcbiAgY29uc3QgeyBsb2NhdGlvbiB9ID0gd2luZG93O1xuICBjb25zdCB7IHJlZmVycmVyIH0gPSBkb2N1bWVudDtcbiAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKHtcbiAgICB1cmw6IGxvY2F0aW9uLmhyZWYsXG4gICAgaG9zdDogbG9jYXRpb24uaG9zdCxcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgcmVmZXJyZXJcbiAgfSwgZ2V0Q2FtcGFpZ25QYXJhbXMoKSk7XG59XG5mdW5jdGlvbiBnZXRTY3JlZW5NZXRhKCkge1xuICBjb25zdCB7IHNjcmVlbiB9ID0gd2luZG93O1xuICByZXR1cm4ge1xuICAgIHNjcmVlbl9oZWlnaHQ6IHNjcmVlbi5oZWlnaHQsXG4gICAgc2NyZWVuX3dpZHRoOiBzY3JlZW4ud2lkdGgsXG4gICAgdmlld3BvcnRfaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgdmlld3BvcnRfd2lkdGg6IHdpbmRvdy5pbm5lcldpZHRoXG4gIH07XG59XG5mdW5jdGlvbiBnZXRPUyh1c2VyQWdlbnQpIHtcbiAgaWYgKC9XaW5kb3dzL2kudGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgaWYgKC9QaG9uZS8udGVzdCh1c2VyQWdlbnQpIHx8IC9XUERlc2t0b3AvLnRlc3QodXNlckFnZW50KSkge1xuICAgICAgcmV0dXJuIFwiV2luZG93cyBQaG9uZVwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJXaW5kb3dzXCI7XG4gIH0gZWxzZSBpZiAoLyhpUGhvbmV8aVBhZHxpUG9kKS8udGVzdCh1c2VyQWdlbnQpKSB7XG4gICAgcmV0dXJuIFwiaU9TXCI7XG4gIH0gZWxzZSBpZiAoL0FuZHJvaWQvLnRlc3QodXNlckFnZW50KSkge1xuICAgIHJldHVybiBcIkFuZHJvaWRcIjtcbiAgfSBlbHNlIGlmICgvKEJsYWNrQmVycnl8UGxheUJvb2t8QkIxMCkvaS50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICByZXR1cm4gXCJCbGFja0JlcnJ5XCI7XG4gIH0gZWxzZSBpZiAoL01hYy9pLnRlc3QodXNlckFnZW50KSkge1xuICAgIHJldHVybiBcIk1hYyBPUyBYXCI7XG4gIH0gZWxzZSBpZiAoL0xpbnV4Ly50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICByZXR1cm4gXCJMaW51eFwiO1xuICB9IGVsc2UgaWYgKC9Dck9TLy50ZXN0KHVzZXJBZ2VudCkpIHtcbiAgICByZXR1cm4gXCJDaHJvbWUgT1NcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0RGV2aWNlSW5mbyh1c2VyQWdlbnQpIHtcbiAgY29uc3QgUEFUVEVSTlMgPSBbXG4gICAge1xuICAgICAgZGV2aWNlOiBcImlQaG9uZVwiLFxuICAgICAgcGF0dGVybnM6IFsvaVBob25lL11cbiAgICB9LFxuICAgIHtcbiAgICAgIGRldmljZTogXCJpUGFkXCIsXG4gICAgICBwYXR0ZXJuczogWy9pUGFkL11cbiAgICB9LFxuICAgIHtcbiAgICAgIGRldmljZTogXCJpUG9kIFRvdWNoXCIsXG4gICAgICBwYXR0ZXJuczogWy9pUG9kL11cbiAgICB9LFxuICAgIHtcbiAgICAgIGRldmljZTogXCJXaW5kb3dzIFBob25lXCIsXG4gICAgICBwYXR0ZXJuczogWy9XaW5kb3dzIFBob25lL2ksIC9XUERlc2t0b3AvXVxuICAgIH0sXG4gICAge1xuICAgICAgZGV2aWNlOiBcIkFuZHJvaWRcIixcbiAgICAgIHBhdHRlcm5zOiBbL0FuZHJvaWQvXVxuICAgIH1cbiAgXTtcbiAgY29uc3QgbWF0Y2ggPSBQQVRURVJOUy5maW5kKFxuICAgIChwYXR0ZXJuKSA9PiBwYXR0ZXJuLnBhdHRlcm5zLnNvbWUoKGV4cHIpID0+IGV4cHIudGVzdCh1c2VyQWdlbnQpKVxuICApO1xuICBjb25zdCBkZXZpY2UgPSBtYXRjaCA9PSBudWxsID8gdm9pZCAwIDogbWF0Y2guZGV2aWNlO1xuICByZXR1cm4ge1xuICAgIGRldmljZTogZGV2aWNlICE9IG51bGwgPyBkZXZpY2UgOiBcIlwiLFxuICAgIGRldmljZVR5cGU6IGRldmljZSA/IFwiTW9iaWxlXCIgOiBcIkRlc2t0b3BcIixcbiAgICBvczogZ2V0T1ModXNlckFnZW50KVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VXNlckFnZW50TWV0YSgpIHtcbiAgY29uc3QgeyBuYXZpZ2F0b3IgfSA9IHdpbmRvdztcbiAgY29uc3QgeyB1c2VyQWdlbnQgfSA9IG5hdmlnYXRvcjtcbiAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKHt9LCBnZXREZXZpY2VJbmZvKHVzZXJBZ2VudCkpO1xufVxuZnVuY3Rpb24gZ2V0V2luZG93TWV0YSgpIHtcbiAgaWYgKCFpc0Jyb3dzZXIyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZ2V0TG9jYXRpb25NZXRhKCkpLCBnZXRTY3JlZW5NZXRhKCkpLCBnZXRVc2VyQWdlbnRNZXRhKCkpO1xufVxudmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIjtcbmZ1bmN0aW9uIGdldEVudk1ldGEoKSB7XG4gIHJldHVybiB7XG4gICAgaXNCcm93c2VyOiBpc0Jyb3dzZXIyLFxuICAgIGlzUHJvZHVjdGlvblxuICB9O1xufVxuZnVuY3Rpb24gcmF3U3BsaXRWYXJpYXRpb24odmFyaWF0aW9uKSB7XG4gIGNvbnN0IHJhd1ZhcmlhdGlvbnMgPSB7fTtcbiAgT2JqZWN0LmtleXModmFyaWF0aW9uKS5mb3JFYWNoKCh2YXJpYXRpb25LZXkpID0+IHtcbiAgICBjb25zdCBbLCBzcGxpdElkXSA9IHZhcmlhdGlvbktleS5zcGxpdChcIi5cIik7XG4gICAgaWYgKHNwbGl0SWQpIHtcbiAgICAgIHJhd1ZhcmlhdGlvbnNbc3BsaXRJZF0gPSB2YXJpYXRpb25bdmFyaWF0aW9uS2V5XTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmF3VmFyaWF0aW9ucztcbn1cbnZhciBQT0xMX1RJTUUgPSA1ZTM7XG5mdW5jdGlvbiB0aHJvdHRsZWQoZnVuYzIpIHtcbiAgbGV0IHRpbWVySWQgPSB2b2lkIDA7XG4gIHJldHVybiAocGFyYW0pID0+IHtcbiAgICBpZiAodGltZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNCcm93c2VyMikge1xuICAgICAgdGltZXJJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB0aW1lcklkID0gdm9pZCAwO1xuICAgICAgICBmdW5jMihwYXJhbSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aW1lcklkID0gdm9pZCAwO1xuICAgICAgICBmdW5jMihwYXJhbSk7XG4gICAgICB9LCBQT0xMX1RJTUUpO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gc3JjL3RyYWNrZXIvaW5kZXgudHNcbnZhciBBUElfRU5EUE9JTlQgPSBcImh0dHBzOi8vYW5hbHl0aWNzLnBsYXNtaWMuYXBwL2NhcHR1cmVcIjtcbnZhciBBUElfUFVCTElDX0tFWSA9IFwicGhjX0JSdllUQW9Nb2FtOWZESGZySW5lRjY3S2R0TUphZ0xWVkNNNkVMTllkNG5cIjtcbnZhciBUUkFDS0VSX1ZFUlNJT04gPSA0O1xudmFyIFBsYXNtaWNUcmFja2VyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihvcHRzMikge1xuICAgIHRoaXMub3B0cyA9IG9wdHMyO1xuICAgIHRoaXMuZXZlbnRRdWV1ZSA9IFtdO1xuICAgIHRoaXMuc2VuZEV2ZW50cyA9IHRocm90dGxlZCgodHJhbnNwb3J0KSA9PiBfX2FzeW5jKHRoaXMsIG51bGwsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICBpZiAodGhpcy5ldmVudFF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBldmVudHMgPSBbLi4udGhpcy5ldmVudFF1ZXVlXTtcbiAgICAgIHRoaXMuZXZlbnRRdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgYXBpX2tleTogQVBJX1BVQkxJQ19LRVksXG4gICAgICAgIGJhdGNoOiBldmVudHNcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzdHJpbmdCb2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgICAgIGlmICh0cmFuc3BvcnQgPT09IFwiYmVhY29uXCIpIHtcbiAgICAgICAgICB3aW5kb3cubmF2aWdhdG9yLnNlbmRCZWFjb24oQVBJX0VORFBPSU5ULCBzdHJpbmdCb2R5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmZldGNoKEFQSV9FTkRQT0lOVCwge1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJvZHk6IHN0cmluZ0JvZHlcbiAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycjIpIHtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgdGhpcy5mZXRjaCA9IChvcHRzMi5uYXRpdmVGZXRjaCAmJiBnbG9iYWxUaGlzLmZldGNoID8gZ2xvYmFsVGhpcy5mZXRjaCA6IHVuZmV0Y2gpLmJpbmQoZ2xvYmFsVGhpcyk7XG4gIH1cbiAgdHJhY2tSZW5kZXIob3B0czIpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHRoaXMuZW5xdWV1ZSh7XG4gICAgICBldmVudDogXCIkcmVuZGVyXCIsXG4gICAgICBwcm9wZXJ0aWVzOiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgdGhpcy5nZXRQcm9wZXJ0aWVzKCkpLCAoX2EgPSBvcHRzMiA9PSBudWxsID8gdm9pZCAwIDogb3B0czIucmVuZGVyQ3R4KSAhPSBudWxsID8gX2EgOiB7fSksIHJhd1NwbGl0VmFyaWF0aW9uKChfYiA9IG9wdHMyID09IG51bGwgPyB2b2lkIDAgOiBvcHRzMi52YXJpYXRpb24pICE9IG51bGwgPyBfYiA6IHt9KSlcbiAgICB9KTtcbiAgfVxuICB0cmFja0ZldGNoKCkge1xuICAgIHRoaXMuZW5xdWV1ZSh7XG4gICAgICBldmVudDogXCIkZmV0Y2hcIixcbiAgICAgIHByb3BlcnRpZXM6IHRoaXMuZ2V0UHJvcGVydGllcygpXG4gICAgfSk7XG4gIH1cbiAgdHJhY2tDb252ZXJzaW9uKHZhbHVlID0gMCkge1xuICAgIHRoaXMuZW5xdWV1ZSh7XG4gICAgICBldmVudDogXCIkY29udmVyc2lvblwiLFxuICAgICAgcHJvcGVydGllczogX19zcHJlYWRQcm9wcyhfX3NwcmVhZFZhbHVlcyh7fSwgdGhpcy5nZXRQcm9wZXJ0aWVzKCkpLCB7XG4gICAgICAgIHZhbHVlXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG4gIGdldFByb3BlcnRpZXMoKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcbiAgICAgIGRpc3RpbmN0X2lkOiBnZXREaXN0aW5jdElkKClcbiAgICB9LCBnZXRXaW5kb3dNZXRhKCkpLCBnZXRFbnZNZXRhKCkpLCB0aGlzLmdldENvbnRleHRNZXRhKCkpLCBnZXRWYXJpYXRpb25Db29raWVWYWx1ZXMoKSksIHtcbiAgICAgIHRpbWVzdGFtcDogKF9hID0gRGF0ZS5ub3coKSkgIT0gbnVsbCA/IF9hIDogKy8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpLFxuICAgICAgdHJhY2tlclZlcnNpb246IFRSQUNLRVJfVkVSU0lPTlxuICAgIH0pO1xuICB9XG4gIGVucXVldWUoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5vcHRzLl9fcGxhc21pY1RyYWNrZXJEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmV2ZW50UXVldWUucHVzaChldmVudCk7XG4gICAgdGhpcy5zZW5kRXZlbnRzKFwiZmV0Y2hcIik7XG4gIH1cbiAgZ2V0Q29udGV4dE1ldGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBsYXRmb3JtOiB0aGlzLm9wdHMucGxhdGZvcm0sXG4gICAgICBwcmV2aWV3OiB0aGlzLm9wdHMucHJldmlldyxcbiAgICAgIHByb2plY3RJZHM6IHRoaXMub3B0cy5wcm9qZWN0SWRzXG4gICAgfTtcbiAgfVxufTtcbmV4cG9ydCB7XG4gIEFwaSxcbiAgUGxhc21pY01vZHVsZXNGZXRjaGVyLFxuICBQbGFzbWljVHJhY2tlcixcbiAgUmVnaXN0cnksXG4gIGdldEJ1bmRsZVN1YnNldFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/loader-core/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/loader-fetcher/dist/index.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@plasmicapp/loader-fetcher/dist/index.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Api: () => (/* binding */ Api),\n/* harmony export */   PlasmicModulesFetcher: () => (/* binding */ PlasmicModulesFetcher),\n/* harmony export */   internal_getCachedBundleInNodeServer: () => (/* binding */ internal_getCachedBundleInNodeServer)\n/* harmony export */ });\n/* harmony import */ var _plasmicapp_isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @plasmicapp/isomorphic-unfetch */ \"(ssr)/./node_modules/@plasmicapp/isomorphic-unfetch/index.js\");\n/* harmony import */ var _plasmicapp_isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_plasmicapp_isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0__);\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/api.ts\n\nvar VERSION = \"10\";\nvar isBrowser = typeof window !== \"undefined\" && window != null && typeof window.document !== \"undefined\";\nfunction transformApiLoaderBundleOutput(bundle) {\n  return __spreadProps(__spreadValues({}, bundle), {\n    filteredIds: Object.fromEntries(bundle.projects.map((p) => [p.id, []]))\n  });\n}\nvar Api = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.lastResponse = void 0;\n    var _a;\n    this.host = (_a = opts.host) != null ? _a : \"https://codegen.plasmic.app\";\n    this.fetch = (opts.nativeFetch && globalThis.fetch ? globalThis.fetch : (_plasmicapp_isomorphic_unfetch__WEBPACK_IMPORTED_MODULE_0___default())).bind(globalThis);\n  }\n  fetchLoaderData(projectIds, opts) {\n    return __async(this, null, function* () {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n      const { platform, preview } = opts;\n      const query = new URLSearchParams([\n        [\"platform\", platform != null ? platform : \"react\"],\n        ...((_b = (_a = opts.platformOptions) == null ? void 0 : _a.nextjs) == null ? void 0 : _b.appDir) ? [[\"nextjsAppDir\", \"true\"]] : [],\n        ...projectIds.map((projectId) => [\"projectId\", projectId]),\n        ...opts.browserOnly ? [[\"browserOnly\", \"true\"]] : [],\n        ...opts.i18nKeyScheme ? [[\"i18nKeyScheme\", opts.i18nKeyScheme]] : [],\n        ...opts.i18nTagPrefix ? [[\"i18nTagPrefix\", opts.i18nTagPrefix]] : [],\n        ...opts.skipHead ? [[\"skipHead\", \"true\"]] : []\n      ]).toString();\n      const url = `${this.host}/api/v1/loader/code/${preview ? \"preview\" : \"published\"}?${query}`;\n      const useLastReponse = (\n        // We consider that manualRedirect is true by default, only by setting it to false\n        // we disable it.\n        !(this.opts.manualRedirect === false) && !preview && !isBrowser\n      );\n      if (useLastReponse) {\n        const redirectResp = yield this.fetch(url, {\n          method: \"GET\",\n          headers: this.makeGetHeaders(),\n          redirect: \"manual\"\n        });\n        if (redirectResp.status !== 301 && redirectResp.status !== 302) {\n          const error = yield this.parseJsonResponse(redirectResp);\n          throw new Error(\n            `Error fetching loader data, a redirect was expected: ${(_d = (_c = error == null ? void 0 : error.error) == null ? void 0 : _c.message) != null ? _d : redirectResp.statusText}`\n          );\n        }\n        const nextLocation = redirectResp.headers.get(\"location\");\n        if (!nextLocation) {\n          throw new Error(\n            `Error fetching loader data, a redirect was expected but no location header was found`\n          );\n        }\n        if (((_e = this.lastResponse) == null ? void 0 : _e.key) === nextLocation) {\n          return this.lastResponse.bundle;\n        }\n        const resp2 = yield this.fetch(`${this.host}${nextLocation}`, {\n          method: \"GET\",\n          headers: this.makeGetHeaders()\n        });\n        if (resp2.status >= 400) {\n          const error = yield this.parseJsonResponse(resp2);\n          throw new Error(\n            `Error fetching loader data: ${(_g = (_f = error == null ? void 0 : error.error) == null ? void 0 : _f.message) != null ? _g : resp2.statusText}`\n          );\n        }\n        const json2 = transformApiLoaderBundleOutput(\n          yield this.parseJsonResponse(resp2)\n        );\n        this.lastResponse = {\n          bundle: json2,\n          key: nextLocation\n        };\n        return json2;\n      }\n      const resp = yield this.fetch(url, {\n        method: \"GET\",\n        headers: this.makeGetHeaders()\n      });\n      if (resp.status >= 400) {\n        const error = yield this.parseJsonResponse(resp);\n        throw new Error(\n          `Error fetching loader data: ${(_i = (_h = error == null ? void 0 : error.error) == null ? void 0 : _h.message) != null ? _i : resp.statusText}`\n        );\n      }\n      const json = yield this.parseJsonResponse(resp);\n      return transformApiLoaderBundleOutput(json);\n    });\n  }\n  parseJsonResponse(resp) {\n    return __async(this, null, function* () {\n      const text = yield resp.text();\n      try {\n        return JSON.parse(text);\n      } catch (err) {\n        throw new Error(\n          `Error parsing JSON response: ${err}; status: ${resp.status}; response: ${text}`\n        );\n      }\n    });\n  }\n  fetchHtmlData(opts) {\n    return __async(this, null, function* () {\n      const { projectId, component, embedHydrate, hydrate } = opts;\n      const query = new URLSearchParams([\n        [\"projectId\", projectId],\n        [\"component\", component],\n        [\"embedHydrate\", embedHydrate ? \"1\" : \"0\"],\n        [\"hydrate\", hydrate ? \"1\" : \"0\"]\n      ]).toString();\n      const resp = yield this.fetch(`${this.host}/api/v1/loader/html?${query}`, {\n        method: \"GET\",\n        headers: this.makeGetHeaders()\n      });\n      const json = yield resp.json();\n      return json;\n    });\n  }\n  makeGetHeaders() {\n    return __spreadValues({\n      \"x-plasmic-loader-version\": VERSION\n    }, this.makeAuthHeaders());\n  }\n  makeAuthHeaders() {\n    const tokens = this.opts.projects.map((p) => `${p.id}:${p.token}`).join(\",\");\n    return {\n      \"x-plasmic-api-project-tokens\": tokens\n    };\n  }\n  getChunksUrl(bundle, modules) {\n    var _a;\n    return `${this.host}/api/v1/loader/chunks?bundleKey=${encodeURIComponent(\n      (_a = bundle.bundleKey) != null ? _a : \"null\"\n    )}&fileName=${encodeURIComponent(\n      modules.map((m) => m.fileName).sort().join(\",\")\n    )}`;\n  }\n};\n\n// src/fetcher.ts\nvar PlasmicModulesFetcher = class {\n  constructor(opts) {\n    this.opts = opts;\n    this.curFetch = void 0;\n    this.api = new Api({\n      projects: opts.projects,\n      host: opts.host,\n      nativeFetch: opts.nativeFetch,\n      manualRedirect: opts.manualRedirect\n    });\n  }\n  getChunksUrl(bundle, modules) {\n    return this.api.getChunksUrl(bundle, modules);\n  }\n  fetchAllData() {\n    return __async(this, null, function* () {\n      const bundle = yield this.getCachedOrFetch();\n      this.cacheBundleInNodeServer(bundle);\n      return bundle;\n    });\n  }\n  getCachedOrFetch() {\n    return __async(this, null, function* () {\n      var _a;\n      if (this.opts.cache) {\n        const cachedData = yield this.opts.cache.get();\n        if (cachedData) {\n          return cachedData;\n        }\n      }\n      if (this.curFetch) {\n        return yield this.curFetch;\n      }\n      if (typeof process === \"undefined\" || !((_a = process.env) == null ? void 0 : _a.PLASMIC_QUIET)) {\n        console.debug(\"Plasmic: doing a fresh fetch...\");\n      }\n      const fetchPromise = this.doFetch();\n      this.curFetch = fetchPromise;\n      try {\n        const data = yield fetchPromise;\n        return data;\n      } finally {\n        if (this.curFetch === fetchPromise) {\n          this.curFetch = void 0;\n        }\n      }\n    });\n  }\n  doFetch() {\n    return __async(this, null, function* () {\n      var _a, _b, _c, _d;\n      const data = yield this.api.fetchLoaderData(\n        this.opts.projects.map(\n          (p) => p.version ? `${p.id}@${p.version}` : p.id\n        ),\n        {\n          platform: this.opts.platform,\n          platformOptions: this.opts.platformOptions,\n          preview: this.opts.preview,\n          i18nKeyScheme: (_b = (_a = this.opts.i18n) == null ? void 0 : _a.keyScheme) != null ? _b : this.opts.i18nKeyScheme,\n          i18nTagPrefix: (_c = this.opts.i18n) == null ? void 0 : _c.tagPrefix,\n          browserOnly: isBrowser,\n          skipHead: this.opts.skipHead\n        }\n      );\n      if (this.opts.cache) {\n        yield this.opts.cache.set(data);\n      }\n      if (typeof process === \"undefined\" || !((_d = process.env) == null ? void 0 : _d.PLASMIC_QUIET)) {\n        console.debug(\n          `Plasmic: fetched designs for ${data.projects.map((p) => `\"${p.name}\" (${p.id}@${p.version})`).join(\", \")}`\n        );\n      }\n      return data;\n    });\n  }\n  cacheBundleInNodeServer(bundle) {\n    if (isBrowser) {\n      return;\n    }\n    const global = globalThis;\n    if (global.__PLASMIC_BUNDLES === void 0) {\n      global.__PLASMIC_BUNDLES = {};\n    }\n    global.__PLASMIC_BUNDLES[getBundleKey(this.opts)] = bundle;\n  }\n};\nfunction internal_getCachedBundleInNodeServer(opts) {\n  var _a;\n  if (isBrowser) {\n    throw new Error(`Should not be consulting Node server cache in browser`);\n  }\n  const global = globalThis;\n  return (_a = global.__PLASMIC_BUNDLES) == null ? void 0 : _a[getBundleKey(opts)];\n}\nfunction getBundleKey({\n  host,\n  platform,\n  i18nKeyScheme,\n  preview,\n  projects,\n  skipHead\n}) {\n  return JSON.stringify({\n    host,\n    platform,\n    i18nKeyScheme,\n    preview,\n    projects,\n    skipHead\n  });\n}\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/loader-fetcher/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/loader-react/dist/index.esm.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@plasmicapp/loader-react/dist/index.esm.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataCtxReader: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.DataCtxReader),\n/* harmony export */   DataProvider: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.DataProvider),\n/* harmony export */   GlobalActionsContext: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.GlobalActionsContext),\n/* harmony export */   GlobalActionsProvider: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.GlobalActionsProvider),\n/* harmony export */   InternalPlasmicComponentLoader: () => (/* binding */ InternalPlasmicComponentLoader),\n/* harmony export */   PageParamsProvider: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.PageParamsProvider),\n/* harmony export */   PlasmicCanvasContext: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.PlasmicCanvasContext),\n/* harmony export */   PlasmicCanvasHost: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.PlasmicCanvasHost),\n/* harmony export */   PlasmicComponent: () => (/* binding */ PlasmicComponent),\n/* harmony export */   PlasmicComponentLoader: () => (/* binding */ PlasmicComponentLoader),\n/* harmony export */   PlasmicRootProvider: () => (/* binding */ PlasmicRootProvider),\n/* harmony export */   PlasmicTranslatorContext: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.PlasmicTranslatorContext),\n/* harmony export */   convertBundlesToComponentRenderData: () => (/* binding */ convertBundlesToComponentRenderData),\n/* harmony export */   extractPlasmicQueryData: () => (/* binding */ extractPlasmicQueryData),\n/* harmony export */   extractPlasmicQueryDataFromElement: () => (/* binding */ extractPlasmicQueryDataFromElement),\n/* harmony export */   hydrateFromElement: () => (/* binding */ hydrateFromElement),\n/* harmony export */   initPlasmicLoader: () => (/* binding */ initPlasmicLoader),\n/* harmony export */   matchesPagePath: () => (/* binding */ matchesPagePath),\n/* harmony export */   plasmicPrepass: () => (/* binding */ plasmicPrepass),\n/* harmony export */   renderToElement: () => (/* binding */ renderToElement),\n/* harmony export */   renderToString: () => (/* binding */ renderToString),\n/* harmony export */   repeatedElement: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.repeatedElement),\n/* harmony export */   useDataEnv: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.useDataEnv),\n/* harmony export */   usePlasmicCanvasContext: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.usePlasmicCanvasContext),\n/* harmony export */   usePlasmicComponent: () => (/* binding */ usePlasmicComponent),\n/* harmony export */   usePlasmicQueryData: () => (/* reexport safe */ _plasmicapp_query__WEBPACK_IMPORTED_MODULE_3__.usePlasmicQueryData),\n/* harmony export */   useSelector: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.useSelector),\n/* harmony export */   useSelectors: () => (/* reexport safe */ _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.useSelectors)\n/* harmony export */ });\n/* harmony import */ var _plasmicapp_data_sources_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @plasmicapp/data-sources-context */ \"(ssr)/./node_modules/@plasmicapp/data-sources-context/dist/index.esm.js\");\n/* harmony import */ var _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @plasmicapp/host */ \"(ssr)/./node_modules/@plasmicapp/host/dist/host.esm.js\");\n/* harmony import */ var _plasmicapp_loader_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @plasmicapp/loader-core */ \"(ssr)/./node_modules/@plasmicapp/loader-core/dist/index.esm.js\");\n/* harmony import */ var _plasmicapp_query__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @plasmicapp/query */ \"(ssr)/./node_modules/@plasmicapp/query/dist/index.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var pascalcase__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pascalcase */ \"(ssr)/./node_modules/pascalcase/index.js\");\n/* harmony import */ var pascalcase__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(pascalcase__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var _plasmicapp_loader_fetcher__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @plasmicapp/loader-fetcher */ \"(ssr)/./node_modules/@plasmicapp/loader-fetcher/dist/index.esm.js\");\n/* harmony import */ var _plasmicapp_loader_splits__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @plasmicapp/loader-splits */ \"(ssr)/./node_modules/@plasmicapp/loader-splits/dist/index.esm.js\");\n/* harmony import */ var _plasmicapp_prepass__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @plasmicapp/prepass */ \"(ssr)/./node_modules/@plasmicapp/prepass/dist/index.esm.js\");\n/* harmony import */ var react_dom_server__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-dom/server */ \"(ssr)/./node_modules/next/dist/compiled/react-dom/server.js\");\n/* __next_internal_client_entry_do_not_use__ DataCtxReader,DataProvider,GlobalActionsContext,GlobalActionsProvider,InternalPlasmicComponentLoader,PageParamsProvider,PlasmicCanvasContext,PlasmicCanvasHost,PlasmicComponent,PlasmicComponentLoader,PlasmicRootProvider,PlasmicTranslatorContext,convertBundlesToComponentRenderData,extractPlasmicQueryData,extractPlasmicQueryDataFromElement,hydrateFromElement,initPlasmicLoader,matchesPagePath,plasmicPrepass,renderToElement,renderToString,repeatedElement,useDataEnv,usePlasmicCanvasContext,usePlasmicComponent,usePlasmicQueryData,useSelector,useSelectors auto */ var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/loader-client.ts\n\n\n\n\n\n\n\n\n\n// src/PlasmicRootProvider.tsx\n\n\n\n// src/utils.tsx\n\n\nvar isBrowser = \"undefined\" !== \"undefined\";\nfunction useForceUpdate() {\n    const [, setTick] = react__WEBPACK_IMPORTED_MODULE_4__.useState(0);\n    const update = react__WEBPACK_IMPORTED_MODULE_4__.useCallback({\n        \"useForceUpdate.useCallback[update]\": ()=>{\n            setTick({\n                \"useForceUpdate.useCallback[update]\": (tick)=>tick + 1\n            }[\"useForceUpdate.useCallback[update]\"]);\n        }\n    }[\"useForceUpdate.useCallback[update]\"], []);\n    return update;\n}\nfunction useStableLookupSpec(spec) {\n    return useStableLookupSpecs(spec)[0];\n}\nfunction useStableLookupSpecs(...specs) {\n    const [stableSpecs, setStableSpecs] = react__WEBPACK_IMPORTED_MODULE_4__.useState(specs);\n    react__WEBPACK_IMPORTED_MODULE_4__.useEffect({\n        \"useStableLookupSpecs.useEffect\": ()=>{\n            if (specs.length !== stableSpecs.length || specs.some({\n                \"useStableLookupSpecs.useEffect\": (s, i)=>!areLookupSpecsEqual(s, stableSpecs[i])\n            }[\"useStableLookupSpecs.useEffect\"])) {\n                setStableSpecs(specs);\n            }\n        }\n    }[\"useStableLookupSpecs.useEffect\"], [\n        specs,\n        stableSpecs\n    ]);\n    return stableSpecs;\n}\nfunction areLookupSpecsEqual(spec1, spec2) {\n    if (spec1 === spec2) {\n        return true;\n    }\n    if (typeof spec1 !== typeof spec2) {\n        return false;\n    }\n    const fullSpec1 = toFullLookup(spec1);\n    const fullSpec2 = toFullLookup(spec2);\n    return (isNameSpec(fullSpec1) && isNameSpec(fullSpec2) && fullSpec1.name === fullSpec2.name && fullSpec1.isCode === fullSpec2.isCode || isPathSpec(fullSpec1) && isPathSpec(fullSpec2) && fullSpec1.path === fullSpec2.path) && fullSpec1.projectId === fullSpec2.projectId;\n}\nfunction isNameSpec(lookup) {\n    return \"name\" in lookup;\n}\nfunction isPathSpec(lookup) {\n    return \"path\" in lookup;\n}\nfunction toFullLookup(lookup) {\n    const namePart = typeof lookup === \"string\" ? lookup : lookup.name;\n    const projectId = typeof lookup === \"string\" ? void 0 : lookup.projectId;\n    const codeComponent = typeof lookup === \"string\" ? void 0 : lookup.isCode;\n    if (codeComponent !== true && namePart.startsWith(\"/\")) {\n        return {\n            path: normalizePath(namePart),\n            projectId\n        };\n    } else {\n        return {\n            name: codeComponent ? namePart : normalizeName(namePart),\n            rawName: namePart.trim(),\n            projectId,\n            isCode: codeComponent\n        };\n    }\n}\nfunction normalizePath(path) {\n    return path.trim();\n}\nfunction normalizeName(name) {\n    return pascalcase__WEBPACK_IMPORTED_MODULE_8___default()(name).trim();\n}\nfunction useIsMounted() {\n    const ref = react__WEBPACK_IMPORTED_MODULE_4__.useRef(false);\n    const isMounted = react__WEBPACK_IMPORTED_MODULE_4__.useCallback({\n        \"useIsMounted.useCallback[isMounted]\": ()=>ref.current\n    }[\"useIsMounted.useCallback[isMounted]\"], []);\n    react__WEBPACK_IMPORTED_MODULE_4__.useEffect({\n        \"useIsMounted.useEffect\": ()=>{\n            ref.current = true;\n            return ({\n                \"useIsMounted.useEffect\": ()=>{\n                    ref.current = false;\n                }\n            })[\"useIsMounted.useEffect\"];\n        }\n    }[\"useIsMounted.useEffect\"], []);\n    return isMounted;\n}\nfunction matchesPagePath(pattern, path) {\n    const normalizedPattern = \"/\" + pattern.replace(/^\\/|\\/$/g, \"\");\n    const normalizedPath = \"/\" + path.replace(/^\\/|\\/$/g, \"\");\n    const regexString = normalizedPattern.replace(/\\/\\[\\[\\.\\.\\.([^\\]^]+)]]/g, \"(?:/([^]*))?\").replace(/\\/\\[\\.\\.\\.([^\\]^]+)]/g, \"/([^]*)\").replace(/\\[([^\\]^]+)]/g, \"([^/]+)\").replace(/\\//g, \"\\\\/\");\n    const regex = new RegExp(`^/?${regexString}$`);\n    const match = normalizedPath.match(regex);\n    if (!match) return false;\n    const slugNames = [\n        ...pattern.matchAll(/\\[\\.?\\.?\\.?([^[\\]]+)]/g)\n    ].map((m)=>m[1]);\n    const params = {};\n    for(let i = 0; i < slugNames.length; i++){\n        const slugName = slugNames[i];\n        const value = match[i + 1];\n        if (pattern.includes(`[[...${slugName}]]`)) {\n            params[slugName] = value ? value.split(\"/\").filter(Boolean) : [];\n        } else if (pattern.includes(`[...${slugName}]`)) {\n            params[slugName] = value.split(\"/\").filter(Boolean);\n        } else if (value !== void 0) {\n            params[slugName] = value;\n        }\n    }\n    return {\n        params\n    };\n}\nfunction isDynamicPagePath(path) {\n    return !!path.match(/\\[[^/]*\\]/);\n}\nfunction matchesCompMeta(lookup, meta) {\n    if (lookup.projectId && meta.projectId !== lookup.projectId) {\n        return false;\n    }\n    return isNameSpec(lookup) ? (lookup.name === meta.name || lookup.rawName === meta.name || lookup.rawName === meta.displayName) && (lookup.isCode == null || lookup.isCode === meta.isCode) : !!(meta.path && matchesPagePath(meta.path, lookup.path));\n}\nfunction getCompMetas(metas, lookup) {\n    const full = toFullLookup(lookup);\n    return metas.filter((meta)=>matchesCompMeta(full, meta)).map((meta)=>{\n        if (isNameSpec(full) || !meta.path) {\n            return meta;\n        }\n        const match = matchesPagePath(meta.path, full.path);\n        if (!match) {\n            return meta;\n        }\n        return __spreadProps(__spreadValues({}, meta), {\n            params: match.params\n        });\n    }).sort((meta1, meta2)=>// We sort the matched component metas by the number of path params, so\n        // if there are two pages `/products/foo` and `/products/[slug]`,\n        // the first one will have higher precedence.\n        Array.from(Object.keys(meta1.params || {})).length - Array.from(Object.keys(meta2.params || {})).length);\n}\nfunction getLookupSpecName(lookup) {\n    if (typeof lookup === \"string\") {\n        return lookup;\n    } else if (lookup.projectId) {\n        return `${lookup.name} (project ${lookup.projectId})`;\n    } else {\n        return lookup.name;\n    }\n}\nfunction MaybeWrap(props) {\n    return props.cond ? props.wrapper(props.children) : props.children;\n}\nfunction uniq(elements) {\n    return Array.from(new Set(elements));\n}\nfunction intersect(a, b) {\n    const setB = new Set(b);\n    return a.filter((elt)=>setB.has(elt));\n}\n// src/variation.ts\nfunction getPlasmicCookieValues() {\n    return Object.fromEntries(document.cookie.split(\"; \").filter((cookie)=>cookie.includes(\"plasmic:\")).map((cookie)=>cookie.split(\"=\")).map(([key, value])=>[\n            key.split(\":\")[1],\n            value\n        ]));\n}\nfunction updatePlasmicCookieValue(key, value) {\n    document.cookie = `plasmic:${key}=${value}`;\n}\nfunction ensureVariationCookies(variation = {}) {\n    Object.keys(variation).map((variationKey)=>{\n        const sliceId = variation[variationKey];\n        updatePlasmicCookieValue(variationKey, sliceId);\n    });\n}\nvar getGlobalVariantsFromSplits = (splits, variation)=>{\n    const globalVariants = [];\n    Object.keys(variation).map((variationKey)=>{\n        const [_type, splitId] = variationKey.split(\".\");\n        const sliceId = variation[variationKey];\n        const split = splits.find((s)=>s.id === splitId || s.externalId === splitId);\n        if (split) {\n            const slice = split.slices.find((s)=>s.id === sliceId || s.externalId === sliceId);\n            if (slice) {\n                slice.contents.map((x)=>{\n                    globalVariants.push({\n                        name: x.group,\n                        value: x.variant,\n                        projectId: x.projectId\n                    });\n                });\n            }\n        }\n    });\n    return globalVariants;\n};\nvar mergeGlobalVariantsSpec = (target, from)=>{\n    let result = [\n        ...target\n    ];\n    const existingGlobalVariants = new Set(target.map((t)=>{\n        var _a;\n        return `${t.name}-${(_a = t.projectId) != null ? _a : \"\"}`;\n    }));\n    const newGlobals = from.filter((t)=>{\n        var _a;\n        return !existingGlobalVariants.has(`${t.name}-${(_a = t.projectId) != null ? _a : \"\"}`);\n    });\n    if (newGlobals.length > 0) {\n        result = [\n            ...result,\n            ...newGlobals\n        ];\n    }\n    return result;\n};\n// src/PlasmicRootProvider.tsx\nvar PlasmicRootContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createContext(void 0);\nfunction PlasmicRootProvider(props) {\n    const { globalVariants, prefetchedData, children, skipCss, skipFonts, prefetchedQueryData, suspenseForQueryData, globalContextsProps, variation, translator, Head, Link, pageRoute, pageParams, pageQuery, suspenseFallback, disableLoadingBoundary, disableRootLoadingBoundary } = props;\n    const loader = props.loader.__internal;\n    if (prefetchedData) {\n        loader.registerPrefetchedBundle(prefetchedData.bundle);\n    }\n    const [splits, setSplits] = react__WEBPACK_IMPORTED_MODULE_4__.useState(loader.getActiveSplits());\n    const forceUpdate = useForceUpdate();\n    const watcher = react__WEBPACK_IMPORTED_MODULE_4__.useMemo({\n        \"PlasmicRootProvider.useMemo[watcher]\": ()=>({\n                onDataFetched: ({\n                    \"PlasmicRootProvider.useMemo[watcher]\": ()=>{\n                        setSplits(loader.getActiveSplits());\n                        forceUpdate();\n                    }\n                })[\"PlasmicRootProvider.useMemo[watcher]\"]\n            })\n    }[\"PlasmicRootProvider.useMemo[watcher]\"], [\n        loader,\n        forceUpdate\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_4__.useEffect({\n        \"PlasmicRootProvider.useEffect\": ()=>{\n            loader.subscribePlasmicRoot(watcher);\n            return ({\n                \"PlasmicRootProvider.useEffect\": ()=>loader.unsubscribePlasmicRoot(watcher)\n            })[\"PlasmicRootProvider.useEffect\"];\n        }\n    }[\"PlasmicRootProvider.useEffect\"], [\n        watcher,\n        loader\n    ]);\n    const currentContextValue = react__WEBPACK_IMPORTED_MODULE_4__.useContext(PlasmicRootContext);\n    const { user, userAuthToken, isUserLoading, authRedirectUri } = props;\n    const value = react__WEBPACK_IMPORTED_MODULE_4__.useMemo({\n        \"PlasmicRootProvider.useMemo[value]\": ()=>{\n            var _a, _b, _c;\n            const withCurrentContextValueFallback = {\n                \"PlasmicRootProvider.useMemo[value].withCurrentContextValueFallback\": (v, key)=>{\n                    return v !== void 0 ? v : currentContextValue == null ? void 0 : currentContextValue[key];\n                }\n            }[\"PlasmicRootProvider.useMemo[value].withCurrentContextValueFallback\"];\n            return {\n                globalVariants: [\n                    ...mergeGlobalVariantsSpec(globalVariants != null ? globalVariants : [], getGlobalVariantsFromSplits(splits, variation != null ? variation : {})),\n                    ...(_a = currentContextValue == null ? void 0 : currentContextValue.globalVariants) != null ? _a : []\n                ],\n                globalContextsProps: __spreadValues(__spreadValues({}, (_b = currentContextValue == null ? void 0 : currentContextValue.globalContextsProps) != null ? _b : {}), globalContextsProps != null ? globalContextsProps : {}),\n                loader: withCurrentContextValueFallback(loader, \"loader\"),\n                variation: __spreadValues(__spreadValues({}, (_c = currentContextValue == null ? void 0 : currentContextValue.variation) != null ? _c : {}), variation != null ? variation : {}),\n                translator: withCurrentContextValueFallback(translator, \"translator\"),\n                Head: withCurrentContextValueFallback(Head, \"Head\"),\n                Link: withCurrentContextValueFallback(Link, \"Link\"),\n                user: withCurrentContextValueFallback(user, \"user\"),\n                userAuthToken: withCurrentContextValueFallback(userAuthToken, \"userAuthToken\"),\n                isUserLoading: withCurrentContextValueFallback(isUserLoading, \"isUserLoading\"),\n                authRedirectUri: withCurrentContextValueFallback(authRedirectUri, \"authRedirectUri\"),\n                suspenseFallback: withCurrentContextValueFallback(suspenseFallback, \"suspenseFallback\"),\n                disableLoadingBoundary: withCurrentContextValueFallback(disableLoadingBoundary, \"disableLoadingBoundary\")\n            };\n        }\n    }[\"PlasmicRootProvider.useMemo[value]\"], [\n        globalVariants,\n        variation,\n        globalContextsProps,\n        loader,\n        splits,\n        translator,\n        Head,\n        Link,\n        user,\n        userAuthToken,\n        isUserLoading,\n        authRedirectUri,\n        suspenseFallback,\n        disableLoadingBoundary,\n        currentContextValue\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_4__.useEffect({\n        \"PlasmicRootProvider.useEffect\": ()=>{\n            ensureVariationCookies(variation);\n            loader.trackRender({\n                renderCtx: {\n                    // We track the provider as a single entity\n                    rootComponentId: \"provider\",\n                    teamIds: loader.getTeamIds(),\n                    projectIds: loader.getProjectIds()\n                },\n                variation: value.variation\n            });\n        }\n    }[\"PlasmicRootProvider.useEffect\"], [\n        loader,\n        value\n    ]);\n    const reactMajorVersion = +react__WEBPACK_IMPORTED_MODULE_4__.version.split(\".\")[0];\n    const shouldDisableRootLoadingBoundary = disableRootLoadingBoundary != null ? disableRootLoadingBoundary : loader.getBundle().disableRootLoadingBoundaryByDefault;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(_plasmicapp_query__WEBPACK_IMPORTED_MODULE_3__.PlasmicQueryDataProvider, {\n        prefetchedCache: prefetchedQueryData,\n        suspense: suspenseForQueryData\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(PlasmicRootContext.Provider, {\n        value\n    }, !skipCss && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(PlasmicCss, {\n        loader,\n        prefetchedData,\n        skipFonts\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(_plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.PageParamsProvider, {\n        route: pageRoute,\n        params: pageParams,\n        query: pageQuery\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(MaybeWrap, {\n        cond: !shouldDisableRootLoadingBoundary && reactMajorVersion >= 18,\n        wrapper: (contents)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(react__WEBPACK_IMPORTED_MODULE_4__.Suspense, {\n                fallback: suspenseFallback != null ? suspenseFallback : \"Loading...\"\n            }, contents)\n    }, children))));\n}\nvar PlasmicCss = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.memo(function PlasmicCss2(props) {\n    const { loader, prefetchedData, skipFonts } = props;\n    const [useScopedCss, setUseScopedCss] = react__WEBPACK_IMPORTED_MODULE_4__.useState(!!prefetchedData);\n    const builtCss = buildCss(loader, {\n        scopedCompMetas: useScopedCss && prefetchedData ? prefetchedData.bundle.components : void 0,\n        skipFonts\n    });\n    const forceUpdate = useForceUpdate();\n    const watcher = react__WEBPACK_IMPORTED_MODULE_4__.useMemo({\n        \"PlasmicCss.PlasmicCss2.useMemo[watcher]\": ()=>({\n                onDataFetched: ({\n                    \"PlasmicCss.PlasmicCss2.useMemo[watcher]\": ()=>{\n                        setUseScopedCss(false);\n                        forceUpdate();\n                    }\n                })[\"PlasmicCss.PlasmicCss2.useMemo[watcher]\"]\n            })\n    }[\"PlasmicCss.PlasmicCss2.useMemo[watcher]\"], [\n        loader,\n        forceUpdate\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_4__.useEffect({\n        \"PlasmicCss.PlasmicCss2.useEffect\": ()=>{\n            loader.subscribePlasmicRoot(watcher);\n            return ({\n                \"PlasmicCss.PlasmicCss2.useEffect\": ()=>loader.unsubscribePlasmicRoot(watcher)\n            })[\"PlasmicCss.PlasmicCss2.useEffect\"];\n        }\n    }[\"PlasmicCss.PlasmicCss2.useEffect\"], [\n        watcher,\n        loader\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(\"style\", {\n        dangerouslySetInnerHTML: {\n            __html: builtCss\n        }\n    });\n});\nfunction buildCss(loader, opts) {\n    const { scopedCompMetas, skipFonts } = opts;\n    const cssFiles = scopedCompMetas && /* @__PURE__ */ new Set([\n        \"entrypoint.css\",\n        ...scopedCompMetas.map((c)=>c.cssFile)\n    ]);\n    const cssModules = loader.getLookup().getCss().filter((f)=>!cssFiles || cssFiles.has(f.fileName));\n    const getPri = (fileName)=>fileName === \"entrypoint.css\" ? 0 : 1;\n    const compareModules = (a, b)=>getPri(a.fileName) !== getPri(b.fileName) ? getPri(a.fileName) - getPri(b.fileName) : a.fileName.localeCompare(b.fileName);\n    cssModules.sort(compareModules);\n    const remoteFonts = loader.getLookup().getRemoteFonts();\n    return `\n    ${skipFonts ? \"\" : remoteFonts.map((f)=>`@import url('${f.url}');`).join(\"\\n\")}\n    ${cssModules.map((mod)=>mod.source).join(\"\\n\")}\n  `;\n}\nfunction usePlasmicRootContext() {\n    return react__WEBPACK_IMPORTED_MODULE_4__.useContext(PlasmicRootContext);\n}\n// src/global-variants.ts\nfunction createUseGlobalVariant(name, projectId) {\n    return ()=>{\n        var _a;\n        const rootContext = usePlasmicRootContext();\n        if (!rootContext) {\n            return void 0;\n        }\n        const loader = rootContext.loader;\n        const spec = [\n            ...loader.getGlobalVariants(),\n            ...(_a = rootContext.globalVariants) != null ? _a : []\n        ].find((spec2)=>spec2.name === name && (!spec2.projectId || spec2.projectId === projectId));\n        return spec ? spec.value : void 0;\n    };\n}\n// src/loader-shared.ts\n\n\n\n// src/bundles.ts\n\nfunction getUsedComps(allComponents, entryCompIds) {\n    const q = [\n        ...entryCompIds\n    ];\n    const seenIds = new Set(entryCompIds);\n    const componentMetaById = new Map(allComponents.map((meta)=>[\n            meta.id,\n            meta\n        ]));\n    const usedComps = [];\n    while(q.length > 0){\n        const [id] = q.splice(0, 1);\n        const meta = componentMetaById.get(id);\n        if (!meta) {\n            continue;\n        }\n        usedComps.push(meta);\n        meta.usedComponents.forEach((usedCompId)=>{\n            if (!seenIds.has(usedCompId)) {\n                seenIds.add(usedCompId);\n                q.push(usedCompId);\n            }\n        });\n    }\n    return usedComps;\n}\nfunction prepComponentData(bundle, compMetas, opts) {\n    if (compMetas.length === 0) {\n        return {\n            entryCompMetas: bundle.components,\n            bundle,\n            remoteFontUrls: []\n        };\n    }\n    const usedComps = getUsedComps(bundle.components, compMetas.map((compMeta)=>compMeta.id));\n    const compPaths = usedComps.map((compMeta)=>compMeta.entry);\n    const subBundle = (0,_plasmicapp_loader_core__WEBPACK_IMPORTED_MODULE_2__.getBundleSubset)(bundle, [\n        \"entrypoint.css\",\n        ...compPaths,\n        \"root-provider.js\",\n        ...bundle.projects.map((x)=>x.globalContextsProviderFileName).filter((x)=>!!x),\n        // We need to explicitly include global context provider components\n        // to make sure they are kept in bundle.components. That's because\n        // for esbuild, just the globalContextsProviderFileName is not enough,\n        // because it will import a chunk that includes the global context\n        // component, instead of importing that global context component's\n        // entry file. And because nothing depends on the global context component's\n        // entry file, we end up excluding the global context component from\n        // bundle.components, which then makes its substitution not work.\n        // Instead, we forcibly include it here (we'll definitely need it anyway!).\n        ...bundle.components.filter((c)=>c.isGlobalContextProvider).map((c)=>c.entry),\n        ...bundle.globalGroups.map((g)=>g.contextFile)\n    ], opts);\n    const remoteFontUrls = [];\n    subBundle.projects.forEach((p)=>remoteFontUrls.push(...p.remoteFonts.map((f)=>f.url)));\n    return {\n        entryCompMetas: compMetas,\n        bundle: subBundle,\n        remoteFontUrls\n    };\n}\nfunction mergeBundles(target, from) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const existingProjects = new Set(target.projects.map((p)=>p.id));\n    const newProjects = from.projects.filter((p)=>!existingProjects.has(p.id));\n    if (newProjects.length > 0) {\n        target = __spreadProps(__spreadValues({}, target), {\n            projects: [\n                ...target.projects,\n                ...newProjects\n            ]\n        });\n    }\n    const existingCompIds = new Set(target.components.map((c)=>c.id));\n    function shouldIncludeComponentInBundle(c) {\n        var _a2;\n        if (existingCompIds.has(c.id)) {\n            return false;\n        }\n        if (!existingProjects.has(c.projectId)) {\n            return true;\n        }\n        const targetBundleFilteredIds = (_a2 = target.filteredIds[c.projectId]) != null ? _a2 : [];\n        return targetBundleFilteredIds.includes(c.id);\n    }\n    const newCompMetas = from.components.filter((m)=>shouldIncludeComponentInBundle(m));\n    if (newCompMetas.length > 0) {\n        target = __spreadProps(__spreadValues({}, target), {\n            components: [\n                ...target.components,\n                ...newCompMetas\n            ]\n        });\n        target.filteredIds = Object.fromEntries(Object.entries(target.filteredIds).map(([k, v])=>[\n                k,\n                [\n                    ...v\n                ]\n            ]));\n        from.projects.forEach((fromProject)=>{\n            var _a2, _b2;\n            const projectId = fromProject.id;\n            const fromBundleFilteredIds = (_a2 = from.filteredIds[projectId]) != null ? _a2 : [];\n            if (!existingProjects.has(projectId)) {\n                target.filteredIds[projectId] = [\n                    ...fromBundleFilteredIds\n                ];\n            } else {\n                target.filteredIds[projectId] = intersect((_b2 = target.filteredIds[projectId]) != null ? _b2 : [], fromBundleFilteredIds);\n            }\n        });\n    }\n    const existingModules = {\n        browser: new Set(target.modules.browser.map((m)=>m.fileName)),\n        server: new Set(target.modules.server.map((m)=>m.fileName))\n    };\n    const newModules = {\n        browser: from.modules.browser.filter((m)=>!existingModules.browser.has(m.fileName)),\n        server: from.modules.server.filter((m)=>!existingModules.server.has(m.fileName))\n    };\n    if (newModules.browser.length > 0 || newModules.server.length > 0) {\n        target = __spreadProps(__spreadValues({}, target), {\n            modules: {\n                browser: [\n                    ...target.modules.browser,\n                    ...newModules.browser\n                ],\n                server: [\n                    ...target.modules.server,\n                    ...newModules.server\n                ]\n            }\n        });\n    }\n    const existingGlobalIds = new Set(target.globalGroups.map((g)=>g.id));\n    const newGlobals = from.globalGroups.filter((g)=>!existingGlobalIds.has(g.id));\n    if (newGlobals.length > 0) {\n        target = __spreadProps(__spreadValues({}, target), {\n            globalGroups: [\n                ...target.globalGroups,\n                ...newGlobals\n            ]\n        });\n    }\n    const existingSplitIds = new Set(target.activeSplits.map((s)=>s.id));\n    const newSplits = (_a = from.activeSplits.filter(// Don't include splits belonging to projects already present\n    // in the target bundle\n    (s)=>!existingSplitIds.has(s.id) && !existingProjects.has(s.projectId))) != null ? _a : [];\n    if (newSplits.length > 0) {\n        target = __spreadProps(__spreadValues({}, target), {\n            activeSplits: [\n                ...target.activeSplits,\n                ...newSplits\n            ]\n        });\n    }\n    target.bundleKey = (_c = (_b = target.bundleKey) != null ? _b : from.bundleKey) != null ? _c : null;\n    target.deferChunksByDefault = (_e = (_d = target.deferChunksByDefault) != null ? _d : from.deferChunksByDefault) != null ? _e : false;\n    target.disableRootLoadingBoundaryByDefault = (_g = (_f = target.disableRootLoadingBoundaryByDefault) != null ? _f : from.disableRootLoadingBoundaryByDefault) != null ? _g : false;\n    return target;\n}\nvar convertBundlesToComponentRenderData = (bundles, compMetas)=>{\n    if (bundles.length === 0) {\n        return null;\n    }\n    const mergedBundles = bundles.reduce((prev, cur)=>mergeBundles(prev, cur));\n    return prepComponentData(mergedBundles, compMetas);\n};\n// src/component-lookup.ts\nfunction getFirstCompMeta(metas, lookup) {\n    const filtered = getCompMetas(metas, lookup);\n    return filtered.length === 0 ? void 0 : filtered[0];\n}\nvar ComponentLookup = class {\n    constructor(bundle, registry){\n        this.bundle = bundle;\n        this.registry = registry;\n    }\n    getComponentMeta(spec) {\n        const compMeta = getFirstCompMeta(this.bundle.components, spec);\n        return compMeta;\n    }\n    getComponent(spec, opts = {}) {\n        const compMeta = getFirstCompMeta(this.bundle.components, spec);\n        if (!compMeta) {\n            throw new Error(`Component not found: ${spec}`);\n        }\n        const moduleName = compMeta.entry;\n        if (!this.registry.hasModule(moduleName, opts)) {\n            throw new Error(`Component not yet fetched: ${compMeta.name}`);\n        }\n        const entry = this.registry.load(moduleName, {\n            forceOriginal: opts.forceOriginal\n        });\n        return !opts.forceOriginal && typeof (entry == null ? void 0 : entry.getPlasmicComponent) === \"function\" ? entry.getPlasmicComponent() : entry.default;\n    }\n    hasComponent(spec) {\n        const compMeta = getFirstCompMeta(this.bundle.components, spec);\n        if (compMeta) {\n            return this.registry.hasModule(compMeta.entry);\n        }\n        return false;\n    }\n    getGlobalContexts() {\n        const customGlobalMetas = this.bundle.globalGroups.filter((m)=>m.type === \"global-user-defined\");\n        return customGlobalMetas.map((meta)=>({\n                meta,\n                context: this.registry.load(meta.contextFile).default\n            }));\n    }\n    getGlobalContextsProvider(spec) {\n        const compMeta = getFirstCompMeta(this.bundle.components, spec);\n        const projectMeta = compMeta ? this.bundle.projects.find((x)=>x.id === compMeta.projectId) : void 0;\n        if (!projectMeta || !projectMeta.globalContextsProviderFileName || !this.registry.hasModule(projectMeta.globalContextsProviderFileName)) {\n            return void 0;\n        }\n        const entry = this.registry.load(projectMeta.globalContextsProviderFileName);\n        return typeof (entry == null ? void 0 : entry.getPlasmicComponent) === \"function\" ? entry.getPlasmicComponent() : entry.default;\n    }\n    getRootProvider() {\n        const entry = this.registry.load(\"root-provider.js\");\n        return entry.default;\n    }\n    getCss() {\n        return this.bundle.modules.browser.filter((mod)=>mod.type === \"asset\" && mod.fileName.endsWith(\"css\"));\n    }\n    getRemoteFonts() {\n        return this.bundle.projects.flatMap((p)=>p.remoteFonts);\n    }\n};\n// src/loader-shared.ts\nvar SUBSTITUTED_COMPONENTS = {};\nvar REGISTERED_CODE_COMPONENT_HELPERS = {};\nvar SUBSTITUTED_GLOBAL_VARIANT_HOOKS = {};\nvar REGISTERED_CUSTOM_FUNCTIONS = {};\nfunction customFunctionImportAlias(meta) {\n    const customFunctionPrefix = `__fn_`;\n    return meta.namespace ? `${customFunctionPrefix}${meta.namespace}__${meta.name}` : `${customFunctionPrefix}${meta.name}`;\n}\nfunction parseFetchComponentDataArgs(...args) {\n    let specs;\n    let opts;\n    if (Array.isArray(args[0])) {\n        specs = args[0];\n        opts = args[1];\n    } else {\n        specs = args;\n        opts = void 0;\n    }\n    return {\n        specs,\n        opts\n    };\n}\nvar BaseInternalPlasmicComponentLoader = class {\n    constructor(args){\n        this.registry = new _plasmicapp_loader_core__WEBPACK_IMPORTED_MODULE_2__.Registry();\n        this.globalVariants = [];\n        this.subs = [];\n        this.bundle = {\n            modules: {\n                browser: [],\n                server: []\n            },\n            components: [],\n            globalGroups: [],\n            projects: [],\n            activeSplits: [],\n            bundleKey: null,\n            deferChunksByDefault: false,\n            disableRootLoadingBoundaryByDefault: false,\n            filteredIds: {}\n        };\n        this.opts = args.opts;\n        this.fetcher = args.fetcher;\n        this.tracker = args.tracker;\n        this.onBundleMerged = args.onBundleMerged;\n        this.onBundleFetched = args.onBundleFetched;\n        this.registerModules(args.builtinModules);\n    }\n    maybeGetCompMetas(...specs) {\n        const found = /* @__PURE__ */ new Set();\n        const missing = [];\n        for (const spec of specs){\n            const filteredMetas = getCompMetas(this.bundle.components, spec);\n            if (filteredMetas.length > 0) {\n                filteredMetas.forEach((meta)=>found.add(meta));\n            } else {\n                missing.push(spec);\n            }\n        }\n        return {\n            found: Array.from(found.keys()),\n            missing\n        };\n    }\n    maybeFetchComponentData(...args) {\n        return __async(this, null, function*() {\n            const { specs, opts } = parseFetchComponentDataArgs(...args);\n            const returnWithSpecsToFetch = (specsToFetch)=>__async(this, null, function*() {\n                    yield this.fetchMissingData({\n                        missingSpecs: specsToFetch\n                    });\n                    const { found: existingMetas2, missing: missingSpecs2 } = this.maybeGetCompMetas(...specs);\n                    if (missingSpecs2.length > 0) {\n                        return null;\n                    }\n                    return prepComponentData(this.bundle, existingMetas2, opts);\n                });\n            if (this.opts.alwaysFresh) {\n                return yield returnWithSpecsToFetch(specs);\n            }\n            const { found: existingMetas, missing: missingSpecs } = this.maybeGetCompMetas(...specs);\n            if (missingSpecs.length === 0) {\n                return prepComponentData(this.bundle, existingMetas, opts);\n            }\n            return yield returnWithSpecsToFetch(missingSpecs);\n        });\n    }\n    fetchComponentData(...args) {\n        return __async(this, null, function*() {\n            const { specs, opts } = parseFetchComponentDataArgs(...args);\n            const data = yield this.maybeFetchComponentData(specs, opts);\n            if (!data) {\n                const { missing: missingSpecs } = this.maybeGetCompMetas(...specs);\n                throw new Error(`Unable to find components ${missingSpecs.map(getLookupSpecName).join(\", \")}`);\n            }\n            return data;\n        });\n    }\n    fetchPages(opts) {\n        return __async(this, null, function*() {\n            this.maybeReportClientSideFetch(()=>`Plasmic: fetching all page metadata in the browser`);\n            const data = yield this.fetchAllData();\n            return data.components.filter((comp)=>comp.isPage && comp.path && ((opts == null ? void 0 : opts.includeDynamicPages) || !isDynamicPagePath(comp.path)));\n        });\n    }\n    fetchComponents() {\n        return __async(this, null, function*() {\n            this.maybeReportClientSideFetch(()=>`Plasmic: fetching all component metadata in the browser`);\n            const data = yield this.fetchAllData();\n            return data.components;\n        });\n    }\n    getActiveSplits() {\n        return this.bundle.activeSplits;\n    }\n    getChunksUrl(bundle, modules) {\n        return this.fetcher.getChunksUrl(bundle, modules);\n    }\n    fetchMissingData(opts) {\n        return __async(this, null, function*() {\n            this.maybeReportClientSideFetch(()=>`Plasmic: fetching missing components in the browser: ${opts.missingSpecs.map((spec)=>getLookupSpecName(spec)).join(\", \")}`);\n            return this.fetchAllData();\n        });\n    }\n    maybeReportClientSideFetch(mkMsg) {\n        if (isBrowser && this.opts.onClientSideFetch) {\n            const msg = mkMsg();\n            if (this.opts.onClientSideFetch === \"warn\") {\n                console.warn(msg);\n            } else {\n                throw new Error(msg);\n            }\n        }\n    }\n    fetchAllData() {\n        return __async(this, null, function*() {\n            var _a;\n            const bundle = yield this.fetcher.fetchAllData();\n            this.tracker.trackFetch();\n            this.mergeBundle(bundle);\n            (_a = this.onBundleFetched) == null ? void 0 : _a.call(this);\n            return bundle;\n        });\n    }\n    mergeBundle(newBundle) {\n        var _a, _b;\n        newBundle.bundleKey = (_a = newBundle.bundleKey) != null ? _a : null;\n        if (newBundle.bundleKey && this.bundle.bundleKey && newBundle.bundleKey !== this.bundle.bundleKey) {\n            console.warn(`Plasmic Error: Different code export hashes. This can happen if your app is using different loaders with different project IDs or project versions.\nConflicting values:\n${newBundle.bundleKey}\n${this.bundle.bundleKey}`);\n        }\n        this.bundle = mergeBundles(newBundle, this.bundle);\n        (_b = this.onBundleMerged) == null ? void 0 : _b.call(this);\n    }\n    getBundle() {\n        return this.bundle;\n    }\n    clearCache() {\n        this.bundle = {\n            modules: {\n                browser: [],\n                server: []\n            },\n            components: [],\n            globalGroups: [],\n            projects: [],\n            activeSplits: [],\n            bundleKey: null,\n            deferChunksByDefault: false,\n            disableRootLoadingBoundaryByDefault: false,\n            filteredIds: {}\n        };\n        this.registry.clear();\n    }\n    registerModules(modules) {\n        if (Object.keys(modules).some((name)=>this.registry.getRegisteredModule(name) !== modules[name])) {\n            if (!this.registry.isEmpty()) {\n                console.warn(\"Calling PlasmicComponentLoader.registerModules() after Plasmic component has rendered; starting over.\");\n                this.registry.clear();\n            }\n            for (const key of Object.keys(modules)){\n                this.registry.register(key, modules[key]);\n            }\n        }\n    }\n    substituteComponent(component, name) {\n        this.internalSubstituteComponent(component, name, void 0);\n    }\n    internalSubstituteComponent(component, name, codeComponentHelpers) {\n        if (!this.isRegistryEmpty()) {\n            console.warn(\"Calling PlasmicComponentLoader.registerSubstitution() after Plasmic component has rendered; starting over.\");\n            this.clearRegistry();\n        }\n        this.subs.push({\n            lookup: name,\n            component,\n            codeComponentHelpers\n        });\n    }\n    refreshRegistry() {\n        for (const sub of this.subs){\n            const metas = getCompMetas(this.getBundle().components, sub.lookup);\n            metas.forEach((meta)=>{\n                SUBSTITUTED_COMPONENTS[meta.id] = sub.component;\n                if (sub.codeComponentHelpers) {\n                    REGISTERED_CODE_COMPONENT_HELPERS[meta.id] = sub.codeComponentHelpers;\n                }\n            });\n        }\n        this.registry.updateModules(this.getBundle());\n    }\n    isRegistryEmpty() {\n        return this.registry.isEmpty();\n    }\n    clearRegistry() {\n        this.registry.clear();\n    }\n    setGlobalVariants(globalVariants) {\n        this.globalVariants = globalVariants;\n    }\n    getGlobalVariants() {\n        return this.globalVariants;\n    }\n    registerPrefetchedBundle(bundle) {\n        if (!isBrowser) {\n            const cachedBundle = (0,_plasmicapp_loader_fetcher__WEBPACK_IMPORTED_MODULE_9__.internal_getCachedBundleInNodeServer)(this.opts);\n            if (cachedBundle) {\n                this.mergeBundle(cachedBundle);\n            }\n        }\n        this.mergeBundle(bundle);\n    }\n    getLookup() {\n        return new ComponentLookup(this.getBundle(), this.registry);\n    }\n    trackConversion(value = 0) {\n        this.tracker.trackConversion(value);\n    }\n    getActiveVariation(opts) {\n        return __async(this, null, function*() {\n            yield this.fetchComponents();\n            return (0,_plasmicapp_loader_splits__WEBPACK_IMPORTED_MODULE_10__.getActiveVariation)(__spreadProps(__spreadValues({}, opts), {\n                splits: this.getBundle().activeSplits\n            }));\n        });\n    }\n    getTeamIds() {\n        return uniq(this.getBundle().projects.map((p)=>p.teamId ? `${p.teamId}${p.indirect ? \"@indirect\" : \"\"}` : null).filter((x)=>!!x));\n    }\n    getProjectIds() {\n        return uniq(this.getBundle().projects.map((p)=>`${p.id}${p.indirect ? \"@indirect\" : \"\"}`));\n    }\n    trackRender(opts) {\n        this.tracker.trackRender(opts);\n    }\n};\nvar PlasmicComponentLoader = class {\n    constructor(internal){\n        this.warnedRegisterComponent = false;\n        this.__internal = internal;\n    }\n    /**\n   * Sets global variants to be used for all components.  Note that\n   * this is not reactive, and will not re-render all components\n   * already mounted; instead, it should be used to activate global\n   * variants that should always be activated for the lifetime of this\n   * app.  If you'd like to reactively change the global variants,\n   * you should specify them via <PlasmicRootProvider />\n   */ setGlobalVariants(globalVariants) {\n        this.__internal.setGlobalVariants(globalVariants);\n    }\n    registerModules(modules) {\n        this.__internal.registerModules(modules);\n    }\n    /**\n   * Register custom components that should be swapped in for\n   * components defined in your project.  You can use this to\n   * swap in / substitute a Plasmic component with a \"real\" component.\n   */ substituteComponent(component, name) {\n        this.__internal.substituteComponent(component, name);\n    }\n    registerComponent(component, metaOrName) {\n        if (metaOrName && typeof metaOrName === \"object\" && \"props\" in metaOrName) {\n            this.__internal.registerComponent(component, metaOrName);\n        } else {\n            if ( true && !this.warnedRegisterComponent) {\n                console.warn(`PlasmicLoader: Using deprecated method \\`registerComponent\\` for component substitution. Please consider using \\`substituteComponent\\` instead.`);\n                this.warnedRegisterComponent = true;\n            }\n            this.substituteComponent(component, metaOrName);\n        }\n    }\n    registerFunction(fn, meta) {\n        this.__internal.registerFunction(fn, meta);\n    }\n    registerGlobalContext(context, meta) {\n        this.__internal.registerGlobalContext(context, meta);\n    }\n    registerTrait(trait, meta) {\n        this.__internal.registerTrait(trait, meta);\n    }\n    registerToken(token) {\n        this.__internal.registerToken(token);\n    }\n    fetchComponentData(...args) {\n        return this.__internal.fetchComponentData(...args);\n    }\n    maybeFetchComponentData(...args) {\n        return __async(this, null, function*() {\n            return this.__internal.maybeFetchComponentData(...args);\n        });\n    }\n    /**\n   * Returns all the page component metadata for these projects.\n   */ fetchPages(opts) {\n        return __async(this, null, function*() {\n            return this.__internal.fetchPages(opts);\n        });\n    }\n    /**\n   * Returns all components metadata for these projects.\n   */ fetchComponents() {\n        return __async(this, null, function*() {\n            return this.__internal.fetchComponents();\n        });\n    }\n    _getActiveVariation(opts) {\n        return __async(this, null, function*() {\n            return this.__internal.getActiveVariation(opts);\n        });\n    }\n    getActiveVariation(opts) {\n        return __async(this, null, function*() {\n            return this._getActiveVariation({\n                traits: opts.traits,\n                getKnownValue: (key)=>{\n                    if (opts.known) {\n                        return opts.known[key];\n                    } else {\n                        const cookies = getPlasmicCookieValues();\n                        return cookies[key];\n                    }\n                },\n                updateKnownValue: (key, value)=>{\n                    if (!opts.known) {\n                        updatePlasmicCookieValue(key, value);\n                    }\n                }\n            });\n        });\n    }\n    getChunksUrl(bundle, modules) {\n        return this.__internal.getChunksUrl(bundle, modules);\n    }\n    getExternalVariation(variation, filters) {\n        return (0,_plasmicapp_loader_splits__WEBPACK_IMPORTED_MODULE_10__.getExternalIds)(this.getActiveSplits(), variation, filters);\n    }\n    getActiveSplits() {\n        return this.__internal.getActiveSplits();\n    }\n    trackConversion(value = 0) {\n        this.__internal.trackConversion(value);\n    }\n    clearCache() {\n        return this.__internal.clearCache();\n    }\n};\n// src/loader-client.ts\nvar InternalPlasmicComponentLoader = class extends BaseInternalPlasmicComponentLoader {\n    constructor(opts){\n        const tracker = new _plasmicapp_loader_core__WEBPACK_IMPORTED_MODULE_2__.PlasmicTracker(__spreadProps(__spreadValues({}, opts), {\n            projectIds: opts.projects.map((p)=>p.id)\n        }));\n        super({\n            opts,\n            tracker,\n            fetcher: new _plasmicapp_loader_core__WEBPACK_IMPORTED_MODULE_2__.PlasmicModulesFetcher(opts),\n            onBundleMerged: ()=>{\n                this.refreshRegistry();\n            },\n            onBundleFetched: ()=>{\n                this.roots.forEach((watcher)=>{\n                    var _a;\n                    return (_a = watcher.onDataFetched) == null ? void 0 : _a.call(watcher);\n                });\n            },\n            builtinModules: {\n                react: (react__WEBPACK_IMPORTED_MODULE_4___default()),\n                \"react-dom\": (react_dom__WEBPACK_IMPORTED_MODULE_5___default()),\n                \"react/jsx-runtime\": react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__,\n                \"react/jsx-dev-runtime\": react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_6__,\n                // Also inject @plasmicapp/query and @plasmicapp/host to use the\n                // same contexts here and in loader-downloaded code.\n                \"@plasmicapp/query\": _plasmicapp_query__WEBPACK_IMPORTED_MODULE_3__,\n                \"@plasmicapp/data-sources-context\": _plasmicapp_data_sources_context__WEBPACK_IMPORTED_MODULE_0__,\n                \"@plasmicapp/host\": _plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__,\n                \"@plasmicapp/loader-runtime-registry\": {\n                    components: SUBSTITUTED_COMPONENTS,\n                    globalVariantHooks: SUBSTITUTED_GLOBAL_VARIANT_HOOKS,\n                    codeComponentHelpers: REGISTERED_CODE_COMPONENT_HELPERS,\n                    functions: REGISTERED_CUSTOM_FUNCTIONS\n                }\n            }\n        });\n        this.roots = [];\n    }\n    registerComponent(component, meta) {\n        var _a, _b;\n        const stateHelpers = Object.fromEntries(Object.entries((_a = meta.states) != null ? _a : {}).filter(([_, stateSpec])=>Object.keys(stateSpec).some((key)=>_plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.stateHelpersKeys.includes(key))).map(([stateName, stateSpec])=>[\n                stateName,\n                Object.fromEntries(_plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.stateHelpersKeys.filter((key)=>key in stateSpec).map((key)=>[\n                        key,\n                        stateSpec[key]\n                    ]))\n            ]));\n        const helpers = {\n            states: stateHelpers\n        };\n        this.internalSubstituteComponent(component, {\n            name: meta.name,\n            isCode: true\n        }, Object.keys(stateHelpers).length > 0 ? helpers : void 0);\n        (0,_plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.registerComponent)(component, __spreadValues(__spreadProps(__spreadValues({}, meta), {\n            // Import path is not used as we will use component substitution\n            importPath: (_b = meta.importPath) != null ? _b : \"\"\n        }), Object.keys(stateHelpers).length > 0 ? {\n            componentHelpers: {\n                helpers,\n                importPath: \"\",\n                importName: \"\"\n            }\n        } : {}));\n    }\n    registerFunction(fn, meta) {\n        var _a;\n        (0,_plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.registerFunction)(fn, __spreadProps(__spreadValues({}, meta), {\n            importPath: (_a = meta.importPath) != null ? _a : \"\"\n        }));\n        REGISTERED_CUSTOM_FUNCTIONS[customFunctionImportAlias(meta)] = fn;\n    }\n    registerGlobalContext(context, meta) {\n        var _a;\n        this.substituteComponent(context, {\n            name: meta.name,\n            isCode: true\n        });\n        (0,_plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.registerGlobalContext)(context, __spreadProps(__spreadValues({}, meta), {\n            importPath: (_a = meta.importPath) != null ? _a : \"\"\n        }));\n    }\n    registerTrait(trait, meta) {\n        (0,_plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.registerTrait)(trait, meta);\n    }\n    registerToken(token) {\n        (0,_plasmicapp_host__WEBPACK_IMPORTED_MODULE_1__.registerToken)(token);\n    }\n    subscribePlasmicRoot(watcher) {\n        this.roots.push(watcher);\n    }\n    unsubscribePlasmicRoot(watcher) {\n        const index = this.roots.indexOf(watcher);\n        if (index >= 0) {\n            this.roots.splice(index, 1);\n        }\n    }\n    refreshRegistry() {\n        for (const globalGroup of this.getBundle().globalGroups){\n            if (globalGroup.type !== \"global-screen\") {\n                SUBSTITUTED_GLOBAL_VARIANT_HOOKS[globalGroup.id] = createUseGlobalVariant(globalGroup.name, globalGroup.projectId);\n            }\n        }\n        super.refreshRegistry();\n    }\n};\n// src/index.ts\n\n\n// src/PlasmicComponent.tsx\n\n// src/usePlasmicComponent.tsx\n\nfunction usePlasmicComponent(spec, opts = {}) {\n    const rootContext = usePlasmicRootContext();\n    if (!rootContext) {\n        throw new Error(`You can only use usePlasmicComponent if wrapped in <PlasmicRootProvider />`);\n    }\n    const loader = rootContext.loader;\n    const lookup = loader.getLookup();\n    const component = lookup.hasComponent(spec) ? lookup.getComponent(spec, opts) : void 0;\n    const stableSpec = useStableLookupSpec(spec);\n    const isMounted = useIsMounted();\n    const forceUpdate = useForceUpdate();\n    react__WEBPACK_IMPORTED_MODULE_4__.useEffect({\n        \"usePlasmicComponent.useEffect\": ()=>{\n            if (!component) {\n                ({\n                    \"usePlasmicComponent.useEffect\": ()=>__async(this, null, {\n                            \"usePlasmicComponent.useEffect\": function*() {\n                                yield loader.fetchComponentData(stableSpec);\n                                if (isMounted()) {\n                                    forceUpdate();\n                                }\n                            }\n                        }[\"usePlasmicComponent.useEffect\"])\n                })[\"usePlasmicComponent.useEffect\"]();\n            }\n        }\n    }[\"usePlasmicComponent.useEffect\"], [\n        component,\n        stableSpec\n    ]);\n    return component;\n}\n// src/PlasmicComponent.tsx\nvar PlasmicComponentContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createContext(false);\nfunction PlasmicComponent(props) {\n    const { component, projectId, componentProps, forceOriginal } = props;\n    const rootContext = usePlasmicRootContext();\n    const isRootLoader = !react__WEBPACK_IMPORTED_MODULE_4__.useContext(PlasmicComponentContext);\n    if (!rootContext) {\n        throw new Error(`You must use <PlasmicRootProvider/> at the root of your app`);\n    }\n    const _a = rootContext, { loader, globalContextsProps, variation, userAuthToken, isUserLoading, authRedirectUri, translator } = _a, rest = __objRest(_a, [\n        \"loader\",\n        \"globalContextsProps\",\n        \"variation\",\n        \"userAuthToken\",\n        \"isUserLoading\",\n        \"authRedirectUri\",\n        \"translator\"\n    ]);\n    const Component = usePlasmicComponent({\n        name: component,\n        projectId,\n        isCode: false\n    }, {\n        forceOriginal\n    });\n    react__WEBPACK_IMPORTED_MODULE_4__.useEffect({\n        \"PlasmicComponent.useEffect\": ()=>{\n            if (isRootLoader) {\n                const meta = loader.getLookup().getComponentMeta({\n                    name: component,\n                    projectId\n                });\n                if (meta) {\n                    loader.trackRender({\n                        renderCtx: {\n                            rootProjectId: meta.projectId,\n                            rootComponentId: meta.id,\n                            rootComponentName: component,\n                            teamIds: loader.getTeamIds(),\n                            projectIds: loader.getProjectIds()\n                        },\n                        variation\n                    });\n                }\n            }\n        }\n    }[\"PlasmicComponent.useEffect\"], [\n        component,\n        projectId,\n        loader,\n        variation\n    ]);\n    const element = react__WEBPACK_IMPORTED_MODULE_4__.useMemo({\n        \"PlasmicComponent.useMemo[element]\": ()=>{\n            var _a2;\n            if (!Component) {\n                return null;\n            }\n            let elt = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(Component, __spreadValues({}, componentProps));\n            if (isRootLoader) {\n                const lookup = loader.getLookup();\n                const ReactWebRootProvider = lookup.getRootProvider();\n                const GlobalContextsProvider = lookup.getGlobalContextsProvider({\n                    name: component,\n                    projectId\n                });\n                elt = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(ReactWebRootProvider, __spreadProps(__spreadValues({}, rest), {\n                    userAuthToken,\n                    isUserLoading,\n                    authRedirectUri,\n                    i18n: {\n                        translator,\n                        tagPrefix: (_a2 = loader.opts.i18n) == null ? void 0 : _a2.tagPrefix\n                    }\n                }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(MaybeWrap, {\n                    cond: !!GlobalContextsProvider,\n                    wrapper: {\n                        \"PlasmicComponent.useMemo[element]\": (children)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(GlobalContextsProvider, __spreadValues({}, globalContextsProps), children)\n                    }[\"PlasmicComponent.useMemo[element]\"]\n                }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4__.createElement(PlasmicComponentContext.Provider, {\n                    value: true\n                }, elt)));\n            }\n            return elt;\n        }\n    }[\"PlasmicComponent.useMemo[element]\"], [\n        Component,\n        componentProps,\n        loader,\n        isRootLoader,\n        component,\n        projectId,\n        globalContextsProps,\n        userAuthToken,\n        // Just use the token to memo, `user` should be derived from it\n        isUserLoading,\n        authRedirectUri\n    ]);\n    return element;\n}\n// src/prepass-client.ts\n\nfunction extractPlasmicQueryData(element) {\n    return (0,_plasmicapp_prepass__WEBPACK_IMPORTED_MODULE_11__.extractPlasmicQueryData)(element);\n}\nfunction plasmicPrepass(element) {\n    return (0,_plasmicapp_prepass__WEBPACK_IMPORTED_MODULE_11__.plasmicPrepass)(element);\n}\n// src/render.tsx\n\n\n\n\nfunction renderToElement(_0, _1, _2) {\n    return __async(this, arguments, function*(loader, target, lookup, opts = {}) {\n        return new Promise((resolve)=>{\n            const element = makeElement(loader, lookup, opts);\n            react_dom__WEBPACK_IMPORTED_MODULE_5___default().render(element, target, ()=>resolve());\n        });\n    });\n}\nfunction renderToString(loader, lookup, opts = {}) {\n    const element = makeElement(loader, lookup, opts);\n    return (0,react_dom_server__WEBPACK_IMPORTED_MODULE_12__.renderToString)(element);\n}\nfunction extractPlasmicQueryDataFromElement(_0, _1) {\n    return __async(this, arguments, function*(loader, lookup, opts = {}) {\n        const element = makeElement(loader, lookup, opts);\n        return (0,_plasmicapp_prepass__WEBPACK_IMPORTED_MODULE_11__.extractPlasmicQueryData)(element);\n    });\n}\nfunction hydrateFromElement(_0, _1, _2) {\n    return __async(this, arguments, function*(loader, target, lookup, opts = {}) {\n        return new Promise((resolve)=>{\n            const element = makeElement(loader, lookup, opts);\n            react_dom__WEBPACK_IMPORTED_MODULE_5___default().hydrate(element, target, ()=>resolve());\n        });\n    });\n}\nfunction makeElement(loader, lookup, opts = {}) {\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(PlasmicRootProvider, {\n        loader,\n        prefetchedData: opts.prefetchedData,\n        globalVariants: opts.globalVariants,\n        prefetchedQueryData: opts.prefetchedQueryData,\n        pageParams: opts.pageParams,\n        pageQuery: opts.pageQuery\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_4___default().createElement(PlasmicComponent, {\n        component: typeof lookup === \"string\" ? lookup : lookup.name,\n        projectId: typeof lookup === \"string\" ? void 0 : lookup.projectId,\n        componentProps: opts.componentProps\n    }));\n}\n// src/index.ts\nfunction initPlasmicLoader(opts) {\n    const internal = new InternalPlasmicComponentLoader(opts);\n    return new PlasmicComponentLoader(internal);\n}\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/loader-react/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/loader-splits/dist/index.esm.js":
/*!******************************************************************!*\
  !*** ./node_modules/@plasmicapp/loader-splits/dist/index.esm.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   describeVariation: () => (/* binding */ describeVariation),\n/* harmony export */   describeVariationForKey: () => (/* binding */ describeVariationForKey),\n/* harmony export */   getActiveVariation: () => (/* binding */ getActiveVariation),\n/* harmony export */   getExternalIds: () => (/* binding */ getExternalIds),\n/* harmony export */   getSeededRandomFunction: () => (/* binding */ getSeededRandomFunction),\n/* harmony export */   getSplitKey: () => (/* binding */ getSplitKey)\n/* harmony export */ });\n/* harmony import */ var json_logic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! json-logic-js */ \"(ssr)/./node_modules/json-logic-js/logic.js\");\n/* harmony import */ var json_logic_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(json_logic_js__WEBPACK_IMPORTED_MODULE_0__);\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\n\n// src/random.ts\nvar getSeededRandomFunction = (strSeed) => {\n  function cyrb128(str) {\n    let h1 = 1779033703, h2 = 3144134277, h3 = 1013904242, h4 = 2773480762;\n    for (let i = 0, k; i < str.length; i++) {\n      k = str.charCodeAt(i);\n      h1 = h2 ^ Math.imul(h1 ^ k, 597399067);\n      h2 = h3 ^ Math.imul(h2 ^ k, 2869860233);\n      h3 = h4 ^ Math.imul(h3 ^ k, 951274213);\n      h4 = h1 ^ Math.imul(h4 ^ k, 2716044179);\n    }\n    h1 = Math.imul(h3 ^ h1 >>> 18, 597399067);\n    h2 = Math.imul(h4 ^ h2 >>> 22, 2869860233);\n    h3 = Math.imul(h1 ^ h3 >>> 17, 951274213);\n    h4 = Math.imul(h2 ^ h4 >>> 19, 2716044179);\n    return [\n      (h1 ^ h2 ^ h3 ^ h4) >>> 0,\n      (h2 ^ h1) >>> 0,\n      (h3 ^ h1) >>> 0,\n      (h4 ^ h1) >>> 0\n    ];\n  }\n  function sfc32(a, b, c, d) {\n    return function() {\n      a >>>= 0;\n      b >>>= 0;\n      c >>>= 0;\n      d >>>= 0;\n      let t = a + b | 0;\n      a = b ^ b >>> 9;\n      b = c + (c << 3) | 0;\n      c = c << 21 | c >>> 11;\n      d = d + 1 | 0;\n      t = t + d | 0;\n      c = c + t | 0;\n      return (t >>> 0) / 4294967296;\n    };\n  }\n  const seed = cyrb128(strSeed);\n  const rand = sfc32(seed[0], seed[1], seed[2], seed[3]);\n  return rand;\n};\n\n// src/variation.ts\n\nvar isBrowser = typeof window !== \"undefined\" && window != null && typeof window.document !== \"undefined\";\nvar PLASMIC_SEED = \"plasmic_seed\";\nvar BUILTIN_TRAITS_UNKNOWN = {\n  pageUrl: \"unknown\"\n};\nvar getBrowserBuiltinTraits = () => {\n  if (!isBrowser) {\n    return {};\n  }\n  return {\n    pageUrl: document.location.href\n  };\n};\nvar getSplitKey = (split) => {\n  return `${split.type === \"experiment\" ? \"exp.\" : \"seg.\"}${split.id}`;\n};\nfunction getActiveVariation(opts) {\n  const { splits, getKnownValue, updateKnownValue } = opts;\n  const getRandomValue = (key) => {\n    var _a;\n    if (opts.getRandomValue) {\n      return opts.getRandomValue(key);\n    }\n    if (opts.traits[PLASMIC_SEED]) {\n      const rand = getSeededRandomFunction(\n        ((_a = opts.traits[PLASMIC_SEED]) != null ? _a : \"\") + key\n      );\n      return rand();\n    }\n    if (!opts.enableUnseededExperiments) {\n      return 0;\n    }\n    return Math.random();\n  };\n  const variation = {};\n  splits.forEach((split) => {\n    var _a;\n    const key = getSplitKey(split);\n    const knownVal = getKnownValue == null ? void 0 : getKnownValue(key);\n    if (knownVal) {\n      variation[key] = knownVal;\n      return;\n    }\n    const numSlices = split.slices.length;\n    let chosenSlice = void 0;\n    if (split.type === \"experiment\") {\n      if (opts.useSeedBucketing) {\n        const seed = opts.traits[PLASMIC_SEED];\n        const buckets = [];\n        const totalBuckets = (_a = opts.seedRange) != null ? _a : 1;\n        let avaiableBuckets = totalBuckets;\n        for (let i = 0; i < numSlices; i++) {\n          const slice = split.slices[i];\n          const numBuckets = Math.min(\n            Math.floor(slice.prob * totalBuckets),\n            avaiableBuckets\n          );\n          for (let j = 0; j < numBuckets; j++) {\n            buckets.push(slice.id);\n          }\n          avaiableBuckets -= numBuckets;\n        }\n        if (buckets.length > 0) {\n          const shuffleRand = getSeededRandomFunction(split.id);\n          for (let i = 0; i < buckets.length; i++) {\n            const j = Math.floor(shuffleRand() * (i + 1));\n            [buckets[i], buckets[j]] = [buckets[j], buckets[i]];\n          }\n          const sliceIdx = +(seed != null ? seed : \"0\") % buckets.length;\n          chosenSlice = split.slices.find((s) => s.id === buckets[sliceIdx]);\n        } else {\n          chosenSlice = split.slices[numSlices - 1];\n        }\n      } else {\n        let p = getRandomValue(split.id);\n        chosenSlice = split.slices[numSlices - 1];\n        for (let i = 0; i < numSlices; i++) {\n          if (p - split.slices[i].prob <= 0) {\n            chosenSlice = split.slices[i];\n            break;\n          }\n          p -= split.slices[i].prob;\n        }\n      }\n    } else if (split.type === \"segment\") {\n      for (let i = 0; i < numSlices; i++) {\n        if (json_logic_js__WEBPACK_IMPORTED_MODULE_0___default().apply(split.slices[i].cond, __spreadValues(__spreadValues(__spreadValues({\n          time: (/* @__PURE__ */ new Date()).toISOString()\n        }, BUILTIN_TRAITS_UNKNOWN), getBrowserBuiltinTraits()), opts.traits))) {\n          chosenSlice = split.slices[i];\n        }\n      }\n    }\n    if (chosenSlice) {\n      variation[key] = chosenSlice.id;\n      if (split.externalId && chosenSlice.externalId) {\n        variation[`ext.${split.externalId}`] = chosenSlice.externalId;\n      }\n      if (split.type === \"experiment\") {\n        updateKnownValue == null ? void 0 : updateKnownValue(key, chosenSlice.id);\n      }\n    }\n  });\n  return variation;\n}\nfunction getExternalIds(splits, variation, filters) {\n  const externalVariation = {};\n  function shouldIncludeSplit(split) {\n    if (!filters) {\n      return true;\n    }\n    if (filters.projectIds && !filters.projectIds.includes(split.projectId)) {\n      return false;\n    }\n    if (filters.customFilter && !filters.customFilter(split)) {\n      return false;\n    }\n    return true;\n  }\n  Object.keys(variation).forEach((variationKey) => {\n    const [, splitId] = variationKey.split(\".\");\n    const sliceId = variation[variationKey];\n    const split = splits.find(\n      (s) => s.id === splitId || s.externalId === splitId\n    );\n    if (split && split.externalId && shouldIncludeSplit(split)) {\n      const slice = split.slices.find((s) => s.id === sliceId || s.externalId === sliceId);\n      if (slice == null ? void 0 : slice.externalId) {\n        externalVariation[`${split.externalId}`] = slice.externalId;\n      }\n    }\n  });\n  return externalVariation;\n}\nfunction describeVariationForKey(splits, key, value) {\n  const [, splitId] = key.split(\".\");\n  const split = splits.find(\n    (s) => s.id === splitId || s.externalId === splitId\n  );\n  if (!split) {\n    throw new Error(`Split not found for key \"${key}\"`);\n  }\n  const sliceIndex = split.slices.findIndex(\n    (s) => s.id === value || s.externalId === value\n  );\n  if (sliceIndex === -1) {\n    throw new Error(`Invalid split value \"${value}\" for key \"${key}\"`);\n  }\n  return {\n    name: split.name,\n    description: split.description,\n    pagesPaths: split.pagesPaths,\n    type: sliceIndex === 0 ? \"original\" : \"override\",\n    chosenValue: value,\n    externalIdGroup: split.externalId,\n    externalIdValue: sliceIndex >= 0 && split.slices[sliceIndex].externalId ? split.slices[sliceIndex].externalId : void 0\n  };\n}\nfunction describeVariation(splits, variation) {\n  return Object.fromEntries(\n    Object.entries(variation).map(([key, value]) => {\n      return [key, describeVariationForKey(splits, key, value)];\n    })\n  );\n}\n\n//# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBsYXNtaWNhcHAvbG9hZGVyLXNwbGl0cy9kaXN0L2luZGV4LmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLDZEQUE2RDtBQUMzSTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsZ0JBQWdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ3NDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDhDQUE4QyxFQUFFLFNBQVM7QUFDckU7QUFDQTtBQUNBLFVBQVUsMENBQTBDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixlQUFlO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsZ0JBQWdCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixvQkFBb0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSx3QkFBd0IsZUFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixzQkFBc0IsZUFBZTtBQUNyQyxZQUFZLDBEQUFlO0FBQzNCO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlCQUFpQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGlCQUFpQjtBQUM5QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsSUFBSTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLE1BQU0sYUFBYSxJQUFJO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBUUU7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3dvbmRlcmxhbmRtaXRjaC9DYXNjYWRlUHJvamVjdHMvV29uZGVyVml0ZS1mcm9udGVuZC9ub2RlX21vZHVsZXMvQHBsYXNtaWNhcHAvbG9hZGVyLXNwbGl0cy9kaXN0L2luZGV4LmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIF9faGFzT3duUHJvcCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBfX2RlZk5vcm1hbFByb3AgPSAob2JqLCBrZXksIHZhbHVlKSA9PiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTtcbnZhciBfX3NwcmVhZFZhbHVlcyA9IChhLCBiKSA9PiB7XG4gIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcbiAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXG4gICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxuICAgIGZvciAodmFyIHByb3Agb2YgX19nZXRPd25Qcm9wU3ltYm9scyhiKSkge1xuICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxuICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XG4gICAgfVxuICByZXR1cm4gYTtcbn07XG5cbi8vIHNyYy9yYW5kb20udHNcbnZhciBnZXRTZWVkZWRSYW5kb21GdW5jdGlvbiA9IChzdHJTZWVkKSA9PiB7XG4gIGZ1bmN0aW9uIGN5cmIxMjgoc3RyKSB7XG4gICAgbGV0IGgxID0gMTc3OTAzMzcwMywgaDIgPSAzMTQ0MTM0Mjc3LCBoMyA9IDEwMTM5MDQyNDIsIGg0ID0gMjc3MzQ4MDc2MjtcbiAgICBmb3IgKGxldCBpID0gMCwgazsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgayA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgaDEgPSBoMiBeIE1hdGguaW11bChoMSBeIGssIDU5NzM5OTA2Nyk7XG4gICAgICBoMiA9IGgzIF4gTWF0aC5pbXVsKGgyIF4gaywgMjg2OTg2MDIzMyk7XG4gICAgICBoMyA9IGg0IF4gTWF0aC5pbXVsKGgzIF4gaywgOTUxMjc0MjEzKTtcbiAgICAgIGg0ID0gaDEgXiBNYXRoLmltdWwoaDQgXiBrLCAyNzE2MDQ0MTc5KTtcbiAgICB9XG4gICAgaDEgPSBNYXRoLmltdWwoaDMgXiBoMSA+Pj4gMTgsIDU5NzM5OTA2Nyk7XG4gICAgaDIgPSBNYXRoLmltdWwoaDQgXiBoMiA+Pj4gMjIsIDI4Njk4NjAyMzMpO1xuICAgIGgzID0gTWF0aC5pbXVsKGgxIF4gaDMgPj4+IDE3LCA5NTEyNzQyMTMpO1xuICAgIGg0ID0gTWF0aC5pbXVsKGgyIF4gaDQgPj4+IDE5LCAyNzE2MDQ0MTc5KTtcbiAgICByZXR1cm4gW1xuICAgICAgKGgxIF4gaDIgXiBoMyBeIGg0KSA+Pj4gMCxcbiAgICAgIChoMiBeIGgxKSA+Pj4gMCxcbiAgICAgIChoMyBeIGgxKSA+Pj4gMCxcbiAgICAgIChoNCBeIGgxKSA+Pj4gMFxuICAgIF07XG4gIH1cbiAgZnVuY3Rpb24gc2ZjMzIoYSwgYiwgYywgZCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGEgPj4+PSAwO1xuICAgICAgYiA+Pj49IDA7XG4gICAgICBjID4+Pj0gMDtcbiAgICAgIGQgPj4+PSAwO1xuICAgICAgbGV0IHQgPSBhICsgYiB8IDA7XG4gICAgICBhID0gYiBeIGIgPj4+IDk7XG4gICAgICBiID0gYyArIChjIDw8IDMpIHwgMDtcbiAgICAgIGMgPSBjIDw8IDIxIHwgYyA+Pj4gMTE7XG4gICAgICBkID0gZCArIDEgfCAwO1xuICAgICAgdCA9IHQgKyBkIHwgMDtcbiAgICAgIGMgPSBjICsgdCB8IDA7XG4gICAgICByZXR1cm4gKHQgPj4+IDApIC8gNDI5NDk2NzI5NjtcbiAgICB9O1xuICB9XG4gIGNvbnN0IHNlZWQgPSBjeXJiMTI4KHN0clNlZWQpO1xuICBjb25zdCByYW5kID0gc2ZjMzIoc2VlZFswXSwgc2VlZFsxXSwgc2VlZFsyXSwgc2VlZFszXSk7XG4gIHJldHVybiByYW5kO1xufTtcblxuLy8gc3JjL3ZhcmlhdGlvbi50c1xuaW1wb3J0IGpzb25Mb2dpYyBmcm9tIFwianNvbi1sb2dpYy1qc1wiO1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93ICE9IG51bGwgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcbnZhciBQTEFTTUlDX1NFRUQgPSBcInBsYXNtaWNfc2VlZFwiO1xudmFyIEJVSUxUSU5fVFJBSVRTX1VOS05PV04gPSB7XG4gIHBhZ2VVcmw6IFwidW5rbm93blwiXG59O1xudmFyIGdldEJyb3dzZXJCdWlsdGluVHJhaXRzID0gKCkgPT4ge1xuICBpZiAoIWlzQnJvd3Nlcikge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHBhZ2VVcmw6IGRvY3VtZW50LmxvY2F0aW9uLmhyZWZcbiAgfTtcbn07XG52YXIgZ2V0U3BsaXRLZXkgPSAoc3BsaXQpID0+IHtcbiAgcmV0dXJuIGAke3NwbGl0LnR5cGUgPT09IFwiZXhwZXJpbWVudFwiID8gXCJleHAuXCIgOiBcInNlZy5cIn0ke3NwbGl0LmlkfWA7XG59O1xuZnVuY3Rpb24gZ2V0QWN0aXZlVmFyaWF0aW9uKG9wdHMpIHtcbiAgY29uc3QgeyBzcGxpdHMsIGdldEtub3duVmFsdWUsIHVwZGF0ZUtub3duVmFsdWUgfSA9IG9wdHM7XG4gIGNvbnN0IGdldFJhbmRvbVZhbHVlID0gKGtleSkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBpZiAob3B0cy5nZXRSYW5kb21WYWx1ZSkge1xuICAgICAgcmV0dXJuIG9wdHMuZ2V0UmFuZG9tVmFsdWUoa2V5KTtcbiAgICB9XG4gICAgaWYgKG9wdHMudHJhaXRzW1BMQVNNSUNfU0VFRF0pIHtcbiAgICAgIGNvbnN0IHJhbmQgPSBnZXRTZWVkZWRSYW5kb21GdW5jdGlvbihcbiAgICAgICAgKChfYSA9IG9wdHMudHJhaXRzW1BMQVNNSUNfU0VFRF0pICE9IG51bGwgPyBfYSA6IFwiXCIpICsga2V5XG4gICAgICApO1xuICAgICAgcmV0dXJuIHJhbmQoKTtcbiAgICB9XG4gICAgaWYgKCFvcHRzLmVuYWJsZVVuc2VlZGVkRXhwZXJpbWVudHMpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKTtcbiAgfTtcbiAgY29uc3QgdmFyaWF0aW9uID0ge307XG4gIHNwbGl0cy5mb3JFYWNoKChzcGxpdCkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBrZXkgPSBnZXRTcGxpdEtleShzcGxpdCk7XG4gICAgY29uc3Qga25vd25WYWwgPSBnZXRLbm93blZhbHVlID09IG51bGwgPyB2b2lkIDAgOiBnZXRLbm93blZhbHVlKGtleSk7XG4gICAgaWYgKGtub3duVmFsKSB7XG4gICAgICB2YXJpYXRpb25ba2V5XSA9IGtub3duVmFsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBudW1TbGljZXMgPSBzcGxpdC5zbGljZXMubGVuZ3RoO1xuICAgIGxldCBjaG9zZW5TbGljZSA9IHZvaWQgMDtcbiAgICBpZiAoc3BsaXQudHlwZSA9PT0gXCJleHBlcmltZW50XCIpIHtcbiAgICAgIGlmIChvcHRzLnVzZVNlZWRCdWNrZXRpbmcpIHtcbiAgICAgICAgY29uc3Qgc2VlZCA9IG9wdHMudHJhaXRzW1BMQVNNSUNfU0VFRF07XG4gICAgICAgIGNvbnN0IGJ1Y2tldHMgPSBbXTtcbiAgICAgICAgY29uc3QgdG90YWxCdWNrZXRzID0gKF9hID0gb3B0cy5zZWVkUmFuZ2UpICE9IG51bGwgPyBfYSA6IDE7XG4gICAgICAgIGxldCBhdmFpYWJsZUJ1Y2tldHMgPSB0b3RhbEJ1Y2tldHM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU2xpY2VzOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBzbGljZSA9IHNwbGl0LnNsaWNlc1tpXTtcbiAgICAgICAgICBjb25zdCBudW1CdWNrZXRzID0gTWF0aC5taW4oXG4gICAgICAgICAgICBNYXRoLmZsb29yKHNsaWNlLnByb2IgKiB0b3RhbEJ1Y2tldHMpLFxuICAgICAgICAgICAgYXZhaWFibGVCdWNrZXRzXG4gICAgICAgICAgKTtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG51bUJ1Y2tldHM7IGorKykge1xuICAgICAgICAgICAgYnVja2V0cy5wdXNoKHNsaWNlLmlkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXZhaWFibGVCdWNrZXRzIC09IG51bUJ1Y2tldHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1Y2tldHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IHNodWZmbGVSYW5kID0gZ2V0U2VlZGVkUmFuZG9tRnVuY3Rpb24oc3BsaXQuaWQpO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaiA9IE1hdGguZmxvb3Ioc2h1ZmZsZVJhbmQoKSAqIChpICsgMSkpO1xuICAgICAgICAgICAgW2J1Y2tldHNbaV0sIGJ1Y2tldHNbal1dID0gW2J1Y2tldHNbal0sIGJ1Y2tldHNbaV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzbGljZUlkeCA9ICsoc2VlZCAhPSBudWxsID8gc2VlZCA6IFwiMFwiKSAlIGJ1Y2tldHMubGVuZ3RoO1xuICAgICAgICAgIGNob3NlblNsaWNlID0gc3BsaXQuc2xpY2VzLmZpbmQoKHMpID0+IHMuaWQgPT09IGJ1Y2tldHNbc2xpY2VJZHhdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaG9zZW5TbGljZSA9IHNwbGl0LnNsaWNlc1tudW1TbGljZXMgLSAxXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHAgPSBnZXRSYW5kb21WYWx1ZShzcGxpdC5pZCk7XG4gICAgICAgIGNob3NlblNsaWNlID0gc3BsaXQuc2xpY2VzW251bVNsaWNlcyAtIDFdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bVNsaWNlczsgaSsrKSB7XG4gICAgICAgICAgaWYgKHAgLSBzcGxpdC5zbGljZXNbaV0ucHJvYiA8PSAwKSB7XG4gICAgICAgICAgICBjaG9zZW5TbGljZSA9IHNwbGl0LnNsaWNlc1tpXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwIC09IHNwbGl0LnNsaWNlc1tpXS5wcm9iO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzcGxpdC50eXBlID09PSBcInNlZ21lbnRcIikge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1TbGljZXM7IGkrKykge1xuICAgICAgICBpZiAoanNvbkxvZ2ljLmFwcGx5KHNwbGl0LnNsaWNlc1tpXS5jb25kLCBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XG4gICAgICAgICAgdGltZTogKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpKS50b0lTT1N0cmluZygpXG4gICAgICAgIH0sIEJVSUxUSU5fVFJBSVRTX1VOS05PV04pLCBnZXRCcm93c2VyQnVpbHRpblRyYWl0cygpKSwgb3B0cy50cmFpdHMpKSkge1xuICAgICAgICAgIGNob3NlblNsaWNlID0gc3BsaXQuc2xpY2VzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjaG9zZW5TbGljZSkge1xuICAgICAgdmFyaWF0aW9uW2tleV0gPSBjaG9zZW5TbGljZS5pZDtcbiAgICAgIGlmIChzcGxpdC5leHRlcm5hbElkICYmIGNob3NlblNsaWNlLmV4dGVybmFsSWQpIHtcbiAgICAgICAgdmFyaWF0aW9uW2BleHQuJHtzcGxpdC5leHRlcm5hbElkfWBdID0gY2hvc2VuU2xpY2UuZXh0ZXJuYWxJZDtcbiAgICAgIH1cbiAgICAgIGlmIChzcGxpdC50eXBlID09PSBcImV4cGVyaW1lbnRcIikge1xuICAgICAgICB1cGRhdGVLbm93blZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB1cGRhdGVLbm93blZhbHVlKGtleSwgY2hvc2VuU2xpY2UuaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB2YXJpYXRpb247XG59XG5mdW5jdGlvbiBnZXRFeHRlcm5hbElkcyhzcGxpdHMsIHZhcmlhdGlvbiwgZmlsdGVycykge1xuICBjb25zdCBleHRlcm5hbFZhcmlhdGlvbiA9IHt9O1xuICBmdW5jdGlvbiBzaG91bGRJbmNsdWRlU3BsaXQoc3BsaXQpIHtcbiAgICBpZiAoIWZpbHRlcnMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoZmlsdGVycy5wcm9qZWN0SWRzICYmICFmaWx0ZXJzLnByb2plY3RJZHMuaW5jbHVkZXMoc3BsaXQucHJvamVjdElkKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZmlsdGVycy5jdXN0b21GaWx0ZXIgJiYgIWZpbHRlcnMuY3VzdG9tRmlsdGVyKHNwbGl0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBPYmplY3Qua2V5cyh2YXJpYXRpb24pLmZvckVhY2goKHZhcmlhdGlvbktleSkgPT4ge1xuICAgIGNvbnN0IFssIHNwbGl0SWRdID0gdmFyaWF0aW9uS2V5LnNwbGl0KFwiLlwiKTtcbiAgICBjb25zdCBzbGljZUlkID0gdmFyaWF0aW9uW3ZhcmlhdGlvbktleV07XG4gICAgY29uc3Qgc3BsaXQgPSBzcGxpdHMuZmluZChcbiAgICAgIChzKSA9PiBzLmlkID09PSBzcGxpdElkIHx8IHMuZXh0ZXJuYWxJZCA9PT0gc3BsaXRJZFxuICAgICk7XG4gICAgaWYgKHNwbGl0ICYmIHNwbGl0LmV4dGVybmFsSWQgJiYgc2hvdWxkSW5jbHVkZVNwbGl0KHNwbGl0KSkge1xuICAgICAgY29uc3Qgc2xpY2UgPSBzcGxpdC5zbGljZXMuZmluZCgocykgPT4gcy5pZCA9PT0gc2xpY2VJZCB8fCBzLmV4dGVybmFsSWQgPT09IHNsaWNlSWQpO1xuICAgICAgaWYgKHNsaWNlID09IG51bGwgPyB2b2lkIDAgOiBzbGljZS5leHRlcm5hbElkKSB7XG4gICAgICAgIGV4dGVybmFsVmFyaWF0aW9uW2Ake3NwbGl0LmV4dGVybmFsSWR9YF0gPSBzbGljZS5leHRlcm5hbElkO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBleHRlcm5hbFZhcmlhdGlvbjtcbn1cbmZ1bmN0aW9uIGRlc2NyaWJlVmFyaWF0aW9uRm9yS2V5KHNwbGl0cywga2V5LCB2YWx1ZSkge1xuICBjb25zdCBbLCBzcGxpdElkXSA9IGtleS5zcGxpdChcIi5cIik7XG4gIGNvbnN0IHNwbGl0ID0gc3BsaXRzLmZpbmQoXG4gICAgKHMpID0+IHMuaWQgPT09IHNwbGl0SWQgfHwgcy5leHRlcm5hbElkID09PSBzcGxpdElkXG4gICk7XG4gIGlmICghc3BsaXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFNwbGl0IG5vdCBmb3VuZCBmb3Iga2V5IFwiJHtrZXl9XCJgKTtcbiAgfVxuICBjb25zdCBzbGljZUluZGV4ID0gc3BsaXQuc2xpY2VzLmZpbmRJbmRleChcbiAgICAocykgPT4gcy5pZCA9PT0gdmFsdWUgfHwgcy5leHRlcm5hbElkID09PSB2YWx1ZVxuICApO1xuICBpZiAoc2xpY2VJbmRleCA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgc3BsaXQgdmFsdWUgXCIke3ZhbHVlfVwiIGZvciBrZXkgXCIke2tleX1cImApO1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogc3BsaXQubmFtZSxcbiAgICBkZXNjcmlwdGlvbjogc3BsaXQuZGVzY3JpcHRpb24sXG4gICAgcGFnZXNQYXRoczogc3BsaXQucGFnZXNQYXRocyxcbiAgICB0eXBlOiBzbGljZUluZGV4ID09PSAwID8gXCJvcmlnaW5hbFwiIDogXCJvdmVycmlkZVwiLFxuICAgIGNob3NlblZhbHVlOiB2YWx1ZSxcbiAgICBleHRlcm5hbElkR3JvdXA6IHNwbGl0LmV4dGVybmFsSWQsXG4gICAgZXh0ZXJuYWxJZFZhbHVlOiBzbGljZUluZGV4ID49IDAgJiYgc3BsaXQuc2xpY2VzW3NsaWNlSW5kZXhdLmV4dGVybmFsSWQgPyBzcGxpdC5zbGljZXNbc2xpY2VJbmRleF0uZXh0ZXJuYWxJZCA6IHZvaWQgMFxuICB9O1xufVxuZnVuY3Rpb24gZGVzY3JpYmVWYXJpYXRpb24oc3BsaXRzLCB2YXJpYXRpb24pIHtcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICBPYmplY3QuZW50cmllcyh2YXJpYXRpb24pLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICByZXR1cm4gW2tleSwgZGVzY3JpYmVWYXJpYXRpb25Gb3JLZXkoc3BsaXRzLCBrZXksIHZhbHVlKV07XG4gICAgfSlcbiAgKTtcbn1cbmV4cG9ydCB7XG4gIGRlc2NyaWJlVmFyaWF0aW9uLFxuICBkZXNjcmliZVZhcmlhdGlvbkZvcktleSxcbiAgZ2V0QWN0aXZlVmFyaWF0aW9uLFxuICBnZXRFeHRlcm5hbElkcyxcbiAgZ2V0U2VlZGVkUmFuZG9tRnVuY3Rpb24sXG4gIGdldFNwbGl0S2V5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/loader-splits/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/prepass/dist/index.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/@plasmicapp/prepass/dist/index.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractPlasmicQueryData: () => (/* binding */ extractPlasmicQueryData),\n/* harmony export */   plasmicPrepass: () => (/* binding */ plasmicPrepass),\n/* harmony export */   plasmicPrepassExtract: () => (/* binding */ plasmicPrepassExtract)\n/* harmony export */ });\n/* harmony import */ var _plasmicapp_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @plasmicapp/query */ \"(ssr)/./node_modules/@plasmicapp/query/dist/index.esm.js\");\n/* harmony import */ var _plasmicapp_react_ssr_prepass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @plasmicapp/react-ssr-prepass */ \"(ssr)/./node_modules/@plasmicapp/react-ssr-prepass/dist/react-ssr-prepass.es.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nasync function plasmicPrepassExtract(element, onClientComponentRef) {\n  const cache = /* @__PURE__ */ new Map();\n  const headMetadata = {};\n  try {\n    await plasmicPrepass(\n      /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_plasmicapp_query__WEBPACK_IMPORTED_MODULE_0__.PlasmicPrepassContext, { cache }, /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_1___default().createElement(_plasmicapp_query__WEBPACK_IMPORTED_MODULE_0__.HeadMetadataContext.Provider, { value: headMetadata }, element)),\n      onClientComponentRef\n    );\n  } catch (err) {\n    console.warn(`PLASMIC: Error encountered while pre-rendering`, err);\n  }\n  const filteredCache = Object.fromEntries(\n    Array.from(cache.entries()).filter(\n      ([key, val]) => !key.startsWith(\"$swr$\") && !key.startsWith(\"$csq$\") && val !== void 0\n    )\n  );\n  const queryData = (() => {\n    try {\n      return JSON.parse(\n        JSON.stringify(\n          filteredCache,\n          (_key, value) => value !== void 0 ? value : null\n        )\n      );\n    } catch {\n      return filteredCache;\n    }\n  })();\n  return {\n    queryData,\n    headMetadata\n  };\n}\nasync function extractPlasmicQueryData(element, onClientComponentRef) {\n  return (await plasmicPrepassExtract(element, onClientComponentRef)).queryData;\n}\nasync function plasmicPrepass(element, onClientComponentRef) {\n  await (0,_plasmicapp_react_ssr_prepass__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(element, void 0, onClientComponentRef);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHBsYXNtaWNhcHAvcHJlcGFzcy9kaXN0L2luZGV4LmVzbS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRzJCO0FBQ3lCO0FBQzFCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsMERBQW1CLENBQUMsb0VBQXFCLElBQUksT0FBTyxrQkFBa0IsMERBQW1CLENBQUMsa0VBQW1CLGFBQWEscUJBQXFCO0FBQ3JLO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSx5RUFBTztBQUNmO0FBS0UiLCJzb3VyY2VzIjpbIi9Vc2Vycy93b25kZXJsYW5kbWl0Y2gvQ2FzY2FkZVByb2plY3RzL1dvbmRlclZpdGUtZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BwbGFzbWljYXBwL3ByZXBhc3MvZGlzdC9pbmRleC5lc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSGVhZE1ldGFkYXRhQ29udGV4dCxcbiAgUGxhc21pY1ByZXBhc3NDb250ZXh0XG59IGZyb20gXCJAcGxhc21pY2FwcC9xdWVyeVwiO1xuaW1wb3J0IHByZXBhc3MgZnJvbSBcIkBwbGFzbWljYXBwL3JlYWN0LXNzci1wcmVwYXNzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5hc3luYyBmdW5jdGlvbiBwbGFzbWljUHJlcGFzc0V4dHJhY3QoZWxlbWVudCwgb25DbGllbnRDb21wb25lbnRSZWYpIHtcbiAgY29uc3QgY2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCBoZWFkTWV0YWRhdGEgPSB7fTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBwbGFzbWljUHJlcGFzcyhcbiAgICAgIC8qIEBfX1BVUkVfXyAqLyBSZWFjdC5jcmVhdGVFbGVtZW50KFBsYXNtaWNQcmVwYXNzQ29udGV4dCwgeyBjYWNoZSB9LCAvKiBAX19QVVJFX18gKi8gUmVhY3QuY3JlYXRlRWxlbWVudChIZWFkTWV0YWRhdGFDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBoZWFkTWV0YWRhdGEgfSwgZWxlbWVudCkpLFxuICAgICAgb25DbGllbnRDb21wb25lbnRSZWZcbiAgICApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLndhcm4oYFBMQVNNSUM6IEVycm9yIGVuY291bnRlcmVkIHdoaWxlIHByZS1yZW5kZXJpbmdgLCBlcnIpO1xuICB9XG4gIGNvbnN0IGZpbHRlcmVkQ2FjaGUgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgQXJyYXkuZnJvbShjYWNoZS5lbnRyaWVzKCkpLmZpbHRlcihcbiAgICAgIChba2V5LCB2YWxdKSA9PiAha2V5LnN0YXJ0c1dpdGgoXCIkc3dyJFwiKSAmJiAha2V5LnN0YXJ0c1dpdGgoXCIkY3NxJFwiKSAmJiB2YWwgIT09IHZvaWQgMFxuICAgIClcbiAgKTtcbiAgY29uc3QgcXVlcnlEYXRhID0gKCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIGZpbHRlcmVkQ2FjaGUsXG4gICAgICAgICAgKF9rZXksIHZhbHVlKSA9PiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiBudWxsXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gZmlsdGVyZWRDYWNoZTtcbiAgICB9XG4gIH0pKCk7XG4gIHJldHVybiB7XG4gICAgcXVlcnlEYXRhLFxuICAgIGhlYWRNZXRhZGF0YVxuICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gZXh0cmFjdFBsYXNtaWNRdWVyeURhdGEoZWxlbWVudCwgb25DbGllbnRDb21wb25lbnRSZWYpIHtcbiAgcmV0dXJuIChhd2FpdCBwbGFzbWljUHJlcGFzc0V4dHJhY3QoZWxlbWVudCwgb25DbGllbnRDb21wb25lbnRSZWYpKS5xdWVyeURhdGE7XG59XG5hc3luYyBmdW5jdGlvbiBwbGFzbWljUHJlcGFzcyhlbGVtZW50LCBvbkNsaWVudENvbXBvbmVudFJlZikge1xuICBhd2FpdCBwcmVwYXNzKGVsZW1lbnQsIHZvaWQgMCwgb25DbGllbnRDb21wb25lbnRSZWYpO1xufVxuZXhwb3J0IHtcbiAgZXh0cmFjdFBsYXNtaWNRdWVyeURhdGEsXG4gIHBsYXNtaWNQcmVwYXNzLFxuICBwbGFzbWljUHJlcGFzc0V4dHJhY3Rcbn07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/prepass/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/query/dist/index.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/@plasmicapp/query/dist/index.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeadMetadataContext: () => (/* binding */ HeadMetadataContext),\n/* harmony export */   PlasmicPrepassContext: () => (/* binding */ PlasmicPrepassContext),\n/* harmony export */   PlasmicQueryDataProvider: () => (/* binding */ PlasmicQueryDataProvider),\n/* harmony export */   addLoadingStateListener: () => (/* binding */ addLoadingStateListener),\n/* harmony export */   isPlasmicPrepass: () => (/* binding */ isPlasmicPrepass),\n/* harmony export */   useMutablePlasmicQueryData: () => (/* binding */ useMutablePlasmicQueryData),\n/* harmony export */   usePlasmicDataConfig: () => (/* binding */ usePlasmicDataConfig),\n/* harmony export */   usePlasmicQueryData: () => (/* binding */ usePlasmicQueryData),\n/* harmony export */   useSWRConfig: () => (/* reexport safe */ swr__WEBPACK_IMPORTED_MODULE_1__.useSWRConfig),\n/* harmony export */   wrapLoadingFetcher: () => (/* binding */ wrapLoadingFetcher)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var swr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swr */ \"(ssr)/./node_modules/swr/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ HeadMetadataContext,PlasmicPrepassContext,PlasmicQueryDataProvider,addLoadingStateListener,isPlasmicPrepass,useMutablePlasmicQueryData,usePlasmicDataConfig,usePlasmicQueryData,useSWRConfig,wrapLoadingFetcher auto */ var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/query-data.tsx\n\n\nvar __SWRConfig = void 0;\nvar mutateKeys = (invalidateKey)=>{\n    if (__SWRConfig) {\n        const { cache, mutate } = __SWRConfig;\n        (invalidateKey != null ? [\n            invalidateKey\n        ] : Array.from(cache.keys())).forEach((key)=>{\n            mutate(key);\n        });\n    }\n};\nfunction getPlasmicDefaultSWROptions(opts) {\n    return {\n        revalidateIfStale: !!(opts == null ? void 0 : opts.isMutable),\n        revalidateOnFocus: false,\n        revalidateOnReconnect: false\n    };\n}\nfunction usePlasmicQueryData(key, fetcher) {\n    const prepassCtx = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(PrepassContext);\n    const opts = getPlasmicDefaultSWROptions();\n    if (prepassCtx) {\n        opts.suspense = true;\n    }\n    const config = (0,swr__WEBPACK_IMPORTED_MODULE_1__.useSWRConfig)();\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect({\n        \"usePlasmicQueryData.useEffect\": ()=>{\n            __SWRConfig = config;\n        }\n    }[\"usePlasmicQueryData.useEffect\"], [\n        config\n    ]);\n    const wrappedFetcher = react__WEBPACK_IMPORTED_MODULE_0___default().useMemo({\n        \"usePlasmicQueryData.useMemo[wrappedFetcher]\": ()=>wrapLoadingFetcher(fetcher)\n    }[\"usePlasmicQueryData.useMemo[wrappedFetcher]\"], [\n        fetcher\n    ]);\n    const resp = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(key, wrappedFetcher, opts);\n    if (resp.data !== void 0) {\n        return {\n            data: resp.data\n        };\n    } else if (resp.error) {\n        return {\n            error: resp.error\n        };\n    } else {\n        return {\n            isLoading: true\n        };\n    }\n}\nfunction useMutablePlasmicQueryData(key, fetcher, options) {\n    const prepassCtx = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(PrepassContext);\n    const opts = __spreadValues(__spreadValues({}, getPlasmicDefaultSWROptions({\n        isMutable: true\n    })), options);\n    if (prepassCtx) {\n        opts.suspense = true;\n    }\n    const config = (0,swr__WEBPACK_IMPORTED_MODULE_1__.useSWRConfig)();\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect({\n        \"useMutablePlasmicQueryData.useEffect\": ()=>{\n            __SWRConfig = config;\n        }\n    }[\"useMutablePlasmicQueryData.useEffect\"], [\n        config\n    ]);\n    const [isLoading, setIsLoading] = react__WEBPACK_IMPORTED_MODULE_0___default().useState(false);\n    const fetcherWrapper = react__WEBPACK_IMPORTED_MODULE_0___default().useCallback({\n        \"useMutablePlasmicQueryData.useCallback[fetcherWrapper]\": (...args)=>__async(this, null, {\n                \"useMutablePlasmicQueryData.useCallback[fetcherWrapper]\": function*() {\n                    setIsLoading(true);\n                    try {\n                        return yield wrapLoadingFetcher(fetcher)(...args);\n                    } finally{\n                        setIsLoading(false);\n                    }\n                }\n            }[\"useMutablePlasmicQueryData.useCallback[fetcherWrapper]\"])\n    }[\"useMutablePlasmicQueryData.useCallback[fetcherWrapper]\"], [\n        fetcher\n    ]);\n    const laggyDataRef = react__WEBPACK_IMPORTED_MODULE_0___default().useRef();\n    const { isValidating, mutate, data, error } = (0,swr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(key, fetcherWrapper, opts);\n    react__WEBPACK_IMPORTED_MODULE_0___default().useEffect({\n        \"useMutablePlasmicQueryData.useEffect\": ()=>{\n            if (data !== void 0) {\n                laggyDataRef.current = data;\n            }\n        }\n    }[\"useMutablePlasmicQueryData.useEffect\"], [\n        data\n    ]);\n    return react__WEBPACK_IMPORTED_MODULE_0___default().useMemo({\n        \"useMutablePlasmicQueryData.useMemo\": ()=>__spreadValues(__spreadValues({\n                isValidating,\n                mutate,\n                isLoading: data === void 0 && error === void 0 || isLoading\n            }, data !== void 0 ? {\n                data\n            } : error === void 0 && laggyDataRef.current ? // Show previous data if available\n            {\n                data: laggyDataRef.current,\n                isLagging: true\n            } : {}), error !== void 0 ? {\n                error\n            } : {})\n    }[\"useMutablePlasmicQueryData.useMemo\"], [\n        isValidating,\n        mutate,\n        data,\n        error,\n        isLoading\n    ]);\n}\nfunction PlasmicQueryDataProvider(props) {\n    const { children, suspense, prefetchedCache } = props;\n    const prepass = react__WEBPACK_IMPORTED_MODULE_0___default().useContext(PrepassContext);\n    if (prepass) {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, children);\n    } else {\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(swr__WEBPACK_IMPORTED_MODULE_1__.SWRConfig, {\n            value: {\n                fallback: prefetchedCache != null ? prefetchedCache : {},\n                suspense\n            }\n        }, children);\n    }\n}\nvar PrepassContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext(false);\nfunction PlasmicPrepassContext(props) {\n    const { cache, children } = props;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PrepassContext.Provider, {\n        value: true\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(swr__WEBPACK_IMPORTED_MODULE_1__.SWRConfig, {\n        value: {\n            provider: ()=>cache,\n            suspense: true,\n            fallback: {}\n        }\n    }, children));\n}\nvar usePlasmicDataConfig = swr__WEBPACK_IMPORTED_MODULE_1__.useSWRConfig;\nvar loadingCount = 0;\nvar listeners = [];\nfunction addLoadingStateListener(listener, opts) {\n    listeners.push(listener);\n    if (opts == null ? void 0 : opts.immediate) {\n        listener(loadingCount > 0);\n    }\n    return ()=>{\n        listeners.splice(listeners.indexOf(listener), 1);\n    };\n}\nfunction wrapLoadingFetcher(fetcher) {\n    return (...args)=>__async(this, null, function*() {\n            if (loadingCount === 0) {\n                listeners.forEach((listener)=>listener(true));\n            }\n            loadingCount += 1;\n            try {\n                const res = fetcher(...args);\n                return isPromiseLike(res) ? yield res : res;\n            } finally{\n                loadingCount -= 1;\n                if (loadingCount === 0) {\n                    listeners.forEach((listener)=>listener(false));\n                }\n            }\n        });\n}\nfunction isPromiseLike(x) {\n    return !!x && typeof x === \"object\" && \"then\" in x && typeof x.then === \"function\";\n}\nfunction isPlasmicPrepass() {\n    var _a, _b, _c;\n    return !!((_c = (_b = (_a = (react__WEBPACK_IMPORTED_MODULE_0___default().__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)) == null ? void 0 : _a.ReactCurrentDispatcher) == null ? void 0 : _b.current) == null ? void 0 : _c.isPlasmicPrepass);\n}\nvar HeadMetadataContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createContext({});\n// src/index.tsx\n\nif (false) {}\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/query/dist/index.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@plasmicapp/react-ssr-prepass/dist/react-ssr-prepass.es.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@plasmicapp/react-ssr-prepass/dist/react-ssr-prepass.es.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ renderPrepass)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function(n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) {\n        ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n      }\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\n\nvar Element = 60103;\n\nvar TransitionalElement = 60103;\n\nvar Portal = 60106;\n\nvar Fragment = 60107;\n\nvar StrictMode = 60108;\n\nvar Profiler = 60114;\n\nvar ContextProvider = 60109;\n\nvar ContextConsumer = undefined;\n\nvar Context = 60110;\n\nvar ConcurrentMode = 60111;\n\nvar ForwardRef = 60112;\n\nvar Suspense = 60113;\n\nvar Memo = 60115;\n\nvar Lazy = 60116;\n\nvar ClientReferenceTag = undefined;\n\nif (typeof Symbol === \"function\" && Symbol.for) {\n  var symbolFor = Symbol.for;\n  Element = symbolFor(\"react.element\");\n  TransitionalElement = symbolFor(\"react.transitional.element\");\n  Portal = symbolFor(\"react.portal\");\n  Fragment = symbolFor(\"react.fragment\");\n  StrictMode = symbolFor(\"react.strict_mode\");\n  Profiler = symbolFor(\"react.profiler\");\n  ContextProvider = symbolFor(\"react.provider\");\n  ContextConsumer = symbolFor(\"react.consumer\");\n  Context = symbolFor(\"react.context\");\n  ConcurrentMode = symbolFor(\"react.concurrent_mode\");\n  ForwardRef = symbolFor(\"react.forward_ref\");\n  Suspense = symbolFor(\"react.suspense\");\n  Memo = symbolFor(\"react.memo\");\n  Lazy = symbolFor(\"react.lazy\");\n  ClientReferenceTag = symbolFor(\"react.client.reference\");\n}\n\nvar REACT_ELEMENT_TYPE = Element;\n\nvar REACT_TRANSITIONAL_ELEMENT_TYPE = TransitionalElement;\n\nvar REACT_PORTAL_TYPE = Portal;\n\nvar REACT_FRAGMENT_TYPE = Fragment;\n\nvar REACT_STRICT_MODE_TYPE = StrictMode;\n\nvar REACT_PROFILER_TYPE = Profiler;\n\nvar REACT_PROVIDER_TYPE = ContextProvider;\n\nvar REACT_CONSUMER_TYPE = ContextConsumer;\n\nvar REACT_CONTEXT_TYPE = Context;\n\nvar REACT_CONCURRENT_MODE_TYPE = ConcurrentMode;\n\nvar REACT_FORWARD_REF_TYPE = ForwardRef;\n\nvar REACT_SUSPENSE_TYPE = Suspense;\n\nvar REACT_MEMO_TYPE = Memo;\n\nvar REACT_LAZY_TYPE = Lazy;\n\nvar CLIENT_REFERENCE_TAG = ClientReferenceTag;\n\nfunction isClientReference(reference) {\n  return reference.$$typeof === CLIENT_REFERENCE_TAG;\n}\n\nvar getComponentName = function(type) {\n  if (isClientReference(type)) {\n    return undefined;\n  }\n  if (type.displayName) {\n    return type.displayName;\n  }\n  if (shouldConstruct(type)) {\n    return type.constructor.name;\n  } else {\n    return type.name;\n  }\n};\n\nfunction isReact19() {\n  return !(react__WEBPACK_IMPORTED_MODULE_0___default().__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\n}\n\nvar shouldConstruct = function(Comp) {\n  return Comp.prototype && Comp.prototype.isReactComponent;\n};\n\nvar typeOf = function(x) {\n  switch (x.$$typeof) {\n   case REACT_PORTAL_TYPE:\n    return REACT_PORTAL_TYPE;\n\n   case REACT_ELEMENT_TYPE:\n   case REACT_TRANSITIONAL_ELEMENT_TYPE:\n    switch (x.type) {\n     case REACT_CONCURRENT_MODE_TYPE:\n      return REACT_CONCURRENT_MODE_TYPE;\n\n     case REACT_FRAGMENT_TYPE:\n      return REACT_FRAGMENT_TYPE;\n\n     case REACT_PROFILER_TYPE:\n      return REACT_PROFILER_TYPE;\n\n     case REACT_STRICT_MODE_TYPE:\n      return REACT_STRICT_MODE_TYPE;\n\n     case REACT_SUSPENSE_TYPE:\n      return REACT_SUSPENSE_TYPE;\n\n     default:\n      {\n        switch (x.type && x.type.$$typeof) {\n         case REACT_LAZY_TYPE:\n          return REACT_LAZY_TYPE;\n\n         case REACT_MEMO_TYPE:\n          return REACT_MEMO_TYPE;\n\n         case REACT_CONSUMER_TYPE:\n          return REACT_CONSUMER_TYPE;\n\n         case REACT_CONTEXT_TYPE:\n          return isReact19() ? REACT_PROVIDER_TYPE : REACT_CONSUMER_TYPE;\n\n         case REACT_PROVIDER_TYPE:\n          return REACT_PROVIDER_TYPE;\n\n         case REACT_FORWARD_REF_TYPE:\n          return REACT_FORWARD_REF_TYPE;\n\n         default:\n          return REACT_ELEMENT_TYPE;\n        }\n      }\n    }\n\n   default:\n    return undefined;\n  }\n};\n\nvar toArray = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray;\n\nvar isAbstractElement = function(node) {\n  return node !== null && typeof node === \"object\";\n};\n\nvar getChildrenArray = function(node) {\n  return toArray(node).filter(isAbstractElement);\n};\n\nvar computeProps = function(props, defaultProps) {\n  return typeof defaultProps === \"object\" ? _extends({}, defaultProps, props) : props;\n};\n\nvar currentContextStore = new Map;\n\nvar currentContextMap = {};\n\nvar prevContextMap = undefined;\n\nvar prevContextEntry = undefined;\n\nvar getCurrentContextMap = function() {\n  return _extends({}, currentContextMap);\n};\n\nvar getCurrentContextStore = function() {\n  return new Map(currentContextStore);\n};\n\nvar flushPrevContextMap = function() {\n  var prev = prevContextMap;\n  prevContextMap = undefined;\n  return prev;\n};\n\nvar flushPrevContextStore = function() {\n  var prev = prevContextEntry;\n  prevContextEntry = undefined;\n  return prev;\n};\n\nvar restoreContextMap = function(prev) {\n  if (prev !== undefined) {\n    _extends(currentContextMap, prev);\n  }\n};\n\nvar restoreContextStore = function(prev) {\n  if (prev !== undefined) {\n    currentContextStore.set(prev[0], prev[1]);\n  }\n};\n\nvar setCurrentContextMap = function(map) {\n  prevContextMap = undefined;\n  currentContextMap = map;\n};\n\nvar setCurrentContextStore = function(store) {\n  prevContextEntry = undefined;\n  currentContextStore = store;\n};\n\nvar assignContextMap = function(map) {\n  prevContextMap = {};\n  for (var name in map) {\n    prevContextMap[name] = currentContextMap[name];\n    currentContextMap[name] = map[name];\n  }\n};\n\nvar setContextValue = function(context, value) {\n  prevContextEntry = [ context, currentContextStore.get(context) ];\n  currentContextStore.set(context, value);\n};\n\nvar readContextValue = function(context) {\n  var value = currentContextStore.get(context);\n  if (value !== undefined) {\n    return value;\n  }\n  return context._currentValue;\n};\n\nvar emptyContext = {};\n\nvar maskContext = function(type) {\n  var contextType = type.contextType;\n  var contextTypes = type.contextTypes;\n  if (contextType) {\n    return readContextValue(contextType);\n  } else if (!contextTypes) {\n    return emptyContext;\n  }\n  var maskedContext = {};\n  for (var name in contextTypes) {\n    maskedContext[name] = currentContextMap[name];\n  }\n  return maskedContext;\n};\n\nvar currentErrorFrame = null;\n\nvar getCurrentErrorFrame = function() {\n  return currentErrorFrame;\n};\n\nvar setCurrentErrorFrame = function(frame) {\n  currentErrorFrame = frame || null;\n};\n\nvar rendererStateRef = {\n  current: {\n    uniqueID: 0\n  }\n};\n\nvar initRendererState = function() {\n  return rendererStateRef.current = {\n    uniqueID: 0\n  };\n};\n\nvar setCurrentRendererState = function(state) {\n  return rendererStateRef.current = state;\n};\n\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;\n}\n\nvar objectIs = typeof Object.is === \"function\" ? Object.is : is;\n\nvar is$1 = objectIs;\n\nvar currentIdentity = null;\n\nvar makeIdentity = function() {\n  return {};\n};\n\nvar setCurrentIdentity = function(id) {\n  currentIdentity = id;\n};\n\nvar getCurrentIdentity = function() {\n  if (currentIdentity === null) {\n    throw new Error(\"[react-ssr-prepass] Hooks can only be called inside the body of a function component. \" + \"(https://fb.me/react-invalid-hook-call)\");\n  }\n  return currentIdentity;\n};\n\nvar firstWorkInProgressHook = null;\n\nvar workInProgressHook = null;\n\nvar didScheduleRenderPhaseUpdate = false;\n\nvar renderPhaseUpdates = null;\n\nvar numberOfReRenders = 0;\n\nvar RE_RENDER_LIMIT$1 = 25;\n\nvar getFirstHook = function() {\n  return firstWorkInProgressHook;\n};\n\nvar setFirstHook = function(hook) {\n  firstWorkInProgressHook = hook;\n};\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  if (prevDeps === null) {\n    return false;\n  }\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (!is$1(nextDeps[i], prevDeps[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction createHook() {\n  return {\n    memoizedState: null,\n    queue: null,\n    next: null\n  };\n}\n\nfunction createWorkInProgressHook() {\n  if (workInProgressHook === null) {\n    if (firstWorkInProgressHook === null) {\n      return firstWorkInProgressHook = workInProgressHook = createHook();\n    } else {\n      return workInProgressHook = firstWorkInProgressHook;\n    }\n  } else {\n    if (workInProgressHook.next === null) {\n      return workInProgressHook = workInProgressHook.next = createHook();\n    } else {\n      return workInProgressHook = workInProgressHook.next;\n    }\n  }\n}\n\nfunction renderWithHooks(Component, props, refOrContext) {\n  workInProgressHook = null;\n  var children = Component(props, refOrContext);\n  while (numberOfReRenders < RE_RENDER_LIMIT$1 && didScheduleRenderPhaseUpdate) {\n    didScheduleRenderPhaseUpdate = false;\n    numberOfReRenders += 1;\n    workInProgressHook = null;\n    children = Component(props, refOrContext);\n  }\n  numberOfReRenders = 0;\n  renderPhaseUpdates = null;\n  workInProgressHook = null;\n  return children;\n}\n\nfunction readContext(context, _) {\n  return readContextValue(context);\n}\n\nfunction useContext(context, _) {\n  getCurrentIdentity();\n  return readContextValue(context);\n}\n\nfunction basicStateReducer(state, action) {\n  return typeof action === \"function\" ? action(state) : action;\n}\n\nfunction useState(initialState) {\n  return useReducer(basicStateReducer, initialState);\n}\n\nfunction useReducer(reducer, initialArg, init) {\n  var id = getCurrentIdentity();\n  workInProgressHook = createWorkInProgressHook();\n  if (workInProgressHook.queue === null) {\n    var initialState;\n    if (reducer === basicStateReducer) {\n      initialState = typeof initialArg === \"function\" ? initialArg() : initialArg;\n    } else {\n      initialState = init !== undefined ? init(initialArg) : initialArg;\n    }\n    workInProgressHook.memoizedState = initialState;\n  }\n  var queue = workInProgressHook.queue || (workInProgressHook.queue = {\n    last: null,\n    dispatch: null\n  });\n  var dispatch = queue.dispatch || (queue.dispatch = dispatchAction.bind(null, id, queue));\n  if (renderPhaseUpdates !== null) {\n    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n    if (firstRenderPhaseUpdate !== undefined) {\n      renderPhaseUpdates.delete(queue);\n      var newState = workInProgressHook.memoizedState;\n      var update = firstRenderPhaseUpdate;\n      do {\n        var action = update.action;\n        newState = reducer(newState, action);\n        update = update.next;\n      } while (update !== null);\n      workInProgressHook.memoizedState = newState;\n    }\n  }\n  return [ workInProgressHook.memoizedState, dispatch ];\n}\n\nfunction useMemo(nextCreate, deps) {\n  getCurrentIdentity();\n  workInProgressHook = createWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n  var prevState = workInProgressHook.memoizedState;\n  if (prevState !== null && nextDeps !== null) {\n    var prevDeps = prevState[1];\n    if (areHookInputsEqual(nextDeps, prevDeps)) {\n      return prevState[0];\n    }\n  }\n  var nextValue = nextCreate();\n  workInProgressHook.memoizedState = [ nextValue, nextDeps ];\n  return nextValue;\n}\n\nfunction useRef(initialValue) {\n  getCurrentIdentity();\n  workInProgressHook = createWorkInProgressHook();\n  var previousRef = workInProgressHook.memoizedState;\n  if (previousRef === null) {\n    var ref = {\n      current: initialValue\n    };\n    workInProgressHook.memoizedState = ref;\n    return ref;\n  } else {\n    return previousRef;\n  }\n}\n\nfunction useOpaqueIdentifier() {\n  getCurrentIdentity();\n  workInProgressHook = createWorkInProgressHook();\n  if (!workInProgressHook.memoizedState) {\n    workInProgressHook.memoizedState = \"R:\" + (rendererStateRef.current.uniqueID++).toString(36);\n  }\n  return workInProgressHook.memoizedState;\n}\n\nfunction dispatchAction(componentIdentity, queue, action) {\n  if (componentIdentity === currentIdentity) {\n    didScheduleRenderPhaseUpdate = true;\n    var update = {\n      action: action,\n      next: null\n    };\n    if (renderPhaseUpdates === null) {\n      renderPhaseUpdates = new Map;\n    }\n    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n    if (firstRenderPhaseUpdate === undefined) {\n      renderPhaseUpdates.set(queue, update);\n    } else {\n      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;\n      while (lastRenderPhaseUpdate.next !== null) {\n        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n      }\n      lastRenderPhaseUpdate.next = update;\n    }\n  }\n}\n\nfunction useCallback(callback, deps) {\n  return useMemo((function() {\n    return callback;\n  }), deps);\n}\n\nfunction useMutableSource(source, getSnapshot, _subscribe) {\n  getCurrentIdentity();\n  return getSnapshot(source._source);\n}\n\nfunction noop() {}\n\nfunction _ref$3(callback) {\n  callback();\n}\n\nfunction useTransition() {\n  var startTransition = _ref$3;\n  return [ startTransition, false ];\n}\n\nfunction useDeferredValue(input) {\n  return input;\n}\n\nfunction useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n  return getSnapshot();\n}\n\nvar Dispatcher = {\n  readContext: readContext,\n  useSyncExternalStore: useSyncExternalStore,\n  useContext: useContext,\n  useMemo: useMemo,\n  useReducer: useReducer,\n  useRef: useRef,\n  useState: useState,\n  useCallback: useCallback,\n  useMutableSource: useMutableSource,\n  useTransition: useTransition,\n  useDeferredValue: useDeferredValue,\n  useOpaqueIdentifier: useOpaqueIdentifier,\n  useId: useOpaqueIdentifier,\n  unstable_useId: useOpaqueIdentifier,\n  unstable_useOpaqueIdentifier: useOpaqueIdentifier,\n  useLayoutEffect: noop,\n  useImperativeHandle: noop,\n  useEffect: noop,\n  useDebugValue: noop,\n  useInsertionEffect: noop,\n  isPlasmicPrepass: true\n};\n\nvar resolve = function(type) {\n  var payload = type._payload || type;\n  if (payload._status === 0) {\n    return payload._result;\n  } else if (payload._status === 1) {\n    return Promise.resolve(payload._result);\n  } else if (payload._status === 2) {\n    return Promise.reject(payload._result);\n  }\n  payload._status = 0;\n  return payload._result = (payload._ctor || payload._result)().then((function(Component) {\n    payload._result = Component;\n    if (typeof Component === \"function\") {\n      payload._status = 1;\n    } else if (Component !== null && typeof Component === \"object\" && typeof Component.default === \"function\") {\n      payload._result = Component.default;\n      payload._status = 1;\n    } else {\n      payload._status = 2;\n    }\n  })).catch((function(error) {\n    payload._status = 2;\n    payload._result = error;\n    return Promise.reject(error);\n  }));\n};\n\nvar makeFrame$2 = function(type, props, thenable) {\n  return {\n    kind: \"frame.lazy\",\n    contextMap: getCurrentContextMap(),\n    contextStore: getCurrentContextStore(),\n    errorFrame: getCurrentErrorFrame(),\n    thenable: thenable,\n    props: props,\n    type: type\n  };\n};\n\nvar render$4 = function(type, props, queue) {\n  var payload = type._payload || type;\n  if (payload._status === 1 && payload._result) {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(payload._result, props);\n  }\n  try {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(type._init(type._payload), props);\n  } catch (err) {\n    if (!!err && typeof err.then === \"function\") {\n      queue.push(makeFrame$2(type, props, err));\n    }\n    return null;\n  }\n};\n\nvar mount$3 = function(type, props, queue) {\n  var payload = type._payload || type;\n  if (payload._status != null && payload._status <= 0) {\n    queue.push(makeFrame$2(type, props, resolve(type)));\n    return null;\n  }\n  return render$4(type, props, queue);\n};\n\nvar update$4 = function(queue, frame) {\n  setCurrentIdentity(null);\n  setCurrentContextMap(frame.contextMap);\n  setCurrentContextStore(frame.contextStore);\n  setCurrentErrorFrame(frame.errorFrame);\n  return render$4(frame.type, frame.props, queue);\n};\n\nvar makeFrame$1 = function(type, props, thenable) {\n  return {\n    contextMap: getCurrentContextMap(),\n    contextStore: getCurrentContextStore(),\n    id: getCurrentIdentity(),\n    hook: getFirstHook(),\n    kind: \"frame.hooks\",\n    errorFrame: getCurrentErrorFrame(),\n    thenable: thenable,\n    props: props,\n    type: type\n  };\n};\n\nvar render$3 = function(type, props, queue) {\n  try {\n    return renderWithHooks(type, computeProps(props, type.defaultProps), maskContext(type));\n  } catch (error) {\n    if (typeof error.then !== \"function\") {\n      console.warn(\"PLASMIC: Encountered error when pre-rendering \" + getComponentName(type) + \": \" + error);\n      return null;\n    }\n    queue.push(makeFrame$1(type, props, error));\n    return null;\n  }\n};\n\nvar mount$2 = function(type, props, queue, visitor, element) {\n  setFirstHook(null);\n  setCurrentIdentity(makeIdentity());\n  var promise = visitor(element);\n  if (promise) {\n    queue.push(makeFrame$1(type, props, promise));\n    return null;\n  }\n  return render$3(type, props, queue);\n};\n\nvar update$3 = function(queue, frame) {\n  setFirstHook(frame.hook);\n  setCurrentIdentity(frame.id);\n  setCurrentContextMap(frame.contextMap);\n  setCurrentContextStore(frame.contextStore);\n  setCurrentErrorFrame(frame.errorFrame);\n  return render$3(frame.type, frame.props, queue);\n};\n\nvar RE_RENDER_LIMIT = 25;\n\nfunction _ref$2() {\n  return false;\n}\n\nfunction _ref2$1() {\n  return null;\n}\n\nvar createUpdater = function() {\n  var queue = [];\n  return {\n    _thrown: 0,\n    queue: queue,\n    isMounted: _ref$2,\n    enqueueForceUpdate: _ref2$1,\n    enqueueReplaceState: function(instance, completeState) {\n      if (instance._isMounted) {\n        queue.length = 0;\n        queue.push(completeState);\n      }\n    },\n    enqueueSetState: function(instance, currentPartialState) {\n      if (instance._isMounted) {\n        queue.push(currentPartialState);\n      }\n    }\n  };\n};\n\nvar flushEnqueuedState = function(instance) {\n  var queue = instance.updater.queue;\n  if (queue.length > 0) {\n    var nextState = _extends({}, instance.state);\n    for (var i = 0, l = queue.length; i < l; i++) {\n      var partial = queue[i];\n      var partialState = typeof partial === \"function\" ? partial.call(instance, nextState, instance.props, instance.context) : partial;\n      if (partialState !== null) {\n        _extends(nextState, partialState);\n      }\n    }\n    instance.state = nextState;\n    queue.length = 0;\n  }\n};\n\nvar createInstance = function(type, props) {\n  var updater = createUpdater();\n  var computedProps = computeProps(props, type.defaultProps);\n  var context = maskContext(type);\n  var instance = new type(computedProps, context, updater);\n  instance.props = computedProps;\n  instance.context = context;\n  instance.updater = updater;\n  instance._isMounted = true;\n  if (instance.state === undefined) {\n    instance.state = null;\n  }\n  if (typeof instance.componentDidCatch === \"function\" || typeof type.getDerivedStateFromError === \"function\") {\n    var frame = makeFrame(type, instance, null);\n    frame.errorFrame = frame;\n    setCurrentErrorFrame(frame);\n  }\n  if (typeof type.getDerivedStateFromProps === \"function\") {\n    var getDerivedStateFromProps = type.getDerivedStateFromProps;\n    var state = getDerivedStateFromProps(instance.props, instance.state);\n    if (state !== null && state !== undefined) {\n      instance.state = _extends({}, instance.state, state);\n    }\n  } else if (typeof instance.componentWillMount === \"function\") {\n    instance.componentWillMount();\n  } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n    instance.UNSAFE_componentWillMount();\n  }\n  return instance;\n};\n\nvar makeFrame = function(type, instance, thenable) {\n  return {\n    contextMap: getCurrentContextMap(),\n    contextStore: getCurrentContextStore(),\n    errorFrame: getCurrentErrorFrame(),\n    thenable: thenable,\n    kind: \"frame.class\",\n    error: null,\n    instance: instance,\n    type: type\n  };\n};\n\nvar render$2 = function(type, instance, queue) {\n  flushEnqueuedState(instance);\n  var child = null;\n  try {\n    child = instance.render();\n  } catch (error) {\n    if (typeof error.then !== \"function\") {\n      console.warn(\"PLASMIC: Encountered error when pre-rendering component \" + getComponentName(type) + \". This is fine as long as you are not fetching data with @plasmicapp/query inside this component.  Error: \" + error);\n      return null;\n    }\n    queue.push(makeFrame(type, instance, error));\n    return null;\n  }\n  if (type.childContextTypes !== undefined && typeof instance.getChildContext === \"function\") {\n    var childContext = instance.getChildContext();\n    if (childContext !== null && typeof childContext === \"object\") {\n      assignContextMap(childContext);\n    }\n  }\n  if (typeof instance.getDerivedStateFromProps !== \"function\" && (typeof instance.componentWillMount === \"function\" || typeof instance.UNSAFE_componentWillMount === \"function\") && typeof instance.componentWillUnmount === \"function\") {\n    try {\n      instance.componentWillUnmount();\n    } catch (_err) {}\n  }\n  instance._isMounted = false;\n  return child;\n};\n\nvar mount$1 = function(type, props, queue, visitor, element) {\n  setCurrentIdentity(null);\n  var instance = createInstance(type, props);\n  var promise = visitor(element, instance);\n  if (promise) {\n    queue.push(makeFrame(type, instance, promise));\n    return null;\n  }\n  return render$2(type, instance, queue);\n};\n\nvar update$2 = function(queue, frame) {\n  setCurrentIdentity(null);\n  setCurrentContextMap(frame.contextMap);\n  setCurrentContextStore(frame.contextStore);\n  setCurrentErrorFrame(frame.errorFrame);\n  if (frame.error) {\n    if (++frame.instance.updater._thrown >= RE_RENDER_LIMIT) {\n      return null;\n    }\n    frame.instance._isMounted = true;\n    if (typeof frame.instance.componentDidCatch === \"function\") {\n      frame.instance.componentDidCatch(frame.error);\n    }\n    if (typeof frame.type.getDerivedStateFromError === \"function\") {\n      frame.instance.updater.enqueueSetState(frame.instance, frame.type.getDerivedStateFromError(frame.error));\n    }\n  }\n  return render$2(frame.type, frame.instance, queue);\n};\n\nfunction _ref$1(elt) {\n  return elt && typeof elt === \"object\" && typeOf(elt);\n}\n\nvar render$1 = function(type, props, queue, clientRefVisitor, element) {\n  try {\n    var node = clientRefVisitor(element);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), {}, [].concat(node ? getChildrenArray(node) : Object.values(props).flat(Infinity).filter(_ref$1)));\n  } catch (error) {\n    if (typeof error.then !== \"function\") {\n      console.warn(\"PLASMIC: Encountered error when pre-rendering client reference: \" + error);\n      return null;\n    }\n    queue.push({\n      contextMap: getCurrentContextMap(),\n      contextStore: getCurrentContextStore(),\n      errorFrame: getCurrentErrorFrame(),\n      id: getCurrentIdentity(),\n      hook: getFirstHook(),\n      thenable: error,\n      kind: \"client-ref\",\n      type: type,\n      props: props,\n      element: element,\n      clientRefVisitor: clientRefVisitor\n    });\n    return null;\n  }\n};\n\nvar mount = function(type, props, queue, clientRefVisitor, element) {\n  setFirstHook(null);\n  setCurrentIdentity(makeIdentity());\n  return render$1(type, props, queue, clientRefVisitor, element);\n};\n\nvar update$1 = function(queue, frame) {\n  setFirstHook(frame.hook);\n  setCurrentIdentity(frame.id);\n  setCurrentContextMap(frame.contextMap);\n  setCurrentContextStore(frame.contextStore);\n  setCurrentErrorFrame(frame.errorFrame);\n  return render$1(frame.type, frame.props, queue, frame.clientRefVisitor, frame.element);\n};\n\nvar REACT_INTERNALS = (react__WEBPACK_IMPORTED_MODULE_0___default().__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) || (react__WEBPACK_IMPORTED_MODULE_0___default().__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE) || (react__WEBPACK_IMPORTED_MODULE_0___default().__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE);\n\nvar ReactCurrentDispatcher = REACT_INTERNALS.ReactCurrentDispatcher || REACT_INTERNALS;\n\nvar getReactCurrentDispatcher = function() {\n  return ReactCurrentDispatcher.current || ReactCurrentDispatcher.H;\n};\n\nvar injectReactCurrentDispatcher = function(newDispatcher) {\n  if (!isReact19()) {\n    ReactCurrentDispatcher.current = newDispatcher;\n  } else {\n    ReactCurrentDispatcher.H = newDispatcher;\n  }\n};\n\nvar SHOULD_YIELD = typeof setImmediate === \"function\";\n\nvar YIELD_AFTER_MS = 5;\n\nvar render = function(type, props, queue, visitor, clientRefVisitor, element) {\n  if (isClientReference(type)) {\n    return mount(type, props, queue, clientRefVisitor, element);\n  }\n  return shouldConstruct(type) ? mount$1(type, props, queue, visitor, element) : mount$2(type, props, queue, visitor, element);\n};\n\nvar visitElement = function(element, queue, visitor, clientRefVisitor) {\n  switch (typeOf(element)) {\n   case REACT_SUSPENSE_TYPE:\n   case REACT_STRICT_MODE_TYPE:\n   case REACT_CONCURRENT_MODE_TYPE:\n   case REACT_PROFILER_TYPE:\n   case REACT_FRAGMENT_TYPE:\n    {\n      var fragmentElement = element;\n      return getChildrenArray(fragmentElement.props.children);\n    }\n\n   case REACT_PROVIDER_TYPE:\n    {\n      var providerElement = element;\n      var ref = providerElement.props;\n      var value = ref.value;\n      var children = ref.children;\n      var type = providerElement.type;\n      var context = typeof type._context === \"object\" ? type._context : type;\n      setContextValue(context, value);\n      return getChildrenArray(children);\n    }\n\n   case REACT_CONSUMER_TYPE:\n    {\n      var consumerElement = element;\n      var ref$1 = consumerElement.props;\n      var children$1 = ref$1.children;\n      if (typeof children$1 === \"function\") {\n        var type$1 = consumerElement.type;\n        var context$1 = typeof type$1._context === \"object\" ? type$1._context : type$1;\n        var value$1 = readContextValue(context$1);\n        return getChildrenArray(children$1(value$1));\n      } else {\n        return [];\n      }\n    }\n\n   case REACT_LAZY_TYPE:\n    {\n      var lazyElement = element;\n      var type$2 = lazyElement.type;\n      var child = mount$3(type$2, lazyElement.props, queue);\n      return getChildrenArray(child);\n    }\n\n   case REACT_MEMO_TYPE:\n    {\n      var memoElement = element;\n      var ref$2 = memoElement.type;\n      var type$3 = ref$2.type;\n      var child$1 = (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(type$3, memoElement.props);\n      return getChildrenArray(child$1);\n    }\n\n   case REACT_FORWARD_REF_TYPE:\n    {\n      var refElement = element;\n      var ref$3 = refElement.type;\n      var type$4 = ref$3.render;\n      var defaultProps = ref$3.defaultProps;\n      var props = computeProps(refElement.props, defaultProps);\n      var child$2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(type$4, props);\n      return getChildrenArray(child$2);\n    }\n\n   case REACT_ELEMENT_TYPE:\n    {\n      var el = element;\n      if (typeof el.type === \"string\") {\n        return getChildrenArray(el.props.children);\n      } else {\n        var userElement = element;\n        var type$5 = userElement.type;\n        var props$1 = userElement.props;\n        var child$3 = render(type$5, props$1, queue, visitor, clientRefVisitor, userElement);\n        return getChildrenArray(child$3);\n      }\n    }\n\n   case REACT_PORTAL_TYPE:\n   default:\n    return [];\n  }\n};\n\nvar visitLoop = function(traversalChildren, traversalMap, traversalStore, traversalErrorFrame, queue, visitor, clientRefVisitor) {\n  var prevDispatcher = getReactCurrentDispatcher();\n  var start = Date.now();\n  try {\n    injectReactCurrentDispatcher(Dispatcher);\n    while (traversalChildren.length > 0) {\n      var element = traversalChildren[traversalChildren.length - 1].shift();\n      if (element !== undefined) {\n        var children = visitElement(element, queue, visitor, clientRefVisitor);\n        traversalChildren.push(children);\n        traversalMap.push(flushPrevContextMap());\n        traversalStore.push(flushPrevContextStore());\n        traversalErrorFrame.push(getCurrentErrorFrame());\n      } else {\n        traversalChildren.pop();\n        restoreContextMap(traversalMap.pop());\n        restoreContextStore(traversalStore.pop());\n        setCurrentErrorFrame(traversalErrorFrame.pop());\n      }\n      if (SHOULD_YIELD && Date.now() - start > YIELD_AFTER_MS) {\n        return true;\n      }\n    }\n    return false;\n  } catch (error) {\n    var errorFrame = getCurrentErrorFrame();\n    if (!errorFrame) {\n      throw error;\n    }\n    errorFrame.error = error;\n    queue.unshift(errorFrame);\n    return false;\n  } finally {\n    injectReactCurrentDispatcher(prevDispatcher);\n  }\n};\n\nvar makeYieldFrame = function(traversalChildren, traversalMap, traversalStore, traversalErrorFrame) {\n  return {\n    contextMap: getCurrentContextMap(),\n    contextStore: getCurrentContextStore(),\n    errorFrame: getCurrentErrorFrame(),\n    thenable: null,\n    kind: \"frame.yield\",\n    traversalChildren: traversalChildren,\n    traversalMap: traversalMap,\n    traversalStore: traversalStore,\n    traversalErrorFrame: traversalErrorFrame\n  };\n};\n\nvar visit = function(init, queue, visitor, clientRefVisitor) {\n  var traversalChildren = [ init ];\n  var traversalMap = [ flushPrevContextMap() ];\n  var traversalStore = [ flushPrevContextStore() ];\n  var traversalErrorFrame = [ getCurrentErrorFrame() ];\n  var hasYielded = visitLoop(traversalChildren, traversalMap, traversalStore, traversalErrorFrame, queue, visitor, clientRefVisitor);\n  if (hasYielded) {\n    queue.unshift(makeYieldFrame(traversalChildren, traversalMap, traversalStore, traversalErrorFrame));\n  }\n};\n\nvar update = function(frame, queue, visitor, clientRefVisitor) {\n  if (frame.kind === \"frame.yield\") {\n    setCurrentIdentity(null);\n    setCurrentContextMap(frame.contextMap);\n    setCurrentContextStore(frame.contextStore);\n    setCurrentErrorFrame(frame.errorFrame);\n    var hasYielded = visitLoop(frame.traversalChildren, frame.traversalMap, frame.traversalStore, frame.traversalErrorFrame, queue, visitor, clientRefVisitor);\n    if (hasYielded) {\n      queue.unshift(makeYieldFrame(frame.traversalChildren, frame.traversalMap, frame.traversalStore, frame.traversalErrorFrame));\n    }\n  } else {\n    var prevDispatcher = getReactCurrentDispatcher();\n    var children = null;\n    injectReactCurrentDispatcher(Dispatcher);\n    try {\n      if (frame.kind === \"frame.class\") {\n        children = update$2(queue, frame);\n      } else if (frame.kind === \"frame.hooks\") {\n        children = update$3(queue, frame);\n      } else if (frame.kind === \"frame.lazy\") {\n        children = update$4(queue, frame);\n      } else if (frame.kind === \"client-ref\") {\n        children = update$1(queue, frame);\n      }\n    } catch (error) {\n      var errorFrame = getCurrentErrorFrame();\n      if (!errorFrame) {\n        throw error;\n      }\n      errorFrame.error = error;\n      queue.unshift(errorFrame);\n      children = null;\n    } finally {\n      injectReactCurrentDispatcher(prevDispatcher);\n    }\n    visit(getChildrenArray(children), queue, visitor, clientRefVisitor);\n  }\n};\n\nfunction _ref(resolve, reject) {\n  setImmediate(resolve);\n}\n\nvar flushFrames = function(queue, visitor, clientRefVisitor, state) {\n  var frame = queue.shift();\n  if (!frame) {\n    return Promise.resolve();\n  }\n  if (SHOULD_YIELD && frame.kind === \"frame.yield\") {\n    frame.thenable = new Promise(_ref);\n  }\n  return Promise.resolve(frame.thenable).then((function() {\n    setCurrentRendererState(state);\n    update(frame, queue, visitor, clientRefVisitor);\n    return flushFrames(queue, visitor, clientRefVisitor, state);\n  }), (function(error) {\n    if (!frame.errorFrame) {\n      throw error;\n    }\n    frame.errorFrame.error = error;\n    update(frame.errorFrame, queue, visitor, clientRefVisitor);\n  }));\n};\n\nvar defaultVisitor = function() {\n  return undefined;\n};\n\nvar runningPrepassCount = 0;\n\nfunction _ref2() {\n  runningPrepassCount--;\n  if (!runningPrepassCount) {\n    delete globalThis.__ssrPrepassEnv;\n  }\n}\n\nvar renderPrepass = function(element, visitor, clientRefVisitor) {\n  if (!visitor) {\n    visitor = defaultVisitor;\n  }\n  if (!clientRefVisitor) {\n    clientRefVisitor = defaultVisitor;\n  }\n  var queue = [];\n  var state = initRendererState();\n  setCurrentContextMap({});\n  setCurrentContextStore(new Map);\n  setCurrentErrorFrame(null);\n  try {\n    runningPrepassCount++;\n    globalThis.__ssrPrepassEnv = {\n      readContextValue: readContextValue,\n      setContextValue: setContextValue\n    };\n    visit(getChildrenArray(element), queue, visitor, clientRefVisitor);\n  } catch (error) {\n    runningPrepassCount--;\n    if (!runningPrepassCount) {\n      delete globalThis.__ssrPrepassEnv;\n    }\n    return Promise.reject(error);\n  }\n  return flushFrames(queue, visitor, clientRefVisitor, state).finally(_ref2);\n};\n\n\n//# sourceMappingURL=react-ssr-prepass.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@plasmicapp/react-ssr-prepass/dist/react-ssr-prepass.es.js\n");

/***/ })

};
;